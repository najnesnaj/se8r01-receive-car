                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Jul 11 2014) (Linux)
                                      4 ; This file was generated Sat Feb 10 18:47:11 2018
                                      5 ;--------------------------------------------------------
                                      6 	.module se8r01_receive_car
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _main
                                     13 	.globl _Init_Tim2
                                     14 	.globl _SE8R01_Init
                                     15 	.globl _SE8R01_Analog_Init
                                     16 	.globl _SE8R01_Calibration
                                     17 	.globl _rf_switch_bank
                                     18 	.globl _init_io
                                     19 	.globl _InitializeUART
                                     20 	.globl _print_UCHAR_hex
                                     21 	.globl _UARTPrintF
                                     22 	.globl _delay
                                     23 	.globl _InitializeSystemClock
                                     24 	.globl _InitializeSPI
                                     25 	.globl _read_spi_buf
                                     26 	.globl _write_spi_buf
                                     27 	.globl _read_spi_reg
                                     28 	.globl _write_spi_reg
                                     29 	.globl _write_spi
                                     30 	.globl _delayTenMicro
                                     31 	.globl _memset
                                     32 	.globl _tx_buf
                                     33 	.globl _rx_buf
                                     34 	.globl _ADDRESS0
                                     35 	.globl _ADDRESS1
                                     36 	.globl _ADDRESS5
                                     37 	.globl _ADDRESS4
                                     38 	.globl _ADDRESS3
                                     39 	.globl _ADDRESS2
                                     40 	.globl _TX_ADDRESS
                                     41 	.globl _status
                                     42 	.globl _pip
                                     43 	.globl _signal_lv
                                     44 	.globl _newdata
                                     45 	.globl _pload_width_now
                                     46 	.globl _SE8R01_DR_500K
                                     47 	.globl _SE8R01_DR_1M
                                     48 	.globl _SE8R01_DR_2M
                                     49 	.globl _myData_pip4
                                     50 	.globl _myData_pip5
                                     51 	.globl _gtemp
                                     52 ;--------------------------------------------------------
                                     53 ; ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area DATA
      000000                         56 _gtemp::
      000000                         57 	.ds 5
      000005                         58 _myData_pip5::
      000005                         59 	.ds 5
      00000A                         60 _myData_pip4::
      00000A                         61 	.ds 5
                                     62 ;--------------------------------------------------------
                                     63 ; ram data
                                     64 ;--------------------------------------------------------
                                     65 	.area INITIALIZED
      000000                         66 _SE8R01_DR_2M::
      000000                         67 	.ds 2
      000002                         68 _SE8R01_DR_1M::
      000002                         69 	.ds 2
      000004                         70 _SE8R01_DR_500K::
      000004                         71 	.ds 2
      000006                         72 _pload_width_now::
      000006                         73 	.ds 2
      000008                         74 _newdata::
      000008                         75 	.ds 2
      00000A                         76 _signal_lv::
      00000A                         77 	.ds 1
      00000B                         78 _pip::
      00000B                         79 	.ds 2
      00000D                         80 _status::
      00000D                         81 	.ds 1
      00000E                         82 _TX_ADDRESS::
      00000E                         83 	.ds 4
      000012                         84 _ADDRESS2::
      000012                         85 	.ds 1
      000013                         86 _ADDRESS3::
      000013                         87 	.ds 1
      000014                         88 _ADDRESS4::
      000014                         89 	.ds 1
      000015                         90 _ADDRESS5::
      000015                         91 	.ds 1
      000016                         92 _ADDRESS1::
      000016                         93 	.ds 4
      00001A                         94 _ADDRESS0::
      00001A                         95 	.ds 4
      00001E                         96 _rx_buf::
      00001E                         97 	.ds 32
      00003E                         98 _tx_buf::
      00003E                         99 	.ds 32
                                    100 ;--------------------------------------------------------
                                    101 ; Stack segment in internal ram 
                                    102 ;--------------------------------------------------------
                                    103 	.area	SSEG
      000000                        104 __start__stack:
      000000                        105 	.ds	1
                                    106 
                                    107 ;--------------------------------------------------------
                                    108 ; absolute external ram data
                                    109 ;--------------------------------------------------------
                                    110 	.area DABS (ABS)
                                    111 ;--------------------------------------------------------
                                    112 ; interrupt vector 
                                    113 ;--------------------------------------------------------
                                    114 	.area HOME
      000000                        115 __interrupt_vect:
      000000 82v00u00u00            116 	int s_GSINIT ;reset
      000004 82 00 00 00            117 	int 0x0000 ;trap
      000008 82 00 00 00            118 	int 0x0000 ;int0
      00000C 82 00 00 00            119 	int 0x0000 ;int1
      000010 82 00 00 00            120 	int 0x0000 ;int2
      000014 82 00 00 00            121 	int 0x0000 ;int3
      000018 82 00 00 00            122 	int 0x0000 ;int4
      00001C 82 00 00 00            123 	int 0x0000 ;int5
      000020 82 00 00 00            124 	int 0x0000 ;int6
      000024 82 00 00 00            125 	int 0x0000 ;int7
      000028 82 00 00 00            126 	int 0x0000 ;int8
      00002C 82 00 00 00            127 	int 0x0000 ;int9
      000030 82 00 00 00            128 	int 0x0000 ;int10
      000034 82 00 00 00            129 	int 0x0000 ;int11
      000038 82 00 00 00            130 	int 0x0000 ;int12
      00003C 82 00 00 00            131 	int 0x0000 ;int13
      000040 82 00 00 00            132 	int 0x0000 ;int14
      000044 82 00 00 00            133 	int 0x0000 ;int15
      000048 82 00 00 00            134 	int 0x0000 ;int16
      00004C 82 00 00 00            135 	int 0x0000 ;int17
      000050 82 00 00 00            136 	int 0x0000 ;int18
      000054 82 00 00 00            137 	int 0x0000 ;int19
      000058 82 00 00 00            138 	int 0x0000 ;int20
      00005C 82 00 00 00            139 	int 0x0000 ;int21
      000060 82 00 00 00            140 	int 0x0000 ;int22
      000064 82 00 00 00            141 	int 0x0000 ;int23
      000068 82 00 00 00            142 	int 0x0000 ;int24
      00006C 82 00 00 00            143 	int 0x0000 ;int25
      000070 82 00 00 00            144 	int 0x0000 ;int26
      000074 82 00 00 00            145 	int 0x0000 ;int27
      000078 82 00 00 00            146 	int 0x0000 ;int28
      00007C 82 00 00 00            147 	int 0x0000 ;int29
                                    148 ;--------------------------------------------------------
                                    149 ; global & static initialisations
                                    150 ;--------------------------------------------------------
                                    151 	.area HOME
                                    152 	.area GSINIT
                                    153 	.area GSFINAL
                                    154 	.area GSINIT
      000000                        155 __sdcc_gs_init_startup:
      000000                        156 __sdcc_init_data:
                                    157 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]  158 	ldw x, #l_DATA
      000003 27 07            [ 1]  159 	jreq	00002$
      000005                        160 00001$:
      000005 72 4FuFFuFF      [ 1]  161 	clr (s_DATA - 1, x)
      000009 5A               [ 2]  162 	decw x
      00000A 26 F9            [ 1]  163 	jrne	00001$
      00000C                        164 00002$:
      00000C AEr00r00         [ 2]  165 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]  166 	jreq	00004$
      000011                        167 00003$:
      000011 D6uFFuFF         [ 1]  168 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]  169 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]  170 	decw	x
      000018 26 F7            [ 1]  171 	jrne	00003$
      00001A                        172 00004$:
                                    173 ; stm8_genXINIT() end
                                    174 	.area GSFINAL
      000000 CCr00r80         [ 2]  175 	jp	__sdcc_program_startup
                                    176 ;--------------------------------------------------------
                                    177 ; Home
                                    178 ;--------------------------------------------------------
                                    179 	.area HOME
                                    180 	.area HOME
      000080                        181 __sdcc_program_startup:
      000080 CCr07r7C         [ 2]  182 	jp	_main
                                    183 ;	return from main will return to caller
                                    184 ;--------------------------------------------------------
                                    185 ; code
                                    186 ;--------------------------------------------------------
                                    187 	.area CODE
                                    188 ;	se8r01-receive-car.c: 39: void delayTenMicro (void) {
                                    189 ;	-----------------------------------------
                                    190 ;	 function delayTenMicro
                                    191 ;	-----------------------------------------
      000000                        192 _delayTenMicro:
                                    193 ;	se8r01-receive-car.c: 41: for (a = 0; a < 50; ++a)
      000000 A6 32            [ 1]  194 	ld	a, #0x32
      000002                        195 00104$:
                                    196 ;	se8r01-receive-car.c: 42: __asm__("nop");
      000002 9D               [ 1]  197 	nop
      000003 4A               [ 1]  198 	dec	a
                                    199 ;	se8r01-receive-car.c: 41: for (a = 0; a < 50; ++a)
      000004 4D               [ 1]  200 	tnz	a
      000005 26 FB            [ 1]  201 	jrne	00104$
      000007 81               [ 4]  202 	ret
                                    203 ;	se8r01-receive-car.c: 44: UCHAR write_spi (UCHAR value) {
                                    204 ;	-----------------------------------------
                                    205 ;	 function write_spi
                                    206 ;	-----------------------------------------
      000008                        207 _write_spi:
                                    208 ;	se8r01-receive-car.c: 46: delayTenMicro ();
      000008 CDr00r00         [ 4]  209 	call	_delayTenMicro
                                    210 ;	se8r01-receive-car.c: 47: SPI_DR = value;
      00000B AE 52 04         [ 2]  211 	ldw	x, #0x5204
      00000E 7B 03            [ 1]  212 	ld	a, (0x03, sp)
      000010 F7               [ 1]  213 	ld	(x), a
                                    214 ;	se8r01-receive-car.c: 48: delayTenMicro ();
      000011 CDr00r00         [ 4]  215 	call	_delayTenMicro
                                    216 ;	se8r01-receive-car.c: 49: while ((SPI_SR & TXE) == 0);
      000014                        217 00101$:
      000014 AE 52 03         [ 2]  218 	ldw	x, #0x5203
      000017 F6               [ 1]  219 	ld	a, (x)
      000018 A5 02            [ 1]  220 	bcp	a, #0x02
      00001A 27 F8            [ 1]  221 	jreq	00101$
                                    222 ;	se8r01-receive-car.c: 50: delayTenMicro ();
      00001C CDr00r00         [ 4]  223 	call	_delayTenMicro
                                    224 ;	se8r01-receive-car.c: 51: while ((SPI_SR & RXNE) == 0);
      00001F                        225 00104$:
      00001F AE 52 03         [ 2]  226 	ldw	x, #0x5203
      000022 F6               [ 1]  227 	ld	a, (x)
      000023 44               [ 1]  228 	srl	a
      000024 24 F9            [ 1]  229 	jrnc	00104$
                                    230 ;	se8r01-receive-car.c: 52: delayTenMicro ();
      000026 CDr00r00         [ 4]  231 	call	_delayTenMicro
                                    232 ;	se8r01-receive-car.c: 53: ret = SPI_DR;
      000029 AE 52 04         [ 2]  233 	ldw	x, #0x5204
      00002C F6               [ 1]  234 	ld	a, (x)
                                    235 ;	se8r01-receive-car.c: 54: return (ret);
      00002D 81               [ 4]  236 	ret
                                    237 ;	se8r01-receive-car.c: 56: UCHAR write_spi_reg (UCHAR reg, UCHAR value) {
                                    238 ;	-----------------------------------------
                                    239 ;	 function write_spi_reg
                                    240 ;	-----------------------------------------
      00002E                        241 _write_spi_reg:
      00002E 88               [ 1]  242 	push	a
                                    243 ;	se8r01-receive-car.c: 58: PC_ODR &= ~(1 << CSN);
      00002F AE 50 0A         [ 2]  244 	ldw	x, #0x500a
      000032 F6               [ 1]  245 	ld	a, (x)
      000033 A4 EF            [ 1]  246 	and	a, #0xef
      000035 F7               [ 1]  247 	ld	(x), a
                                    248 ;	se8r01-receive-car.c: 59: ret = write_spi (reg);
      000036 7B 04            [ 1]  249 	ld	a, (0x04, sp)
      000038 88               [ 1]  250 	push	a
      000039 CDr00r08         [ 4]  251 	call	_write_spi
      00003C 5B 01            [ 2]  252 	addw	sp, #1
      00003E 6B 01            [ 1]  253 	ld	(0x01, sp), a
                                    254 ;	se8r01-receive-car.c: 60: if (reg != NOP && reg != FLUSH_RX && reg != FLUSH_TX)
      000040 7B 04            [ 1]  255 	ld	a, (0x04, sp)
      000042 A1 FF            [ 1]  256 	cp	a, #0xff
      000044 27 15            [ 1]  257 	jreq	00102$
      000046 7B 04            [ 1]  258 	ld	a, (0x04, sp)
      000048 A1 E2            [ 1]  259 	cp	a, #0xe2
      00004A 27 0F            [ 1]  260 	jreq	00102$
      00004C 7B 04            [ 1]  261 	ld	a, (0x04, sp)
      00004E A1 E1            [ 1]  262 	cp	a, #0xe1
      000050 27 09            [ 1]  263 	jreq	00102$
                                    264 ;	se8r01-receive-car.c: 61: write_spi (value);
      000052 7B 05            [ 1]  265 	ld	a, (0x05, sp)
      000054 88               [ 1]  266 	push	a
      000055 CDr00r08         [ 4]  267 	call	_write_spi
      000058 84               [ 1]  268 	pop	a
      000059 20 03            [ 2]  269 	jra	00103$
      00005B                        270 00102$:
                                    271 ;	se8r01-receive-car.c: 63: delayTenMicro ();
      00005B CDr00r00         [ 4]  272 	call	_delayTenMicro
      00005E                        273 00103$:
                                    274 ;	se8r01-receive-car.c: 64: PC_ODR |= (1 << CSN);
      00005E AE 50 0A         [ 2]  275 	ldw	x, #0x500a
      000061 F6               [ 1]  276 	ld	a, (x)
      000062 AA 10            [ 1]  277 	or	a, #0x10
      000064 F7               [ 1]  278 	ld	(x), a
                                    279 ;	se8r01-receive-car.c: 65: return (ret);
      000065 7B 01            [ 1]  280 	ld	a, (0x01, sp)
      000067 5B 01            [ 2]  281 	addw	sp, #1
      000069 81               [ 4]  282 	ret
                                    283 ;	se8r01-receive-car.c: 67: UCHAR read_spi_reg (UCHAR reg) {
                                    284 ;	-----------------------------------------
                                    285 ;	 function read_spi_reg
                                    286 ;	-----------------------------------------
      00006A                        287 _read_spi_reg:
      00006A 88               [ 1]  288 	push	a
                                    289 ;	se8r01-receive-car.c: 69: PC_ODR &= ~(1 << CSN);
      00006B AE 50 0A         [ 2]  290 	ldw	x, #0x500a
      00006E F6               [ 1]  291 	ld	a, (x)
      00006F A4 EF            [ 1]  292 	and	a, #0xef
      000071 F7               [ 1]  293 	ld	(x), a
                                    294 ;	se8r01-receive-car.c: 70: ret = write_spi (reg);
      000072 7B 04            [ 1]  295 	ld	a, (0x04, sp)
      000074 88               [ 1]  296 	push	a
      000075 CDr00r08         [ 4]  297 	call	_write_spi
      000078 5B 01            [ 2]  298 	addw	sp, #1
      00007A 6B 01            [ 1]  299 	ld	(0x01, sp), a
                                    300 ;	se8r01-receive-car.c: 71: if (reg != NOP && reg != FLUSH_RX && reg != FLUSH_TX)
      00007C 7B 04            [ 1]  301 	ld	a, (0x04, sp)
      00007E A1 FF            [ 1]  302 	cp	a, #0xff
      000080 27 17            [ 1]  303 	jreq	00102$
      000082 7B 04            [ 1]  304 	ld	a, (0x04, sp)
      000084 A1 E2            [ 1]  305 	cp	a, #0xe2
      000086 27 11            [ 1]  306 	jreq	00102$
      000088 7B 04            [ 1]  307 	ld	a, (0x04, sp)
      00008A A1 E1            [ 1]  308 	cp	a, #0xe1
      00008C 27 0B            [ 1]  309 	jreq	00102$
                                    310 ;	se8r01-receive-car.c: 72: ret = write_spi (NOP);
      00008E 4B FF            [ 1]  311 	push	#0xff
      000090 CDr00r08         [ 4]  312 	call	_write_spi
      000093 5B 01            [ 2]  313 	addw	sp, #1
      000095 6B 01            [ 1]  314 	ld	(0x01, sp), a
      000097 20 03            [ 2]  315 	jra	00103$
      000099                        316 00102$:
                                    317 ;	se8r01-receive-car.c: 74: delayTenMicro ();
      000099 CDr00r00         [ 4]  318 	call	_delayTenMicro
      00009C                        319 00103$:
                                    320 ;	se8r01-receive-car.c: 75: PC_ODR |= (1 << CSN);
      00009C AE 50 0A         [ 2]  321 	ldw	x, #0x500a
      00009F F6               [ 1]  322 	ld	a, (x)
      0000A0 AA 10            [ 1]  323 	or	a, #0x10
      0000A2 F7               [ 1]  324 	ld	(x), a
                                    325 ;	se8r01-receive-car.c: 76: return (ret);
      0000A3 7B 01            [ 1]  326 	ld	a, (0x01, sp)
      0000A5 5B 01            [ 2]  327 	addw	sp, #1
      0000A7 81               [ 4]  328 	ret
                                    329 ;	se8r01-receive-car.c: 78: UCHAR write_spi_buf (UCHAR reg, UCHAR *array, UCHAR len) {
                                    330 ;	-----------------------------------------
                                    331 ;	 function write_spi_buf
                                    332 ;	-----------------------------------------
      0000A8                        333 _write_spi_buf:
      0000A8 52 02            [ 2]  334 	sub	sp, #2
                                    335 ;	se8r01-receive-car.c: 80: PC_ODR &= ~(1 << CSN);
      0000AA AE 50 0A         [ 2]  336 	ldw	x, #0x500a
      0000AD F6               [ 1]  337 	ld	a, (x)
      0000AE A4 EF            [ 1]  338 	and	a, #0xef
      0000B0 F7               [ 1]  339 	ld	(x), a
                                    340 ;	se8r01-receive-car.c: 81: ret = write_spi (reg);
      0000B1 7B 05            [ 1]  341 	ld	a, (0x05, sp)
      0000B3 88               [ 1]  342 	push	a
      0000B4 CDr00r08         [ 4]  343 	call	_write_spi
      0000B7 5B 01            [ 2]  344 	addw	sp, #1
      0000B9 6B 02            [ 1]  345 	ld	(0x02, sp), a
                                    346 ;	se8r01-receive-car.c: 82: for (n = 0; n < len; ++n)
      0000BB 0F 01            [ 1]  347 	clr	(0x01, sp)
      0000BD                        348 00103$:
      0000BD 7B 01            [ 1]  349 	ld	a, (0x01, sp)
      0000BF 11 08            [ 1]  350 	cp	a, (0x08, sp)
      0000C1 24 11            [ 1]  351 	jrnc	00101$
                                    352 ;	se8r01-receive-car.c: 83: write_spi (array[n]);
      0000C3 5F               [ 1]  353 	clrw	x
      0000C4 7B 01            [ 1]  354 	ld	a, (0x01, sp)
      0000C6 97               [ 1]  355 	ld	xl, a
      0000C7 72 FB 06         [ 2]  356 	addw	x, (0x06, sp)
      0000CA F6               [ 1]  357 	ld	a, (x)
      0000CB 88               [ 1]  358 	push	a
      0000CC CDr00r08         [ 4]  359 	call	_write_spi
      0000CF 84               [ 1]  360 	pop	a
                                    361 ;	se8r01-receive-car.c: 82: for (n = 0; n < len; ++n)
      0000D0 0C 01            [ 1]  362 	inc	(0x01, sp)
      0000D2 20 E9            [ 2]  363 	jra	00103$
      0000D4                        364 00101$:
                                    365 ;	se8r01-receive-car.c: 84: PC_ODR |= (1 << CSN);
      0000D4 AE 50 0A         [ 2]  366 	ldw	x, #0x500a
      0000D7 F6               [ 1]  367 	ld	a, (x)
      0000D8 AA 10            [ 1]  368 	or	a, #0x10
      0000DA F7               [ 1]  369 	ld	(x), a
                                    370 ;	se8r01-receive-car.c: 85: return (ret);
      0000DB 7B 02            [ 1]  371 	ld	a, (0x02, sp)
      0000DD 5B 02            [ 2]  372 	addw	sp, #2
      0000DF 81               [ 4]  373 	ret
                                    374 ;	se8r01-receive-car.c: 87: UCHAR read_spi_buf (UCHAR reg, UCHAR *array, UCHAR len) {
                                    375 ;	-----------------------------------------
                                    376 ;	 function read_spi_buf
                                    377 ;	-----------------------------------------
      0000E0                        378 _read_spi_buf:
      0000E0 52 02            [ 2]  379 	sub	sp, #2
                                    380 ;	se8r01-receive-car.c: 89: PC_ODR &= ~(1 << CSN);
      0000E2 AE 50 0A         [ 2]  381 	ldw	x, #0x500a
      0000E5 F6               [ 1]  382 	ld	a, (x)
      0000E6 A4 EF            [ 1]  383 	and	a, #0xef
      0000E8 F7               [ 1]  384 	ld	(x), a
                                    385 ;	se8r01-receive-car.c: 90: ret = write_spi (reg);
      0000E9 7B 05            [ 1]  386 	ld	a, (0x05, sp)
      0000EB 88               [ 1]  387 	push	a
      0000EC CDr00r08         [ 4]  388 	call	_write_spi
      0000EF 5B 01            [ 2]  389 	addw	sp, #1
      0000F1 6B 01            [ 1]  390 	ld	(0x01, sp), a
                                    391 ;	se8r01-receive-car.c: 91: for (n = 0; n < len; ++n)
      0000F3 0F 02            [ 1]  392 	clr	(0x02, sp)
      0000F5                        393 00103$:
      0000F5 7B 02            [ 1]  394 	ld	a, (0x02, sp)
      0000F7 11 08            [ 1]  395 	cp	a, (0x08, sp)
      0000F9 24 15            [ 1]  396 	jrnc	00101$
                                    397 ;	se8r01-receive-car.c: 92: array[n] = write_spi (NOP);
      0000FB 5F               [ 1]  398 	clrw	x
      0000FC 7B 02            [ 1]  399 	ld	a, (0x02, sp)
      0000FE 97               [ 1]  400 	ld	xl, a
      0000FF 72 FB 06         [ 2]  401 	addw	x, (0x06, sp)
      000102 89               [ 2]  402 	pushw	x
      000103 4B FF            [ 1]  403 	push	#0xff
      000105 CDr00r08         [ 4]  404 	call	_write_spi
      000108 5B 01            [ 2]  405 	addw	sp, #1
      00010A 85               [ 2]  406 	popw	x
      00010B F7               [ 1]  407 	ld	(x), a
                                    408 ;	se8r01-receive-car.c: 91: for (n = 0; n < len; ++n)
      00010C 0C 02            [ 1]  409 	inc	(0x02, sp)
      00010E 20 E5            [ 2]  410 	jra	00103$
      000110                        411 00101$:
                                    412 ;	se8r01-receive-car.c: 93: PC_ODR |= (1 << CSN);
      000110 AE 50 0A         [ 2]  413 	ldw	x, #0x500a
      000113 F6               [ 1]  414 	ld	a, (x)
      000114 AA 10            [ 1]  415 	or	a, #0x10
      000116 F7               [ 1]  416 	ld	(x), a
                                    417 ;	se8r01-receive-car.c: 94: return (ret);
      000117 7B 01            [ 1]  418 	ld	a, (0x01, sp)
      000119 5B 02            [ 2]  419 	addw	sp, #2
      00011B 81               [ 4]  420 	ret
                                    421 ;	se8r01-receive-car.c: 96: void InitializeSPI () {
                                    422 ;	-----------------------------------------
                                    423 ;	 function InitializeSPI
                                    424 ;	-----------------------------------------
      00011C                        425 _InitializeSPI:
                                    426 ;	se8r01-receive-car.c: 97: SPI_CR1 = MSBFIRST | SPI_ENABLE | BR_DIV256 | MASTER | CPOL0 | CPHA0;
      00011C AE 52 00         [ 2]  427 	ldw	x, #0x5200
      00011F A6 7C            [ 1]  428 	ld	a, #0x7c
      000121 F7               [ 1]  429 	ld	(x), a
                                    430 ;	se8r01-receive-car.c: 98: SPI_CR2 = BDM_2LINE | CRCEN_OFF | CRCNEXT_TXBUF | FULL_DUPLEX | SSM_DISABLE;
      000122 AE 52 01         [ 2]  431 	ldw	x, #0x5201
      000125 7F               [ 1]  432 	clr	(x)
                                    433 ;	se8r01-receive-car.c: 99: SPI_ICR = TXIE_MASKED | RXIE_MASKED | ERRIE_MASKED | WKIE_MASKED;
      000126 AE 52 02         [ 2]  434 	ldw	x, #0x5202
      000129 7F               [ 1]  435 	clr	(x)
                                    436 ;	se8r01-receive-car.c: 100: PC_DDR = (1 << PC3) | (1 << PC4); // output mode
      00012A AE 50 0C         [ 2]  437 	ldw	x, #0x500c
      00012D A6 18            [ 1]  438 	ld	a, #0x18
      00012F F7               [ 1]  439 	ld	(x), a
                                    440 ;	se8r01-receive-car.c: 101: PC_CR1 = (1 << PC3) | (1 << PC4); // push-pull
      000130 AE 50 0D         [ 2]  441 	ldw	x, #0x500d
      000133 A6 18            [ 1]  442 	ld	a, #0x18
      000135 F7               [ 1]  443 	ld	(x), a
                                    444 ;	se8r01-receive-car.c: 102: PC_CR2 = (1 << PC3) | (1 << PC4); // up to 10MHz speed
      000136 AE 50 0E         [ 2]  445 	ldw	x, #0x500e
      000139 A6 18            [ 1]  446 	ld	a, #0x18
      00013B F7               [ 1]  447 	ld	(x), a
                                    448 ;	se8r01-receive-car.c: 104: PC_ODR &= ~(1 << CE);
      00013C AE 50 0A         [ 2]  449 	ldw	x, #0x500a
      00013F F6               [ 1]  450 	ld	a, (x)
      000140 A4 F7            [ 1]  451 	and	a, #0xf7
      000142 F7               [ 1]  452 	ld	(x), a
      000143 81               [ 4]  453 	ret
                                    454 ;	se8r01-receive-car.c: 106: void InitializeSystemClock() {
                                    455 ;	-----------------------------------------
                                    456 ;	 function InitializeSystemClock
                                    457 ;	-----------------------------------------
      000144                        458 _InitializeSystemClock:
                                    459 ;	se8r01-receive-car.c: 107: CLK_ICKR = 0;                       //  Reset the Internal Clock Register.
      000144 AE 50 C0         [ 2]  460 	ldw	x, #0x50c0
      000147 7F               [ 1]  461 	clr	(x)
                                    462 ;	se8r01-receive-car.c: 108: CLK_ICKR = CLK_HSIEN;               //  Enable the HSI.
      000148 AE 50 C0         [ 2]  463 	ldw	x, #0x50c0
      00014B A6 01            [ 1]  464 	ld	a, #0x01
      00014D F7               [ 1]  465 	ld	(x), a
                                    466 ;	se8r01-receive-car.c: 109: CLK_ECKR = 0;                       //  Disable the external clock.
      00014E AE 50 C1         [ 2]  467 	ldw	x, #0x50c1
      000151 7F               [ 1]  468 	clr	(x)
                                    469 ;	se8r01-receive-car.c: 110: while ((CLK_ICKR & CLK_HSIRDY) == 0);       //  Wait for the HSI to be ready for use.
      000152                        470 00101$:
      000152 AE 50 C0         [ 2]  471 	ldw	x, #0x50c0
      000155 F6               [ 1]  472 	ld	a, (x)
      000156 A5 02            [ 1]  473 	bcp	a, #0x02
      000158 27 F8            [ 1]  474 	jreq	00101$
                                    475 ;	se8r01-receive-car.c: 111: CLK_CKDIVR = 0;                     //  Ensure the clocks are running at full speed.
      00015A AE 50 C6         [ 2]  476 	ldw	x, #0x50c6
      00015D 7F               [ 1]  477 	clr	(x)
                                    478 ;	se8r01-receive-car.c: 112: CLK_PCKENR1 = 0xff;                 //  Enable all peripheral clocks.
      00015E AE 50 C7         [ 2]  479 	ldw	x, #0x50c7
      000161 A6 FF            [ 1]  480 	ld	a, #0xff
      000163 F7               [ 1]  481 	ld	(x), a
                                    482 ;	se8r01-receive-car.c: 113: CLK_PCKENR2 = 0xff;                 //  Ditto.
      000164 AE 50 CA         [ 2]  483 	ldw	x, #0x50ca
      000167 A6 FF            [ 1]  484 	ld	a, #0xff
      000169 F7               [ 1]  485 	ld	(x), a
                                    486 ;	se8r01-receive-car.c: 114: CLK_CCOR = 0;                       //  Turn off CCO.
      00016A AE 50 C9         [ 2]  487 	ldw	x, #0x50c9
      00016D 7F               [ 1]  488 	clr	(x)
                                    489 ;	se8r01-receive-car.c: 115: CLK_HSITRIMR = 0;                   //  Turn off any HSIU trimming.
      00016E AE 50 CC         [ 2]  490 	ldw	x, #0x50cc
      000171 7F               [ 1]  491 	clr	(x)
                                    492 ;	se8r01-receive-car.c: 116: CLK_SWIMCCR = 0;                    //  Set SWIM to run at clock / 2.
      000172 AE 50 CD         [ 2]  493 	ldw	x, #0x50cd
      000175 7F               [ 1]  494 	clr	(x)
                                    495 ;	se8r01-receive-car.c: 117: CLK_SWR = 0xe1;                     //  Use HSI as the clock source.
      000176 AE 50 C4         [ 2]  496 	ldw	x, #0x50c4
      000179 A6 E1            [ 1]  497 	ld	a, #0xe1
      00017B F7               [ 1]  498 	ld	(x), a
                                    499 ;	se8r01-receive-car.c: 118: CLK_SWCR = 0;                       //  Reset the clock switch control register.
      00017C AE 50 C5         [ 2]  500 	ldw	x, #0x50c5
      00017F 7F               [ 1]  501 	clr	(x)
                                    502 ;	se8r01-receive-car.c: 119: CLK_SWCR = CLK_SWEN;                //  Enable switching.
      000180 AE 50 C5         [ 2]  503 	ldw	x, #0x50c5
      000183 A6 02            [ 1]  504 	ld	a, #0x02
      000185 F7               [ 1]  505 	ld	(x), a
                                    506 ;	se8r01-receive-car.c: 120: while ((CLK_SWCR & CLK_SWBSY) != 0);        //  Pause while the clock switch is busy.
      000186                        507 00104$:
      000186 AE 50 C5         [ 2]  508 	ldw	x, #0x50c5
      000189 F6               [ 1]  509 	ld	a, (x)
      00018A 44               [ 1]  510 	srl	a
      00018B 25 F9            [ 1]  511 	jrc	00104$
      00018D 81               [ 4]  512 	ret
                                    513 ;	se8r01-receive-car.c: 122: void delay (int time_ms) {
                                    514 ;	-----------------------------------------
                                    515 ;	 function delay
                                    516 ;	-----------------------------------------
      00018E                        517 _delay:
      00018E 52 0A            [ 2]  518 	sub	sp, #10
                                    519 ;	se8r01-receive-car.c: 124: for (x = 0; x < 1036*time_ms; ++x)
      000190 5F               [ 1]  520 	clrw	x
      000191 1F 03            [ 2]  521 	ldw	(0x03, sp), x
      000193 1F 01            [ 2]  522 	ldw	(0x01, sp), x
      000195 1E 0D            [ 2]  523 	ldw	x, (0x0d, sp)
      000197 89               [ 2]  524 	pushw	x
      000198 4B 0C            [ 1]  525 	push	#0x0c
      00019A 4B 04            [ 1]  526 	push	#0x04
      00019C CDr00r00         [ 4]  527 	call	__mulint
      00019F 5B 04            [ 2]  528 	addw	sp, #4
      0001A1 1F 09            [ 2]  529 	ldw	(0x09, sp), x
      0001A3                        530 00103$:
      0001A3 16 09            [ 2]  531 	ldw	y, (0x09, sp)
      0001A5 17 07            [ 2]  532 	ldw	(0x07, sp), y
      0001A7 7B 07            [ 1]  533 	ld	a, (0x07, sp)
      0001A9 49               [ 1]  534 	rlc	a
      0001AA 4F               [ 1]  535 	clr	a
      0001AB A2 00            [ 1]  536 	sbc	a, #0x00
      0001AD 6B 06            [ 1]  537 	ld	(0x06, sp), a
      0001AF 6B 05            [ 1]  538 	ld	(0x05, sp), a
      0001B1 1E 03            [ 2]  539 	ldw	x, (0x03, sp)
      0001B3 13 07            [ 2]  540 	cpw	x, (0x07, sp)
      0001B5 7B 02            [ 1]  541 	ld	a, (0x02, sp)
      0001B7 12 06            [ 1]  542 	sbc	a, (0x06, sp)
      0001B9 7B 01            [ 1]  543 	ld	a, (0x01, sp)
      0001BB 12 05            [ 1]  544 	sbc	a, (0x05, sp)
      0001BD 2E 17            [ 1]  545 	jrsge	00105$
                                    546 ;	se8r01-receive-car.c: 125: __asm__("nop");
      0001BF 9D               [ 1]  547 	nop
                                    548 ;	se8r01-receive-car.c: 124: for (x = 0; x < 1036*time_ms; ++x)
      0001C0 16 03            [ 2]  549 	ldw	y, (0x03, sp)
      0001C2 72 A9 00 01      [ 2]  550 	addw	y, #0x0001
      0001C6 7B 02            [ 1]  551 	ld	a, (0x02, sp)
      0001C8 A9 00            [ 1]  552 	adc	a, #0x00
      0001CA 97               [ 1]  553 	ld	xl, a
      0001CB 7B 01            [ 1]  554 	ld	a, (0x01, sp)
      0001CD A9 00            [ 1]  555 	adc	a, #0x00
      0001CF 95               [ 1]  556 	ld	xh, a
      0001D0 17 03            [ 2]  557 	ldw	(0x03, sp), y
      0001D2 1F 01            [ 2]  558 	ldw	(0x01, sp), x
      0001D4 20 CD            [ 2]  559 	jra	00103$
      0001D6                        560 00105$:
      0001D6 5B 0A            [ 2]  561 	addw	sp, #10
      0001D8 81               [ 4]  562 	ret
                                    563 ;	se8r01-receive-car.c: 130: void UARTPrintF (char *message) {
                                    564 ;	-----------------------------------------
                                    565 ;	 function UARTPrintF
                                    566 ;	-----------------------------------------
      0001D9                        567 _UARTPrintF:
                                    568 ;	se8r01-receive-car.c: 131: char *ch = message;
      0001D9 16 03            [ 2]  569 	ldw	y, (0x03, sp)
                                    570 ;	se8r01-receive-car.c: 132: while (*ch) {
      0001DB                        571 00104$:
      0001DB 90 F6            [ 1]  572 	ld	a, (y)
      0001DD 4D               [ 1]  573 	tnz	a
      0001DE 27 0F            [ 1]  574 	jreq	00107$
                                    575 ;	se8r01-receive-car.c: 133: UART1_DR = (unsigned char) *ch;     //  Put the next character into the data transmission register.
      0001E0 AE 52 31         [ 2]  576 	ldw	x, #0x5231
      0001E3 F7               [ 1]  577 	ld	(x), a
                                    578 ;	se8r01-receive-car.c: 134: while ((UART1_SR & SR_TXE) == 0);   //  Wait for transmission to complete.
      0001E4                        579 00101$:
      0001E4 AE 52 30         [ 2]  580 	ldw	x, #0x5230
      0001E7 F6               [ 1]  581 	ld	a, (x)
      0001E8 48               [ 1]  582 	sll	a
      0001E9 24 F9            [ 1]  583 	jrnc	00101$
                                    584 ;	se8r01-receive-car.c: 135: ch++;                               //  Grab the next character.
      0001EB 90 5C            [ 2]  585 	incw	y
      0001ED 20 EC            [ 2]  586 	jra	00104$
      0001EF                        587 00107$:
      0001EF 81               [ 4]  588 	ret
                                    589 ;	se8r01-receive-car.c: 138: void print_UCHAR_hex (unsigned char buffer) {
                                    590 ;	-----------------------------------------
                                    591 ;	 function print_UCHAR_hex
                                    592 ;	-----------------------------------------
      0001F0                        593 _print_UCHAR_hex:
      0001F0 52 0C            [ 2]  594 	sub	sp, #12
                                    595 ;	se8r01-receive-car.c: 141: a = (buffer >> 4);
      0001F2 7B 0F            [ 1]  596 	ld	a, (0x0f, sp)
      0001F4 4E               [ 1]  597 	swap	a
      0001F5 A4 0F            [ 1]  598 	and	a, #0x0f
      0001F7 5F               [ 1]  599 	clrw	x
      0001F8 97               [ 1]  600 	ld	xl, a
                                    601 ;	se8r01-receive-car.c: 142: if (a > 9)
      0001F9 A3 00 09         [ 2]  602 	cpw	x, #0x0009
      0001FC 2D 07            [ 1]  603 	jrsle	00102$
                                    604 ;	se8r01-receive-car.c: 143: a = a + 'a' - 10;
      0001FE 1C 00 57         [ 2]  605 	addw	x, #0x0057
      000201 1F 03            [ 2]  606 	ldw	(0x03, sp), x
      000203 20 05            [ 2]  607 	jra	00103$
      000205                        608 00102$:
                                    609 ;	se8r01-receive-car.c: 145: a += '0'; 
      000205 1C 00 30         [ 2]  610 	addw	x, #0x0030
      000208 1F 03            [ 2]  611 	ldw	(0x03, sp), x
      00020A                        612 00103$:
                                    613 ;	se8r01-receive-car.c: 146: b = buffer & 0x0f;
      00020A 7B 0F            [ 1]  614 	ld	a, (0x0f, sp)
      00020C A4 0F            [ 1]  615 	and	a, #0x0f
      00020E 5F               [ 1]  616 	clrw	x
      00020F 97               [ 1]  617 	ld	xl, a
                                    618 ;	se8r01-receive-car.c: 147: if (b > 9)
      000210 A3 00 09         [ 2]  619 	cpw	x, #0x0009
      000213 2D 07            [ 1]  620 	jrsle	00105$
                                    621 ;	se8r01-receive-car.c: 148: b = b + 'a' - 10;
      000215 1C 00 57         [ 2]  622 	addw	x, #0x0057
      000218 1F 01            [ 2]  623 	ldw	(0x01, sp), x
      00021A 20 05            [ 2]  624 	jra	00106$
      00021C                        625 00105$:
                                    626 ;	se8r01-receive-car.c: 150: b += '0'; 
      00021C 1C 00 30         [ 2]  627 	addw	x, #0x0030
      00021F 1F 01            [ 2]  628 	ldw	(0x01, sp), x
      000221                        629 00106$:
                                    630 ;	se8r01-receive-car.c: 151: message[0] = a;
      000221 90 96            [ 1]  631 	ldw	y, sp
      000223 72 A9 00 05      [ 2]  632 	addw	y, #5
      000227 7B 04            [ 1]  633 	ld	a, (0x04, sp)
      000229 90 F7            [ 1]  634 	ld	(y), a
                                    635 ;	se8r01-receive-car.c: 152: message[1] = b;
      00022B 93               [ 1]  636 	ldw	x, y
      00022C 5C               [ 2]  637 	incw	x
      00022D 7B 02            [ 1]  638 	ld	a, (0x02, sp)
      00022F F7               [ 1]  639 	ld	(x), a
                                    640 ;	se8r01-receive-car.c: 153: message[2] = 0;
      000230 93               [ 1]  641 	ldw	x, y
      000231 5C               [ 2]  642 	incw	x
      000232 5C               [ 2]  643 	incw	x
      000233 7F               [ 1]  644 	clr	(x)
                                    645 ;	se8r01-receive-car.c: 154: UARTPrintF (message);
      000234 90 89            [ 2]  646 	pushw	y
      000236 CDr01rD9         [ 4]  647 	call	_UARTPrintF
      000239 5B 02            [ 2]  648 	addw	sp, #2
      00023B 5B 0C            [ 2]  649 	addw	sp, #12
      00023D 81               [ 4]  650 	ret
                                    651 ;	se8r01-receive-car.c: 157: void InitializeUART() {
                                    652 ;	-----------------------------------------
                                    653 ;	 function InitializeUART
                                    654 ;	-----------------------------------------
      00023E                        655 _InitializeUART:
                                    656 ;	se8r01-receive-car.c: 167: UART1_CR1 = 0;
      00023E AE 52 34         [ 2]  657 	ldw	x, #0x5234
      000241 7F               [ 1]  658 	clr	(x)
                                    659 ;	se8r01-receive-car.c: 168: UART1_CR2 = 0;
      000242 AE 52 35         [ 2]  660 	ldw	x, #0x5235
      000245 7F               [ 1]  661 	clr	(x)
                                    662 ;	se8r01-receive-car.c: 169: UART1_CR4 = 0;
      000246 AE 52 37         [ 2]  663 	ldw	x, #0x5237
      000249 7F               [ 1]  664 	clr	(x)
                                    665 ;	se8r01-receive-car.c: 170: UART1_CR3 = 0;
      00024A AE 52 36         [ 2]  666 	ldw	x, #0x5236
      00024D 7F               [ 1]  667 	clr	(x)
                                    668 ;	se8r01-receive-car.c: 171: UART1_CR5 = 0;
      00024E AE 52 38         [ 2]  669 	ldw	x, #0x5238
      000251 7F               [ 1]  670 	clr	(x)
                                    671 ;	se8r01-receive-car.c: 172: UART1_GTR = 0;
      000252 AE 52 39         [ 2]  672 	ldw	x, #0x5239
      000255 7F               [ 1]  673 	clr	(x)
                                    674 ;	se8r01-receive-car.c: 173: UART1_PSCR = 0;
      000256 AE 52 3A         [ 2]  675 	ldw	x, #0x523a
      000259 7F               [ 1]  676 	clr	(x)
                                    677 ;	se8r01-receive-car.c: 177: UNSET (UART1_CR1, CR1_M);        //  8 Data bits.
      00025A AE 52 34         [ 2]  678 	ldw	x, #0x5234
      00025D F6               [ 1]  679 	ld	a, (x)
      00025E A4 EF            [ 1]  680 	and	a, #0xef
      000260 F7               [ 1]  681 	ld	(x), a
                                    682 ;	se8r01-receive-car.c: 178: UNSET (UART1_CR1, CR1_PCEN);     //  Disable parity.
      000261 AE 52 34         [ 2]  683 	ldw	x, #0x5234
      000264 F6               [ 1]  684 	ld	a, (x)
      000265 A4 FB            [ 1]  685 	and	a, #0xfb
      000267 F7               [ 1]  686 	ld	(x), a
                                    687 ;	se8r01-receive-car.c: 179: UNSET (UART1_CR3, CR3_STOPH);    //  1 stop bit.
      000268 AE 52 36         [ 2]  688 	ldw	x, #0x5236
      00026B F6               [ 1]  689 	ld	a, (x)
      00026C A4 DF            [ 1]  690 	and	a, #0xdf
      00026E F7               [ 1]  691 	ld	(x), a
                                    692 ;	se8r01-receive-car.c: 180: UNSET (UART1_CR3, CR3_STOPL);    //  1 stop bit.
      00026F AE 52 36         [ 2]  693 	ldw	x, #0x5236
      000272 F6               [ 1]  694 	ld	a, (x)
      000273 A4 EF            [ 1]  695 	and	a, #0xef
      000275 F7               [ 1]  696 	ld	(x), a
                                    697 ;	se8r01-receive-car.c: 181: UART1_BRR2 = 0x0a;      //  Set the baud rate registers to 115200 baud
      000276 AE 52 33         [ 2]  698 	ldw	x, #0x5233
      000279 A6 0A            [ 1]  699 	ld	a, #0x0a
      00027B F7               [ 1]  700 	ld	(x), a
                                    701 ;	se8r01-receive-car.c: 182: UART1_BRR1 = 0x08;      //  based upon a 16 MHz system clock.
      00027C AE 52 32         [ 2]  702 	ldw	x, #0x5232
      00027F A6 08            [ 1]  703 	ld	a, #0x08
      000281 F7               [ 1]  704 	ld	(x), a
                                    705 ;	se8r01-receive-car.c: 186: UNSET (UART1_CR2, CR2_TEN);      //  Disable transmit.
      000282 AE 52 35         [ 2]  706 	ldw	x, #0x5235
      000285 F6               [ 1]  707 	ld	a, (x)
      000286 A4 F7            [ 1]  708 	and	a, #0xf7
      000288 F7               [ 1]  709 	ld	(x), a
                                    710 ;	se8r01-receive-car.c: 187: UNSET (UART1_CR2, CR2_REN);      //  Disable receive.
      000289 AE 52 35         [ 2]  711 	ldw	x, #0x5235
      00028C F6               [ 1]  712 	ld	a, (x)
      00028D A4 FB            [ 1]  713 	and	a, #0xfb
      00028F F7               [ 1]  714 	ld	(x), a
                                    715 ;	se8r01-receive-car.c: 191: SET (UART1_CR3, CR3_CPOL);
      000290 AE 52 36         [ 2]  716 	ldw	x, #0x5236
      000293 F6               [ 1]  717 	ld	a, (x)
      000294 AA 04            [ 1]  718 	or	a, #0x04
      000296 F7               [ 1]  719 	ld	(x), a
                                    720 ;	se8r01-receive-car.c: 192: SET (UART1_CR3, CR3_CPHA);
      000297 AE 52 36         [ 2]  721 	ldw	x, #0x5236
      00029A F6               [ 1]  722 	ld	a, (x)
      00029B AA 02            [ 1]  723 	or	a, #0x02
      00029D F7               [ 1]  724 	ld	(x), a
                                    725 ;	se8r01-receive-car.c: 193: SET (UART1_CR3, CR3_LBCL);
      00029E 72 10 52 36      [ 1]  726 	bset	0x5236, #0
                                    727 ;	se8r01-receive-car.c: 197: SET (UART1_CR2, CR2_TEN);
      0002A2 AE 52 35         [ 2]  728 	ldw	x, #0x5235
      0002A5 F6               [ 1]  729 	ld	a, (x)
      0002A6 AA 08            [ 1]  730 	or	a, #0x08
      0002A8 F7               [ 1]  731 	ld	(x), a
                                    732 ;	se8r01-receive-car.c: 198: SET (UART1_CR2, CR2_REN);
      0002A9 AE 52 35         [ 2]  733 	ldw	x, #0x5235
      0002AC F6               [ 1]  734 	ld	a, (x)
      0002AD AA 04            [ 1]  735 	or	a, #0x04
      0002AF F7               [ 1]  736 	ld	(x), a
                                    737 ;	se8r01-receive-car.c: 199: UART1_CR3 = CR3_CLKEN;
      0002B0 AE 52 36         [ 2]  738 	ldw	x, #0x5236
      0002B3 A6 08            [ 1]  739 	ld	a, #0x08
      0002B5 F7               [ 1]  740 	ld	(x), a
      0002B6 81               [ 4]  741 	ret
                                    742 ;	se8r01-receive-car.c: 272: void init_io(void)
                                    743 ;	-----------------------------------------
                                    744 ;	 function init_io
                                    745 ;	-----------------------------------------
      0002B7                        746 _init_io:
                                    747 ;	se8r01-receive-car.c: 280: PC_ODR &= ~(1 << CE);
      0002B7 AE 50 0A         [ 2]  748 	ldw	x, #0x500a
      0002BA F6               [ 1]  749 	ld	a, (x)
      0002BB A4 F7            [ 1]  750 	and	a, #0xf7
      0002BD F7               [ 1]  751 	ld	(x), a
                                    752 ;	se8r01-receive-car.c: 282: PC_ODR |= (1 << CSN);
      0002BE AE 50 0A         [ 2]  753 	ldw	x, #0x500a
      0002C1 F6               [ 1]  754 	ld	a, (x)
      0002C2 AA 10            [ 1]  755 	or	a, #0x10
      0002C4 F7               [ 1]  756 	ld	(x), a
      0002C5 81               [ 4]  757 	ret
                                    758 ;	se8r01-receive-car.c: 288: void rf_switch_bank(unsigned char bankindex)
                                    759 ;	-----------------------------------------
                                    760 ;	 function rf_switch_bank
                                    761 ;	-----------------------------------------
      0002C6                        762 _rf_switch_bank:
      0002C6 88               [ 1]  763 	push	a
                                    764 ;	se8r01-receive-car.c: 291: temp1 = bankindex;
      0002C7 7B 04            [ 1]  765 	ld	a, (0x04, sp)
      0002C9 6B 01            [ 1]  766 	ld	(0x01, sp), a
                                    767 ;	se8r01-receive-car.c: 293: temp0 = write_spi(iRF_BANK0_STATUS);
      0002CB 4B 07            [ 1]  768 	push	#0x07
      0002CD CDr00r08         [ 4]  769 	call	_write_spi
      0002D0 5B 01            [ 2]  770 	addw	sp, #1
                                    771 ;	se8r01-receive-car.c: 295: if((temp0&0x80)!=temp1)
      0002D2 A4 80            [ 1]  772 	and	a, #0x80
      0002D4 11 01            [ 1]  773 	cp	a, (0x01, sp)
      0002D6 27 09            [ 1]  774 	jreq	00103$
                                    775 ;	se8r01-receive-car.c: 297: write_spi_reg(iRF_CMD_ACTIVATE,0x53);
      0002D8 4B 53            [ 1]  776 	push	#0x53
      0002DA 4B 50            [ 1]  777 	push	#0x50
      0002DC CDr00r2E         [ 4]  778 	call	_write_spi_reg
      0002DF 5B 02            [ 2]  779 	addw	sp, #2
      0002E1                        780 00103$:
      0002E1 84               [ 1]  781 	pop	a
      0002E2 81               [ 4]  782 	ret
                                    783 ;	se8r01-receive-car.c: 304: void SE8R01_Calibration()
                                    784 ;	-----------------------------------------
                                    785 ;	 function SE8R01_Calibration
                                    786 ;	-----------------------------------------
      0002E3                        787 _SE8R01_Calibration:
      0002E3 52 0D            [ 2]  788 	sub	sp, #13
                                    789 ;	se8r01-receive-car.c: 307: rf_switch_bank(iBANK0);
      0002E5 4B 00            [ 1]  790 	push	#0x00
      0002E7 CDr02rC6         [ 4]  791 	call	_rf_switch_bank
      0002EA 84               [ 1]  792 	pop	a
                                    793 ;	se8r01-receive-car.c: 308: temp[0]=0x03;
      0002EB 96               [ 1]  794 	ldw	x, sp
      0002EC 5C               [ 2]  795 	incw	x
      0002ED 1F 0C            [ 2]  796 	ldw	(0x0c, sp), x
      0002EF 1E 0C            [ 2]  797 	ldw	x, (0x0c, sp)
      0002F1 A6 03            [ 1]  798 	ld	a, #0x03
      0002F3 F7               [ 1]  799 	ld	(x), a
                                    800 ;	se8r01-receive-car.c: 309: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_CONFIG,temp, 1);
      0002F4 1E 0C            [ 2]  801 	ldw	x, (0x0c, sp)
      0002F6 4B 01            [ 1]  802 	push	#0x01
      0002F8 89               [ 2]  803 	pushw	x
      0002F9 4B 20            [ 1]  804 	push	#0x20
      0002FB CDr00rA8         [ 4]  805 	call	_write_spi_buf
      0002FE 5B 04            [ 2]  806 	addw	sp, #4
                                    807 ;	se8r01-receive-car.c: 311: temp[0]=0x32;
      000300 1E 0C            [ 2]  808 	ldw	x, (0x0c, sp)
      000302 A6 32            [ 1]  809 	ld	a, #0x32
      000304 F7               [ 1]  810 	ld	(x), a
                                    811 ;	se8r01-receive-car.c: 313: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_RF_CH, temp,1);
      000305 1E 0C            [ 2]  812 	ldw	x, (0x0c, sp)
      000307 4B 01            [ 1]  813 	push	#0x01
      000309 89               [ 2]  814 	pushw	x
      00030A 4B 25            [ 1]  815 	push	#0x25
      00030C CDr00rA8         [ 4]  816 	call	_write_spi_buf
      00030F 5B 04            [ 2]  817 	addw	sp, #4
                                    818 ;	se8r01-receive-car.c: 317: if (SE8R01_DR_2M==1)
      000311 CEu00u00         [ 2]  819 	ldw	x, _SE8R01_DR_2M+0
      000314 A3 00 01         [ 2]  820 	cpw	x, #0x0001
      000317 26 07            [ 1]  821 	jrne	00105$
                                    822 ;	se8r01-receive-car.c: 318: {temp[0]=0x48;}
      000319 1E 0C            [ 2]  823 	ldw	x, (0x0c, sp)
      00031B A6 48            [ 1]  824 	ld	a, #0x48
      00031D F7               [ 1]  825 	ld	(x), a
      00031E 20 14            [ 2]  826 	jra	00106$
      000320                        827 00105$:
                                    828 ;	se8r01-receive-car.c: 319: else if (SE8R01_DR_1M==1)
      000320 CEu00u02         [ 2]  829 	ldw	x, _SE8R01_DR_1M+0
      000323 A3 00 01         [ 2]  830 	cpw	x, #0x0001
      000326 26 07            [ 1]  831 	jrne	00102$
                                    832 ;	se8r01-receive-car.c: 320: {temp[0]=0x40;}
      000328 1E 0C            [ 2]  833 	ldw	x, (0x0c, sp)
      00032A A6 40            [ 1]  834 	ld	a, #0x40
      00032C F7               [ 1]  835 	ld	(x), a
      00032D 20 05            [ 2]  836 	jra	00106$
      00032F                        837 00102$:
                                    838 ;	se8r01-receive-car.c: 322: {temp[0]=0x68;}   
      00032F 1E 0C            [ 2]  839 	ldw	x, (0x0c, sp)
      000331 A6 68            [ 1]  840 	ld	a, #0x68
      000333 F7               [ 1]  841 	ld	(x), a
      000334                        842 00106$:
                                    843 ;	se8r01-receive-car.c: 324: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_RF_SETUP,temp,1);
      000334 1E 0C            [ 2]  844 	ldw	x, (0x0c, sp)
      000336 4B 01            [ 1]  845 	push	#0x01
      000338 89               [ 2]  846 	pushw	x
      000339 4B 26            [ 1]  847 	push	#0x26
      00033B CDr00rA8         [ 4]  848 	call	_write_spi_buf
      00033E 5B 04            [ 2]  849 	addw	sp, #4
                                    850 ;	se8r01-receive-car.c: 325: temp[0]=0x77;
      000340 1E 0C            [ 2]  851 	ldw	x, (0x0c, sp)
      000342 A6 77            [ 1]  852 	ld	a, #0x77
      000344 F7               [ 1]  853 	ld	(x), a
                                    854 ;	se8r01-receive-car.c: 326: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_PRE_GURD, temp,1);
      000345 1E 0C            [ 2]  855 	ldw	x, (0x0c, sp)
      000347 4B 01            [ 1]  856 	push	#0x01
      000349 89               [ 2]  857 	pushw	x
      00034A 4B 3F            [ 1]  858 	push	#0x3f
      00034C CDr00rA8         [ 4]  859 	call	_write_spi_buf
      00034F 5B 04            [ 2]  860 	addw	sp, #4
                                    861 ;	se8r01-receive-car.c: 328: rf_switch_bank(iBANK1);
      000351 4B 80            [ 1]  862 	push	#0x80
      000353 CDr02rC6         [ 4]  863 	call	_rf_switch_bank
      000356 84               [ 1]  864 	pop	a
                                    865 ;	se8r01-receive-car.c: 329: temp[0]=0x40;
      000357 1E 0C            [ 2]  866 	ldw	x, (0x0c, sp)
      000359 A6 40            [ 1]  867 	ld	a, #0x40
      00035B F7               [ 1]  868 	ld	(x), a
                                    869 ;	se8r01-receive-car.c: 330: temp[1]=0x00;
      00035C 1E 0C            [ 2]  870 	ldw	x, (0x0c, sp)
      00035E 5C               [ 2]  871 	incw	x
      00035F 1F 06            [ 2]  872 	ldw	(0x06, sp), x
      000361 1E 06            [ 2]  873 	ldw	x, (0x06, sp)
      000363 7F               [ 1]  874 	clr	(x)
                                    875 ;	se8r01-receive-car.c: 331: temp[2]=0x10;
      000364 1E 0C            [ 2]  876 	ldw	x, (0x0c, sp)
      000366 5C               [ 2]  877 	incw	x
      000367 5C               [ 2]  878 	incw	x
      000368 1F 0A            [ 2]  879 	ldw	(0x0a, sp), x
      00036A 1E 0A            [ 2]  880 	ldw	x, (0x0a, sp)
      00036C A6 10            [ 1]  881 	ld	a, #0x10
      00036E F7               [ 1]  882 	ld	(x), a
                                    883 ;	se8r01-receive-car.c: 333: {temp[3]=0xE6;}
      00036F 1E 0C            [ 2]  884 	ldw	x, (0x0c, sp)
      000371 1C 00 03         [ 2]  885 	addw	x, #0x0003
      000374 1F 08            [ 2]  886 	ldw	(0x08, sp), x
                                    887 ;	se8r01-receive-car.c: 332: if (SE8R01_DR_2M==1)
      000376 CEu00u00         [ 2]  888 	ldw	x, _SE8R01_DR_2M+0
      000379 A3 00 01         [ 2]  889 	cpw	x, #0x0001
      00037C 26 07            [ 1]  890 	jrne	00108$
                                    891 ;	se8r01-receive-car.c: 333: {temp[3]=0xE6;}
      00037E 1E 08            [ 2]  892 	ldw	x, (0x08, sp)
      000380 A6 E6            [ 1]  893 	ld	a, #0xe6
      000382 F7               [ 1]  894 	ld	(x), a
      000383 20 05            [ 2]  895 	jra	00109$
      000385                        896 00108$:
                                    897 ;	se8r01-receive-car.c: 335: {temp[3]=0xE4;}
      000385 1E 08            [ 2]  898 	ldw	x, (0x08, sp)
      000387 A6 E4            [ 1]  899 	ld	a, #0xe4
      000389 F7               [ 1]  900 	ld	(x), a
      00038A                        901 00109$:
                                    902 ;	se8r01-receive-car.c: 337: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_PLL_CTL0, temp, 4);
      00038A 1E 0C            [ 2]  903 	ldw	x, (0x0c, sp)
      00038C 4B 04            [ 1]  904 	push	#0x04
      00038E 89               [ 2]  905 	pushw	x
      00038F 4B 21            [ 1]  906 	push	#0x21
      000391 CDr00rA8         [ 4]  907 	call	_write_spi_buf
      000394 5B 04            [ 2]  908 	addw	sp, #4
                                    909 ;	se8r01-receive-car.c: 339: temp[0]=0x20;
      000396 1E 0C            [ 2]  910 	ldw	x, (0x0c, sp)
      000398 A6 20            [ 1]  911 	ld	a, #0x20
      00039A F7               [ 1]  912 	ld	(x), a
                                    913 ;	se8r01-receive-car.c: 340: temp[1]=0x08;
      00039B 1E 06            [ 2]  914 	ldw	x, (0x06, sp)
      00039D A6 08            [ 1]  915 	ld	a, #0x08
      00039F F7               [ 1]  916 	ld	(x), a
                                    917 ;	se8r01-receive-car.c: 341: temp[2]=0x50;
      0003A0 1E 0A            [ 2]  918 	ldw	x, (0x0a, sp)
      0003A2 A6 50            [ 1]  919 	ld	a, #0x50
      0003A4 F7               [ 1]  920 	ld	(x), a
                                    921 ;	se8r01-receive-car.c: 342: temp[3]=0x40;
      0003A5 1E 08            [ 2]  922 	ldw	x, (0x08, sp)
      0003A7 A6 40            [ 1]  923 	ld	a, #0x40
      0003A9 F7               [ 1]  924 	ld	(x), a
                                    925 ;	se8r01-receive-car.c: 343: temp[4]=0x50;
      0003AA 1E 0C            [ 2]  926 	ldw	x, (0x0c, sp)
      0003AC A6 50            [ 1]  927 	ld	a, #0x50
      0003AE E7 04            [ 1]  928 	ld	(0x0004, x), a
                                    929 ;	se8r01-receive-car.c: 344: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_CAL_CTL, temp, 5);
      0003B0 1E 0C            [ 2]  930 	ldw	x, (0x0c, sp)
      0003B2 4B 05            [ 1]  931 	push	#0x05
      0003B4 89               [ 2]  932 	pushw	x
      0003B5 4B 23            [ 1]  933 	push	#0x23
      0003B7 CDr00rA8         [ 4]  934 	call	_write_spi_buf
      0003BA 5B 04            [ 2]  935 	addw	sp, #4
                                    936 ;	se8r01-receive-car.c: 346: temp[0]=0x00;
      0003BC 1E 0C            [ 2]  937 	ldw	x, (0x0c, sp)
      0003BE 7F               [ 1]  938 	clr	(x)
                                    939 ;	se8r01-receive-car.c: 347: temp[1]=0x00;
      0003BF 1E 06            [ 2]  940 	ldw	x, (0x06, sp)
      0003C1 7F               [ 1]  941 	clr	(x)
                                    942 ;	se8r01-receive-car.c: 348: if (SE8R01_DR_2M==1)
      0003C2 CEu00u00         [ 2]  943 	ldw	x, _SE8R01_DR_2M+0
      0003C5 A3 00 01         [ 2]  944 	cpw	x, #0x0001
      0003C8 26 07            [ 1]  945 	jrne	00111$
                                    946 ;	se8r01-receive-car.c: 349: { temp[2]=0x1E;}
      0003CA 1E 0A            [ 2]  947 	ldw	x, (0x0a, sp)
      0003CC A6 1E            [ 1]  948 	ld	a, #0x1e
      0003CE F7               [ 1]  949 	ld	(x), a
      0003CF 20 05            [ 2]  950 	jra	00112$
      0003D1                        951 00111$:
                                    952 ;	se8r01-receive-car.c: 351: { temp[2]=0x1F;}
      0003D1 1E 0A            [ 2]  953 	ldw	x, (0x0a, sp)
      0003D3 A6 1F            [ 1]  954 	ld	a, #0x1f
      0003D5 F7               [ 1]  955 	ld	(x), a
      0003D6                        956 00112$:
                                    957 ;	se8r01-receive-car.c: 353: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_IF_FREQ, temp, 3);
      0003D6 1E 0C            [ 2]  958 	ldw	x, (0x0c, sp)
      0003D8 4B 03            [ 1]  959 	push	#0x03
      0003DA 89               [ 2]  960 	pushw	x
      0003DB 4B 2A            [ 1]  961 	push	#0x2a
      0003DD CDr00rA8         [ 4]  962 	call	_write_spi_buf
      0003E0 5B 04            [ 2]  963 	addw	sp, #4
                                    964 ;	se8r01-receive-car.c: 355: if (SE8R01_DR_2M==1)
      0003E2 CEu00u00         [ 2]  965 	ldw	x, _SE8R01_DR_2M+0
      0003E5 A3 00 01         [ 2]  966 	cpw	x, #0x0001
      0003E8 26 07            [ 1]  967 	jrne	00114$
                                    968 ;	se8r01-receive-car.c: 356: { temp[0]=0x29;}
      0003EA 1E 0C            [ 2]  969 	ldw	x, (0x0c, sp)
      0003EC A6 29            [ 1]  970 	ld	a, #0x29
      0003EE F7               [ 1]  971 	ld	(x), a
      0003EF 20 05            [ 2]  972 	jra	00115$
      0003F1                        973 00114$:
                                    974 ;	se8r01-receive-car.c: 358: { temp[0]=0x14;}
      0003F1 1E 0C            [ 2]  975 	ldw	x, (0x0c, sp)
      0003F3 A6 14            [ 1]  976 	ld	a, #0x14
      0003F5 F7               [ 1]  977 	ld	(x), a
      0003F6                        978 00115$:
                                    979 ;	se8r01-receive-car.c: 360: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_FDEV, temp, 1);
      0003F6 1E 0C            [ 2]  980 	ldw	x, (0x0c, sp)
      0003F8 4B 01            [ 1]  981 	push	#0x01
      0003FA 89               [ 2]  982 	pushw	x
      0003FB 4B 2C            [ 1]  983 	push	#0x2c
      0003FD CDr00rA8         [ 4]  984 	call	_write_spi_buf
      000400 5B 04            [ 2]  985 	addw	sp, #4
                                    986 ;	se8r01-receive-car.c: 362: temp[0]=0x00;
      000402 1E 0C            [ 2]  987 	ldw	x, (0x0c, sp)
      000404 7F               [ 1]  988 	clr	(x)
                                    989 ;	se8r01-receive-car.c: 363: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_DAC_CAL_LOW,temp,1);
      000405 1E 0C            [ 2]  990 	ldw	x, (0x0c, sp)
      000407 4B 01            [ 1]  991 	push	#0x01
      000409 89               [ 2]  992 	pushw	x
      00040A 4B 37            [ 1]  993 	push	#0x37
      00040C CDr00rA8         [ 4]  994 	call	_write_spi_buf
      00040F 5B 04            [ 2]  995 	addw	sp, #4
                                    996 ;	se8r01-receive-car.c: 365: temp[0]=0x7F;
      000411 1E 0C            [ 2]  997 	ldw	x, (0x0c, sp)
      000413 A6 7F            [ 1]  998 	ld	a, #0x7f
      000415 F7               [ 1]  999 	ld	(x), a
                                   1000 ;	se8r01-receive-car.c: 366: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_DAC_CAL_HI,temp,1);
      000416 1E 0C            [ 2] 1001 	ldw	x, (0x0c, sp)
      000418 4B 01            [ 1] 1002 	push	#0x01
      00041A 89               [ 2] 1003 	pushw	x
      00041B 4B 38            [ 1] 1004 	push	#0x38
      00041D CDr00rA8         [ 4] 1005 	call	_write_spi_buf
      000420 5B 04            [ 2] 1006 	addw	sp, #4
                                   1007 ;	se8r01-receive-car.c: 368: temp[0]=0x02;
      000422 1E 0C            [ 2] 1008 	ldw	x, (0x0c, sp)
      000424 A6 02            [ 1] 1009 	ld	a, #0x02
      000426 F7               [ 1] 1010 	ld	(x), a
                                   1011 ;	se8r01-receive-car.c: 369: temp[1]=0xC1;
      000427 1E 06            [ 2] 1012 	ldw	x, (0x06, sp)
      000429 A6 C1            [ 1] 1013 	ld	a, #0xc1
      00042B F7               [ 1] 1014 	ld	(x), a
                                   1015 ;	se8r01-receive-car.c: 370: temp[2]=0xEB;            
      00042C 1E 0A            [ 2] 1016 	ldw	x, (0x0a, sp)
      00042E A6 EB            [ 1] 1017 	ld	a, #0xeb
      000430 F7               [ 1] 1018 	ld	(x), a
                                   1019 ;	se8r01-receive-car.c: 371: temp[3]=0x1C;
      000431 1E 08            [ 2] 1020 	ldw	x, (0x08, sp)
      000433 A6 1C            [ 1] 1021 	ld	a, #0x1c
      000435 F7               [ 1] 1022 	ld	(x), a
                                   1023 ;	se8r01-receive-car.c: 372: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_AGC_GAIN, temp,4);
      000436 1E 0C            [ 2] 1024 	ldw	x, (0x0c, sp)
      000438 4B 04            [ 1] 1025 	push	#0x04
      00043A 89               [ 2] 1026 	pushw	x
      00043B 4B 3D            [ 1] 1027 	push	#0x3d
      00043D CDr00rA8         [ 4] 1028 	call	_write_spi_buf
      000440 5B 04            [ 2] 1029 	addw	sp, #4
                                   1030 ;	se8r01-receive-car.c: 374: temp[0]=0x97;
      000442 1E 0C            [ 2] 1031 	ldw	x, (0x0c, sp)
      000444 A6 97            [ 1] 1032 	ld	a, #0x97
      000446 F7               [ 1] 1033 	ld	(x), a
                                   1034 ;	se8r01-receive-car.c: 375: temp[1]=0x64;
      000447 1E 06            [ 2] 1035 	ldw	x, (0x06, sp)
      000449 A6 64            [ 1] 1036 	ld	a, #0x64
      00044B F7               [ 1] 1037 	ld	(x), a
                                   1038 ;	se8r01-receive-car.c: 376: temp[2]=0x00;
      00044C 1E 0A            [ 2] 1039 	ldw	x, (0x0a, sp)
      00044E 7F               [ 1] 1040 	clr	(x)
                                   1041 ;	se8r01-receive-car.c: 377: temp[3]=0x81;
      00044F 1E 08            [ 2] 1042 	ldw	x, (0x08, sp)
      000451 A6 81            [ 1] 1043 	ld	a, #0x81
      000453 F7               [ 1] 1044 	ld	(x), a
                                   1045 ;	se8r01-receive-car.c: 378: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_RF_IVGEN, temp, 4);
      000454 1E 0C            [ 2] 1046 	ldw	x, (0x0c, sp)
      000456 4B 04            [ 1] 1047 	push	#0x04
      000458 89               [ 2] 1048 	pushw	x
      000459 4B 3E            [ 1] 1049 	push	#0x3e
      00045B CDr00rA8         [ 4] 1050 	call	_write_spi_buf
      00045E 5B 04            [ 2] 1051 	addw	sp, #4
                                   1052 ;	se8r01-receive-car.c: 379: rf_switch_bank(iBANK0);
      000460 4B 00            [ 1] 1053 	push	#0x00
      000462 CDr02rC6         [ 4] 1054 	call	_rf_switch_bank
      000465 84               [ 1] 1055 	pop	a
                                   1056 ;	se8r01-receive-car.c: 384: delayTenMicro();
      000466 CDr00r00         [ 4] 1057 	call	_delayTenMicro
                                   1058 ;	se8r01-receive-car.c: 385: PC_ODR |= (1 << CE);
      000469 AE 50 0A         [ 2] 1059 	ldw	x, #0x500a
      00046C F6               [ 1] 1060 	ld	a, (x)
      00046D AA 08            [ 1] 1061 	or	a, #0x08
      00046F F7               [ 1] 1062 	ld	(x), a
                                   1063 ;	se8r01-receive-car.c: 386: delayTenMicro();
      000470 CDr00r00         [ 4] 1064 	call	_delayTenMicro
                                   1065 ;	se8r01-receive-car.c: 387: delayTenMicro();
      000473 CDr00r00         [ 4] 1066 	call	_delayTenMicro
                                   1067 ;	se8r01-receive-car.c: 388: delayTenMicro();
      000476 CDr00r00         [ 4] 1068 	call	_delayTenMicro
                                   1069 ;	se8r01-receive-car.c: 389: PC_ODR &= ~(1 << CE);
      000479 AE 50 0A         [ 2] 1070 	ldw	x, #0x500a
      00047C F6               [ 1] 1071 	ld	a, (x)
      00047D A4 F7            [ 1] 1072 	and	a, #0xf7
      00047F F7               [ 1] 1073 	ld	(x), a
                                   1074 ;	se8r01-receive-car.c: 390: delay(50);                            // delay 50ms waitting for calibaration.
      000480 4B 32            [ 1] 1075 	push	#0x32
      000482 4B 00            [ 1] 1076 	push	#0x00
      000484 CDr01r8E         [ 4] 1077 	call	_delay
      000487 5B 02            [ 2] 1078 	addw	sp, #2
                                   1079 ;	se8r01-receive-car.c: 395: delayTenMicro();
      000489 CDr00r00         [ 4] 1080 	call	_delayTenMicro
                                   1081 ;	se8r01-receive-car.c: 396: PC_ODR |= (1 << CE);
      00048C AE 50 0A         [ 2] 1082 	ldw	x, #0x500a
      00048F F6               [ 1] 1083 	ld	a, (x)
      000490 AA 08            [ 1] 1084 	or	a, #0x08
      000492 F7               [ 1] 1085 	ld	(x), a
                                   1086 ;	se8r01-receive-car.c: 397: delayTenMicro();
      000493 CDr00r00         [ 4] 1087 	call	_delayTenMicro
                                   1088 ;	se8r01-receive-car.c: 398: delayTenMicro();
      000496 CDr00r00         [ 4] 1089 	call	_delayTenMicro
                                   1090 ;	se8r01-receive-car.c: 399: delayTenMicro();
      000499 CDr00r00         [ 4] 1091 	call	_delayTenMicro
                                   1092 ;	se8r01-receive-car.c: 400: PC_ODR &= ~(1 << CE);
      00049C AE 50 0A         [ 2] 1093 	ldw	x, #0x500a
      00049F F6               [ 1] 1094 	ld	a, (x)
      0004A0 A4 F7            [ 1] 1095 	and	a, #0xf7
      0004A2 F7               [ 1] 1096 	ld	(x), a
                                   1097 ;	se8r01-receive-car.c: 401: delay(50);                            // delay 50ms waitting for calibaration.
      0004A3 4B 32            [ 1] 1098 	push	#0x32
      0004A5 4B 00            [ 1] 1099 	push	#0x00
      0004A7 CDr01r8E         [ 4] 1100 	call	_delay
      0004AA 5B 02            [ 2] 1101 	addw	sp, #2
      0004AC 5B 0D            [ 2] 1102 	addw	sp, #13
      0004AE 81               [ 4] 1103 	ret
                                   1104 ;	se8r01-receive-car.c: 405: void SE8R01_Analog_Init()           //SE8R01 初始化
                                   1105 ;	-----------------------------------------
                                   1106 ;	 function SE8R01_Analog_Init
                                   1107 ;	-----------------------------------------
      0004AF                       1108 _SE8R01_Analog_Init:
      0004AF 52 15            [ 2] 1109 	sub	sp, #21
                                   1110 ;	se8r01-receive-car.c: 410: gtemp[0]=0x28;
      0004B1 AEr00r00         [ 2] 1111 	ldw	x, #_gtemp+0
      0004B4 1F 0E            [ 2] 1112 	ldw	(0x0e, sp), x
      0004B6 1E 0E            [ 2] 1113 	ldw	x, (0x0e, sp)
      0004B8 A6 28            [ 1] 1114 	ld	a, #0x28
      0004BA F7               [ 1] 1115 	ld	(x), a
                                   1116 ;	se8r01-receive-car.c: 411: gtemp[1]=0x32;
      0004BB 1E 0E            [ 2] 1117 	ldw	x, (0x0e, sp)
      0004BD 5C               [ 2] 1118 	incw	x
      0004BE 1F 0C            [ 2] 1119 	ldw	(0x0c, sp), x
      0004C0 1E 0C            [ 2] 1120 	ldw	x, (0x0c, sp)
      0004C2 A6 32            [ 1] 1121 	ld	a, #0x32
      0004C4 F7               [ 1] 1122 	ld	(x), a
                                   1123 ;	se8r01-receive-car.c: 412: gtemp[2]=0x80;
      0004C5 1E 0E            [ 2] 1124 	ldw	x, (0x0e, sp)
      0004C7 5C               [ 2] 1125 	incw	x
      0004C8 5C               [ 2] 1126 	incw	x
      0004C9 1F 0A            [ 2] 1127 	ldw	(0x0a, sp), x
      0004CB 1E 0A            [ 2] 1128 	ldw	x, (0x0a, sp)
      0004CD A6 80            [ 1] 1129 	ld	a, #0x80
      0004CF F7               [ 1] 1130 	ld	(x), a
                                   1131 ;	se8r01-receive-car.c: 413: gtemp[3]=0x90;
      0004D0 1E 0E            [ 2] 1132 	ldw	x, (0x0e, sp)
      0004D2 1C 00 03         [ 2] 1133 	addw	x, #0x0003
      0004D5 1F 08            [ 2] 1134 	ldw	(0x08, sp), x
      0004D7 1E 08            [ 2] 1135 	ldw	x, (0x08, sp)
      0004D9 A6 90            [ 1] 1136 	ld	a, #0x90
      0004DB F7               [ 1] 1137 	ld	(x), a
                                   1138 ;	se8r01-receive-car.c: 414: gtemp[4]=0x00;
      0004DC 1E 0E            [ 2] 1139 	ldw	x, (0x0e, sp)
      0004DE 1C 00 04         [ 2] 1140 	addw	x, #0x0004
      0004E1 7F               [ 1] 1141 	clr	(x)
                                   1142 ;	se8r01-receive-car.c: 415: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_SETUP_VALUE, gtemp, 5);
      0004E2 1E 0E            [ 2] 1143 	ldw	x, (0x0e, sp)
      0004E4 4B 05            [ 1] 1144 	push	#0x05
      0004E6 89               [ 2] 1145 	pushw	x
      0004E7 4B 3E            [ 1] 1146 	push	#0x3e
      0004E9 CDr00rA8         [ 4] 1147 	call	_write_spi_buf
      0004EC 5B 04            [ 2] 1148 	addw	sp, #4
                                   1149 ;	se8r01-receive-car.c: 416: delay(2);
      0004EE 4B 02            [ 1] 1150 	push	#0x02
      0004F0 4B 00            [ 1] 1151 	push	#0x00
      0004F2 CDr01r8E         [ 4] 1152 	call	_delay
      0004F5 5B 02            [ 2] 1153 	addw	sp, #2
                                   1154 ;	se8r01-receive-car.c: 419: rf_switch_bank(iBANK1);
      0004F7 4B 80            [ 1] 1155 	push	#0x80
      0004F9 CDr02rC6         [ 4] 1156 	call	_rf_switch_bank
      0004FC 84               [ 1] 1157 	pop	a
                                   1158 ;	se8r01-receive-car.c: 421: temp[0]=0x40;
      0004FD 96               [ 1] 1159 	ldw	x, sp
      0004FE 5C               [ 2] 1160 	incw	x
      0004FF 1F 06            [ 2] 1161 	ldw	(0x06, sp), x
      000501 1E 06            [ 2] 1162 	ldw	x, (0x06, sp)
      000503 A6 40            [ 1] 1163 	ld	a, #0x40
      000505 F7               [ 1] 1164 	ld	(x), a
                                   1165 ;	se8r01-receive-car.c: 422: temp[1]=0x01;               
      000506 1E 06            [ 2] 1166 	ldw	x, (0x06, sp)
      000508 5C               [ 2] 1167 	incw	x
      000509 1F 14            [ 2] 1168 	ldw	(0x14, sp), x
      00050B 1E 14            [ 2] 1169 	ldw	x, (0x14, sp)
      00050D A6 01            [ 1] 1170 	ld	a, #0x01
      00050F F7               [ 1] 1171 	ld	(x), a
                                   1172 ;	se8r01-receive-car.c: 423: temp[2]=0x30;               
      000510 1E 06            [ 2] 1173 	ldw	x, (0x06, sp)
      000512 5C               [ 2] 1174 	incw	x
      000513 5C               [ 2] 1175 	incw	x
      000514 1F 12            [ 2] 1176 	ldw	(0x12, sp), x
      000516 1E 12            [ 2] 1177 	ldw	x, (0x12, sp)
      000518 A6 30            [ 1] 1178 	ld	a, #0x30
      00051A F7               [ 1] 1179 	ld	(x), a
                                   1180 ;	se8r01-receive-car.c: 425: { temp[3]=0xE2; }              
      00051B 1E 06            [ 2] 1181 	ldw	x, (0x06, sp)
      00051D 1C 00 03         [ 2] 1182 	addw	x, #0x0003
      000520 1F 10            [ 2] 1183 	ldw	(0x10, sp), x
                                   1184 ;	se8r01-receive-car.c: 424: if (SE8R01_DR_2M==1)
      000522 CEu00u00         [ 2] 1185 	ldw	x, _SE8R01_DR_2M+0
      000525 A3 00 01         [ 2] 1186 	cpw	x, #0x0001
      000528 26 07            [ 1] 1187 	jrne	00102$
                                   1188 ;	se8r01-receive-car.c: 425: { temp[3]=0xE2; }              
      00052A 1E 10            [ 2] 1189 	ldw	x, (0x10, sp)
      00052C A6 E2            [ 1] 1190 	ld	a, #0xe2
      00052E F7               [ 1] 1191 	ld	(x), a
      00052F 20 05            [ 2] 1192 	jra	00103$
      000531                       1193 00102$:
                                   1194 ;	se8r01-receive-car.c: 427: { temp[3]=0xE0;}
      000531 1E 10            [ 2] 1195 	ldw	x, (0x10, sp)
      000533 A6 E0            [ 1] 1196 	ld	a, #0xe0
      000535 F7               [ 1] 1197 	ld	(x), a
      000536                       1198 00103$:
                                   1199 ;	se8r01-receive-car.c: 429: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_PLL_CTL0, temp,4);
      000536 1E 06            [ 2] 1200 	ldw	x, (0x06, sp)
      000538 4B 04            [ 1] 1201 	push	#0x04
      00053A 89               [ 2] 1202 	pushw	x
      00053B 4B 21            [ 1] 1203 	push	#0x21
      00053D CDr00rA8         [ 4] 1204 	call	_write_spi_buf
      000540 5B 04            [ 2] 1205 	addw	sp, #4
                                   1206 ;	se8r01-receive-car.c: 431: temp[0]=0x29;
      000542 1E 06            [ 2] 1207 	ldw	x, (0x06, sp)
      000544 A6 29            [ 1] 1208 	ld	a, #0x29
      000546 F7               [ 1] 1209 	ld	(x), a
                                   1210 ;	se8r01-receive-car.c: 432: temp[1]=0x89;
      000547 1E 14            [ 2] 1211 	ldw	x, (0x14, sp)
      000549 A6 89            [ 1] 1212 	ld	a, #0x89
      00054B F7               [ 1] 1213 	ld	(x), a
                                   1214 ;	se8r01-receive-car.c: 433: temp[2]=0x55;                     
      00054C 1E 12            [ 2] 1215 	ldw	x, (0x12, sp)
      00054E A6 55            [ 1] 1216 	ld	a, #0x55
      000550 F7               [ 1] 1217 	ld	(x), a
                                   1218 ;	se8r01-receive-car.c: 434: temp[3]=0x40;
      000551 1E 10            [ 2] 1219 	ldw	x, (0x10, sp)
      000553 A6 40            [ 1] 1220 	ld	a, #0x40
      000555 F7               [ 1] 1221 	ld	(x), a
                                   1222 ;	se8r01-receive-car.c: 435: temp[4]=0x50;
      000556 1E 06            [ 2] 1223 	ldw	x, (0x06, sp)
      000558 A6 50            [ 1] 1224 	ld	a, #0x50
      00055A E7 04            [ 1] 1225 	ld	(0x0004, x), a
                                   1226 ;	se8r01-receive-car.c: 436: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_CAL_CTL, temp,5);
      00055C 1E 06            [ 2] 1227 	ldw	x, (0x06, sp)
      00055E 4B 05            [ 1] 1228 	push	#0x05
      000560 89               [ 2] 1229 	pushw	x
      000561 4B 23            [ 1] 1230 	push	#0x23
      000563 CDr00rA8         [ 4] 1231 	call	_write_spi_buf
      000566 5B 04            [ 2] 1232 	addw	sp, #4
                                   1233 ;	se8r01-receive-car.c: 438: if (SE8R01_DR_2M==1)
      000568 CEu00u00         [ 2] 1234 	ldw	x, _SE8R01_DR_2M+0
      00056B A3 00 01         [ 2] 1235 	cpw	x, #0x0001
      00056E 26 07            [ 1] 1236 	jrne	00105$
                                   1237 ;	se8r01-receive-car.c: 439: { temp[0]=0x29;}
      000570 1E 06            [ 2] 1238 	ldw	x, (0x06, sp)
      000572 A6 29            [ 1] 1239 	ld	a, #0x29
      000574 F7               [ 1] 1240 	ld	(x), a
      000575 20 05            [ 2] 1241 	jra	00106$
      000577                       1242 00105$:
                                   1243 ;	se8r01-receive-car.c: 441: { temp[0]=0x14;}
      000577 1E 06            [ 2] 1244 	ldw	x, (0x06, sp)
      000579 A6 14            [ 1] 1245 	ld	a, #0x14
      00057B F7               [ 1] 1246 	ld	(x), a
      00057C                       1247 00106$:
                                   1248 ;	se8r01-receive-car.c: 443: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_FDEV, temp,1);
      00057C 1E 06            [ 2] 1249 	ldw	x, (0x06, sp)
      00057E 4B 01            [ 1] 1250 	push	#0x01
      000580 89               [ 2] 1251 	pushw	x
      000581 4B 2C            [ 1] 1252 	push	#0x2c
      000583 CDr00rA8         [ 4] 1253 	call	_write_spi_buf
      000586 5B 04            [ 2] 1254 	addw	sp, #4
                                   1255 ;	se8r01-receive-car.c: 445: temp[0]=0x55;
      000588 1E 06            [ 2] 1256 	ldw	x, (0x06, sp)
      00058A A6 55            [ 1] 1257 	ld	a, #0x55
      00058C F7               [ 1] 1258 	ld	(x), a
                                   1259 ;	se8r01-receive-car.c: 446: temp[1]=0xC2;
      00058D 1E 14            [ 2] 1260 	ldw	x, (0x14, sp)
      00058F A6 C2            [ 1] 1261 	ld	a, #0xc2
      000591 F7               [ 1] 1262 	ld	(x), a
                                   1263 ;	se8r01-receive-car.c: 447: temp[2]=0x09;
      000592 1E 12            [ 2] 1264 	ldw	x, (0x12, sp)
      000594 A6 09            [ 1] 1265 	ld	a, #0x09
      000596 F7               [ 1] 1266 	ld	(x), a
                                   1267 ;	se8r01-receive-car.c: 448: temp[3]=0xAC;  
      000597 1E 10            [ 2] 1268 	ldw	x, (0x10, sp)
      000599 A6 AC            [ 1] 1269 	ld	a, #0xac
      00059B F7               [ 1] 1270 	ld	(x), a
                                   1271 ;	se8r01-receive-car.c: 449: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_RX_CTRL,temp,4);
      00059C 1E 06            [ 2] 1272 	ldw	x, (0x06, sp)
      00059E 4B 04            [ 1] 1273 	push	#0x04
      0005A0 89               [ 2] 1274 	pushw	x
      0005A1 4B 31            [ 1] 1275 	push	#0x31
      0005A3 CDr00rA8         [ 4] 1276 	call	_write_spi_buf
      0005A6 5B 04            [ 2] 1277 	addw	sp, #4
                                   1278 ;	se8r01-receive-car.c: 451: temp[0]=0x00;
      0005A8 1E 06            [ 2] 1279 	ldw	x, (0x06, sp)
      0005AA 7F               [ 1] 1280 	clr	(x)
                                   1281 ;	se8r01-receive-car.c: 452: temp[1]=0x14;
      0005AB 1E 14            [ 2] 1282 	ldw	x, (0x14, sp)
      0005AD A6 14            [ 1] 1283 	ld	a, #0x14
      0005AF F7               [ 1] 1284 	ld	(x), a
                                   1285 ;	se8r01-receive-car.c: 453: temp[2]=0x08;   
      0005B0 1E 12            [ 2] 1286 	ldw	x, (0x12, sp)
      0005B2 A6 08            [ 1] 1287 	ld	a, #0x08
      0005B4 F7               [ 1] 1288 	ld	(x), a
                                   1289 ;	se8r01-receive-car.c: 454: temp[3]=0x29;
      0005B5 1E 10            [ 2] 1290 	ldw	x, (0x10, sp)
      0005B7 A6 29            [ 1] 1291 	ld	a, #0x29
      0005B9 F7               [ 1] 1292 	ld	(x), a
                                   1293 ;	se8r01-receive-car.c: 455: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_FAGC_CTRL_1, temp,4);
      0005BA 1E 06            [ 2] 1294 	ldw	x, (0x06, sp)
      0005BC 4B 04            [ 1] 1295 	push	#0x04
      0005BE 89               [ 2] 1296 	pushw	x
      0005BF 4B 33            [ 1] 1297 	push	#0x33
      0005C1 CDr00rA8         [ 4] 1298 	call	_write_spi_buf
      0005C4 5B 04            [ 2] 1299 	addw	sp, #4
                                   1300 ;	se8r01-receive-car.c: 457: temp[0]=0x02;
      0005C6 1E 06            [ 2] 1301 	ldw	x, (0x06, sp)
      0005C8 A6 02            [ 1] 1302 	ld	a, #0x02
      0005CA F7               [ 1] 1303 	ld	(x), a
                                   1304 ;	se8r01-receive-car.c: 458: temp[1]=0xC1;
      0005CB 1E 14            [ 2] 1305 	ldw	x, (0x14, sp)
      0005CD A6 C1            [ 1] 1306 	ld	a, #0xc1
      0005CF F7               [ 1] 1307 	ld	(x), a
                                   1308 ;	se8r01-receive-car.c: 459: temp[2]=0xCB;  
      0005D0 1E 12            [ 2] 1309 	ldw	x, (0x12, sp)
      0005D2 A6 CB            [ 1] 1310 	ld	a, #0xcb
      0005D4 F7               [ 1] 1311 	ld	(x), a
                                   1312 ;	se8r01-receive-car.c: 460: temp[3]=0x1C;
      0005D5 1E 10            [ 2] 1313 	ldw	x, (0x10, sp)
      0005D7 A6 1C            [ 1] 1314 	ld	a, #0x1c
      0005D9 F7               [ 1] 1315 	ld	(x), a
                                   1316 ;	se8r01-receive-car.c: 461: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_AGC_GAIN, temp,4);
      0005DA 1E 06            [ 2] 1317 	ldw	x, (0x06, sp)
      0005DC 4B 04            [ 1] 1318 	push	#0x04
      0005DE 89               [ 2] 1319 	pushw	x
      0005DF 4B 3D            [ 1] 1320 	push	#0x3d
      0005E1 CDr00rA8         [ 4] 1321 	call	_write_spi_buf
      0005E4 5B 04            [ 2] 1322 	addw	sp, #4
                                   1323 ;	se8r01-receive-car.c: 463: temp[0]=0x97;
      0005E6 1E 06            [ 2] 1324 	ldw	x, (0x06, sp)
      0005E8 A6 97            [ 1] 1325 	ld	a, #0x97
      0005EA F7               [ 1] 1326 	ld	(x), a
                                   1327 ;	se8r01-receive-car.c: 464: temp[1]=0x64;
      0005EB 1E 14            [ 2] 1328 	ldw	x, (0x14, sp)
      0005ED A6 64            [ 1] 1329 	ld	a, #0x64
      0005EF F7               [ 1] 1330 	ld	(x), a
                                   1331 ;	se8r01-receive-car.c: 465: temp[2]=0x00;
      0005F0 1E 12            [ 2] 1332 	ldw	x, (0x12, sp)
      0005F2 7F               [ 1] 1333 	clr	(x)
                                   1334 ;	se8r01-receive-car.c: 466: temp[3]=0x01;
      0005F3 1E 10            [ 2] 1335 	ldw	x, (0x10, sp)
      0005F5 A6 01            [ 1] 1336 	ld	a, #0x01
      0005F7 F7               [ 1] 1337 	ld	(x), a
                                   1338 ;	se8r01-receive-car.c: 467: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_RF_IVGEN, temp,4);
      0005F8 1E 06            [ 2] 1339 	ldw	x, (0x06, sp)
      0005FA 4B 04            [ 1] 1340 	push	#0x04
      0005FC 89               [ 2] 1341 	pushw	x
      0005FD 4B 3E            [ 1] 1342 	push	#0x3e
      0005FF CDr00rA8         [ 4] 1343 	call	_write_spi_buf
      000602 5B 04            [ 2] 1344 	addw	sp, #4
                                   1345 ;	se8r01-receive-car.c: 469: gtemp[0]=0x2A;
      000604 1E 0E            [ 2] 1346 	ldw	x, (0x0e, sp)
      000606 A6 2A            [ 1] 1347 	ld	a, #0x2a
      000608 F7               [ 1] 1348 	ld	(x), a
                                   1349 ;	se8r01-receive-car.c: 470: gtemp[1]=0x04;
      000609 1E 0C            [ 2] 1350 	ldw	x, (0x0c, sp)
      00060B A6 04            [ 1] 1351 	ld	a, #0x04
      00060D F7               [ 1] 1352 	ld	(x), a
                                   1353 ;	se8r01-receive-car.c: 471: gtemp[2]=0x00;
      00060E 1E 0A            [ 2] 1354 	ldw	x, (0x0a, sp)
      000610 7F               [ 1] 1355 	clr	(x)
                                   1356 ;	se8r01-receive-car.c: 472: gtemp[3]=0x7D;
      000611 1E 08            [ 2] 1357 	ldw	x, (0x08, sp)
      000613 A6 7D            [ 1] 1358 	ld	a, #0x7d
      000615 F7               [ 1] 1359 	ld	(x), a
                                   1360 ;	se8r01-receive-car.c: 473: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_TEST_PKDET, gtemp, 4);
      000616 1E 0E            [ 2] 1361 	ldw	x, (0x0e, sp)
      000618 4B 04            [ 1] 1362 	push	#0x04
      00061A 89               [ 2] 1363 	pushw	x
      00061B 4B 3F            [ 1] 1364 	push	#0x3f
      00061D CDr00rA8         [ 4] 1365 	call	_write_spi_buf
      000620 5B 04            [ 2] 1366 	addw	sp, #4
                                   1367 ;	se8r01-receive-car.c: 475: rf_switch_bank(iBANK0);
      000622 4B 00            [ 1] 1368 	push	#0x00
      000624 CDr02rC6         [ 4] 1369 	call	_rf_switch_bank
      000627 84               [ 1] 1370 	pop	a
      000628 5B 15            [ 2] 1371 	addw	sp, #21
      00062A 81               [ 4] 1372 	ret
                                   1373 ;	se8r01-receive-car.c: 478: void SE8R01_Init()  
                                   1374 ;	-----------------------------------------
                                   1375 ;	 function SE8R01_Init
                                   1376 ;	-----------------------------------------
      00062B                       1377 _SE8R01_Init:
      00062B 52 05            [ 2] 1378 	sub	sp, #5
                                   1379 ;	se8r01-receive-car.c: 481: SE8R01_Calibration();   
      00062D CDr02rE3         [ 4] 1380 	call	_SE8R01_Calibration
                                   1381 ;	se8r01-receive-car.c: 482: SE8R01_Analog_Init();   
      000630 CDr04rAF         [ 4] 1382 	call	_SE8R01_Analog_Init
                                   1383 ;	se8r01-receive-car.c: 486: if (SE8R01_DR_2M==1)
      000633 CEu00u00         [ 2] 1384 	ldw	x, _SE8R01_DR_2M+0
      000636 A3 00 01         [ 2] 1385 	cpw	x, #0x0001
      000639 26 07            [ 1] 1386 	jrne	00105$
                                   1387 ;	se8r01-receive-car.c: 487: {  temp[0]=0b01001111; }     //2MHz,+5dbm
      00063B 96               [ 1] 1388 	ldw	x, sp
      00063C 5C               [ 2] 1389 	incw	x
      00063D A6 4F            [ 1] 1390 	ld	a, #0x4f
      00063F F7               [ 1] 1391 	ld	(x), a
      000640 20 14            [ 2] 1392 	jra	00106$
      000642                       1393 00105$:
                                   1394 ;	se8r01-receive-car.c: 488: else if  (SE8R01_DR_1M==1)
      000642 CEu00u02         [ 2] 1395 	ldw	x, _SE8R01_DR_1M+0
      000645 A3 00 01         [ 2] 1396 	cpw	x, #0x0001
      000648 26 07            [ 1] 1397 	jrne	00102$
                                   1398 ;	se8r01-receive-car.c: 489: {  temp[0]=0b01000111;  }     //1MHz,+5dbm
      00064A 96               [ 1] 1399 	ldw	x, sp
      00064B 5C               [ 2] 1400 	incw	x
      00064C A6 47            [ 1] 1401 	ld	a, #0x47
      00064E F7               [ 1] 1402 	ld	(x), a
      00064F 20 05            [ 2] 1403 	jra	00106$
      000651                       1404 00102$:
                                   1405 ;	se8r01-receive-car.c: 491: {temp[0]=0b01101111;  }     //500K,+5dbm
      000651 96               [ 1] 1406 	ldw	x, sp
      000652 5C               [ 2] 1407 	incw	x
      000653 A6 6F            [ 1] 1408 	ld	a, #0x6f
      000655 F7               [ 1] 1409 	ld	(x), a
      000656                       1410 00106$:
                                   1411 ;	se8r01-receive-car.c: 493: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_RF_SETUP,temp,1);
      000656 96               [ 1] 1412 	ldw	x, sp
      000657 5C               [ 2] 1413 	incw	x
      000658 4B 01            [ 1] 1414 	push	#0x01
      00065A 89               [ 2] 1415 	pushw	x
      00065B 4B 26            [ 1] 1416 	push	#0x26
      00065D CDr00rA8         [ 4] 1417 	call	_write_spi_buf
      000660 5B 04            [ 2] 1418 	addw	sp, #4
                                   1419 ;	se8r01-receive-car.c: 494: write_spi_reg(WRITE_REG|iRF_BANK0_EN_AA, 0b00111111);          //enable auto acc on pip 1
      000662 4B 3F            [ 1] 1420 	push	#0x3f
      000664 4B 21            [ 1] 1421 	push	#0x21
      000666 CDr00r2E         [ 4] 1422 	call	_write_spi_reg
      000669 5B 02            [ 2] 1423 	addw	sp, #2
                                   1424 ;	se8r01-receive-car.c: 495: write_spi_reg(WRITE_REG|iRF_BANK0_EN_RXADDR, 0b00111111);      //enable pip 1
      00066B 4B 3F            [ 1] 1425 	push	#0x3f
      00066D 4B 22            [ 1] 1426 	push	#0x22
      00066F CDr00r2E         [ 4] 1427 	call	_write_spi_reg
      000672 5B 02            [ 2] 1428 	addw	sp, #2
                                   1429 ;	se8r01-receive-car.c: 496: write_spi_reg(WRITE_REG|iRF_BANK0_SETUP_AW, 0x02);  
      000674 4B 02            [ 1] 1430 	push	#0x02
      000676 4B 23            [ 1] 1431 	push	#0x23
      000678 CDr00r2E         [ 4] 1432 	call	_write_spi_reg
      00067B 5B 02            [ 2] 1433 	addw	sp, #2
                                   1434 ;	se8r01-receive-car.c: 497: write_spi_reg(WRITE_REG|iRF_BANK0_RF_CH, 40);
      00067D 4B 28            [ 1] 1435 	push	#0x28
      00067F 4B 25            [ 1] 1436 	push	#0x25
      000681 CDr00r2E         [ 4] 1437 	call	_write_spi_reg
      000684 5B 02            [ 2] 1438 	addw	sp, #2
                                   1439 ;	se8r01-receive-car.c: 499: write_spi_buf(WRITE_REG + TX_ADDR, ADDRESS0, ADR_WIDTH);    	
      000686 AEr00r1A         [ 2] 1440 	ldw	x, #_ADDRESS0+0
      000689 90 93            [ 1] 1441 	ldw	y, x
      00068B 89               [ 2] 1442 	pushw	x
      00068C 4B 04            [ 1] 1443 	push	#0x04
      00068E 90 89            [ 2] 1444 	pushw	y
      000690 4B 30            [ 1] 1445 	push	#0x30
      000692 CDr00rA8         [ 4] 1446 	call	_write_spi_buf
      000695 5B 04            [ 2] 1447 	addw	sp, #4
      000697 85               [ 2] 1448 	popw	x
                                   1449 ;	se8r01-receive-car.c: 500: write_spi_buf(WRITE_REG + RX_ADDR_P0, ADDRESS0, ADR_WIDTH); 
      000698 4B 04            [ 1] 1450 	push	#0x04
      00069A 89               [ 2] 1451 	pushw	x
      00069B 4B 2A            [ 1] 1452 	push	#0x2a
      00069D CDr00rA8         [ 4] 1453 	call	_write_spi_buf
      0006A0 5B 04            [ 2] 1454 	addw	sp, #4
                                   1455 ;	se8r01-receive-car.c: 501: write_spi_buf(WRITE_REG + RX_ADDR_P1, ADDRESS1, ADR_WIDTH); 
      0006A2 AEr00r16         [ 2] 1456 	ldw	x, #_ADDRESS1+0
      0006A5 4B 04            [ 1] 1457 	push	#0x04
      0006A7 89               [ 2] 1458 	pushw	x
      0006A8 4B 2B            [ 1] 1459 	push	#0x2b
      0006AA CDr00rA8         [ 4] 1460 	call	_write_spi_buf
      0006AD 5B 04            [ 2] 1461 	addw	sp, #4
                                   1462 ;	se8r01-receive-car.c: 502: write_spi_buf(WRITE_REG + RX_ADDR_P2, ADDRESS2, 1); 
      0006AF AEr00r12         [ 2] 1463 	ldw	x, #_ADDRESS2+0
      0006B2 4B 01            [ 1] 1464 	push	#0x01
      0006B4 89               [ 2] 1465 	pushw	x
      0006B5 4B 2C            [ 1] 1466 	push	#0x2c
      0006B7 CDr00rA8         [ 4] 1467 	call	_write_spi_buf
      0006BA 5B 04            [ 2] 1468 	addw	sp, #4
                                   1469 ;	se8r01-receive-car.c: 503: write_spi_buf(WRITE_REG + RX_ADDR_P3, ADDRESS3, 1); 
      0006BC AEr00r13         [ 2] 1470 	ldw	x, #_ADDRESS3+0
      0006BF 4B 01            [ 1] 1471 	push	#0x01
      0006C1 89               [ 2] 1472 	pushw	x
      0006C2 4B 2D            [ 1] 1473 	push	#0x2d
      0006C4 CDr00rA8         [ 4] 1474 	call	_write_spi_buf
      0006C7 5B 04            [ 2] 1475 	addw	sp, #4
                                   1476 ;	se8r01-receive-car.c: 504: write_spi_buf(WRITE_REG + RX_ADDR_P4, ADDRESS4, 1); 
      0006C9 AEr00r14         [ 2] 1477 	ldw	x, #_ADDRESS4+0
      0006CC 4B 01            [ 1] 1478 	push	#0x01
      0006CE 89               [ 2] 1479 	pushw	x
      0006CF 4B 2E            [ 1] 1480 	push	#0x2e
      0006D1 CDr00rA8         [ 4] 1481 	call	_write_spi_buf
      0006D4 5B 04            [ 2] 1482 	addw	sp, #4
                                   1483 ;	se8r01-receive-car.c: 505: write_spi_buf(WRITE_REG + RX_ADDR_P5, ADDRESS5, 1); 
      0006D6 AEr00r15         [ 2] 1484 	ldw	x, #_ADDRESS5+0
      0006D9 4B 01            [ 1] 1485 	push	#0x01
      0006DB 89               [ 2] 1486 	pushw	x
      0006DC 4B 2F            [ 1] 1487 	push	#0x2f
      0006DE CDr00rA8         [ 4] 1488 	call	_write_spi_buf
      0006E1 5B 04            [ 2] 1489 	addw	sp, #4
                                   1490 ;	se8r01-receive-car.c: 506: write_spi_reg(WRITE_REG + RX_PW_P0, PLOAD_WIDTH); 
      0006E3 4B 20            [ 1] 1491 	push	#0x20
      0006E5 4B 31            [ 1] 1492 	push	#0x31
      0006E7 CDr00r2E         [ 4] 1493 	call	_write_spi_reg
      0006EA 5B 02            [ 2] 1494 	addw	sp, #2
                                   1495 ;	se8r01-receive-car.c: 507: write_spi_reg(WRITE_REG|iRF_BANK0_CONFIG, 0x3f); 
      0006EC 4B 3F            [ 1] 1496 	push	#0x3f
      0006EE 4B 20            [ 1] 1497 	push	#0x20
      0006F0 CDr00r2E         [ 4] 1498 	call	_write_spi_reg
      0006F3 5B 02            [ 2] 1499 	addw	sp, #2
                                   1500 ;	se8r01-receive-car.c: 508: write_spi_reg(WRITE_REG|iRF_BANK0_DYNPD, 0b00111111);          // enable dynamic payload length data
      0006F5 4B 3F            [ 1] 1501 	push	#0x3f
      0006F7 4B 3C            [ 1] 1502 	push	#0x3c
      0006F9 CDr00r2E         [ 4] 1503 	call	_write_spi_reg
      0006FC 5B 02            [ 2] 1504 	addw	sp, #2
                                   1505 ;	se8r01-receive-car.c: 509: write_spi_reg(WRITE_REG|iRF_BANK0_FEATURE, 0x07);        // enable dynamic paload lenght; enbale payload with ack enable w_tx_payload_noack
      0006FE 4B 07            [ 1] 1506 	push	#0x07
      000700 4B 3D            [ 1] 1507 	push	#0x3d
      000702 CDr00r2E         [ 4] 1508 	call	_write_spi_reg
      000705 5B 02            [ 2] 1509 	addw	sp, #2
                                   1510 ;	se8r01-receive-car.c: 510: PC_ODR |= (1 << CE);
      000707 AE 50 0A         [ 2] 1511 	ldw	x, #0x500a
      00070A F6               [ 1] 1512 	ld	a, (x)
      00070B AA 08            [ 1] 1513 	or	a, #0x08
      00070D F7               [ 1] 1514 	ld	(x), a
      00070E 5B 05            [ 2] 1515 	addw	sp, #5
      000710 81               [ 4] 1516 	ret
                                   1517 ;	se8r01-receive-car.c: 515: void Init_Tim2 ()
                                   1518 ;	-----------------------------------------
                                   1519 ;	 function Init_Tim2
                                   1520 ;	-----------------------------------------
      000711                       1521 _Init_Tim2:
                                   1522 ;	se8r01-receive-car.c: 539: TIM2_CCMR3 |=0X70;//Set the timer 2 / three channel three (PD2) output mode
      000711 AE 53 09         [ 2] 1523 	ldw	x, #0x5309
      000714 F6               [ 1] 1524 	ld	a, (x)
      000715 AA 70            [ 1] 1525 	or	a, #0x70
      000717 F7               [ 1] 1526 	ld	(x), a
                                   1527 ;	se8r01-receive-car.c: 540: TIM2_CCMR3 |=0X04;//Comparison of 3 pre load / / output enable
      000718 AE 53 09         [ 2] 1528 	ldw	x, #0x5309
      00071B F6               [ 1] 1529 	ld	a, (x)
      00071C AA 04            [ 1] 1530 	or	a, #0x04
      00071E F7               [ 1] 1531 	ld	(x), a
                                   1532 ;	se8r01-receive-car.c: 542: TIM2_CCER2 |=0x03;//  Channel 3 enable, active low output configuration
      00071F AE 53 0B         [ 2] 1533 	ldw	x, #0x530b
      000722 F6               [ 1] 1534 	ld	a, (x)
      000723 AA 03            [ 1] 1535 	or	a, #0x03
      000725 F7               [ 1] 1536 	ld	(x), a
                                   1537 ;	se8r01-receive-car.c: 544: TIM2_PSCR =0X04;// 16 Mhz/2^4 =  1Mhz  -- the prescaler is a 4 bit number!
      000726 AE 53 0E         [ 2] 1538 	ldw	x, #0x530e
      000729 A6 04            [ 1] 1539 	ld	a, #0x04
      00072B F7               [ 1] 1540 	ld	(x), a
                                   1541 ;	se8r01-receive-car.c: 548: TIM2_ARRH =20000/256; // auto reload register
      00072C AE 53 0F         [ 2] 1542 	ldw	x, #0x530f
      00072F A6 4E            [ 1] 1543 	ld	a, #0x4e
      000731 F7               [ 1] 1544 	ld	(x), a
                                   1545 ;	se8r01-receive-car.c: 549: TIM2_ARRL =20000%256; // 1000 Khz/20000 is 50 events per second 
      000732 AE 53 10         [ 2] 1546 	ldw	x, #0x5310
      000735 A6 20            [ 1] 1547 	ld	a, #0x20
      000737 F7               [ 1] 1548 	ld	(x), a
                                   1549 ;	se8r01-receive-car.c: 553: TIM2_CCR3H =1000/256; //compare capture register value
      000738 AE 53 15         [ 2] 1550 	ldw	x, #0x5315
      00073B A6 03            [ 1] 1551 	ld	a, #0x03
      00073D F7               [ 1] 1552 	ld	(x), a
                                   1553 ;	se8r01-receive-car.c: 554: TIM2_CCR3L =1000%256;
      00073E AE 53 16         [ 2] 1554 	ldw	x, #0x5316
      000741 A6 E8            [ 1] 1555 	ld	a, #0xe8
      000743 F7               [ 1] 1556 	ld	(x), a
                                   1557 ;	se8r01-receive-car.c: 555: UARTPrintF("timer init 1 = \n\r");
      000744 AEr0Ar37         [ 2] 1558 	ldw	x, #___str_0+0
      000747 89               [ 2] 1559 	pushw	x
      000748 CDr01rD9         [ 4] 1560 	call	_UARTPrintF
      00074B 5B 02            [ 2] 1561 	addw	sp, #2
                                   1562 ;	se8r01-receive-car.c: 563: TIM2_CCER1 =0x03;//  Channel 1 enable, active low output configuration
      00074D AE 53 0A         [ 2] 1563 	ldw	x, #0x530a
      000750 A6 03            [ 1] 1564 	ld	a, #0x03
      000752 F7               [ 1] 1565 	ld	(x), a
                                   1566 ;	se8r01-receive-car.c: 564: TIM2_CCMR2 = 0x03;
      000753 AE 53 08         [ 2] 1567 	ldw	x, #0x5308
      000756 A6 03            [ 1] 1568 	ld	a, #0x03
      000758 F7               [ 1] 1569 	ld	(x), a
                                   1570 ;	se8r01-receive-car.c: 565: TIM2_CCMR1 =0X70;//Set the timer 2 / channel 1 output
      000759 AE 53 07         [ 2] 1571 	ldw	x, #0x5307
      00075C A6 70            [ 1] 1572 	ld	a, #0x70
      00075E F7               [ 1] 1573 	ld	(x), a
                                   1574 ;	se8r01-receive-car.c: 570: TIM2_CCR1H =10000/256; //compare capture register value for channel 1
      00075F AE 53 11         [ 2] 1575 	ldw	x, #0x5311
      000762 A6 27            [ 1] 1576 	ld	a, #0x27
      000764 F7               [ 1] 1577 	ld	(x), a
                                   1578 ;	se8r01-receive-car.c: 571: TIM2_CCR1L =10000%256;
      000765 AE 53 12         [ 2] 1579 	ldw	x, #0x5312
      000768 A6 10            [ 1] 1580 	ld	a, #0x10
      00076A F7               [ 1] 1581 	ld	(x), a
                                   1582 ;	se8r01-receive-car.c: 575: UARTPrintF("timer init 2 = \n\r");
      00076B AEr0Ar49         [ 2] 1583 	ldw	x, #___str_1+0
      00076E 89               [ 2] 1584 	pushw	x
      00076F CDr01rD9         [ 4] 1585 	call	_UARTPrintF
      000772 5B 02            [ 2] 1586 	addw	sp, #2
                                   1587 ;	se8r01-receive-car.c: 578: TIM2_CR1 |=0x81;
      000774 AE 53 00         [ 2] 1588 	ldw	x, #0x5300
      000777 F6               [ 1] 1589 	ld	a, (x)
      000778 AA 81            [ 1] 1590 	or	a, #0x81
      00077A F7               [ 1] 1591 	ld	(x), a
      00077B 81               [ 4] 1592 	ret
                                   1593 ;	se8r01-receive-car.c: 584: int main () {
                                   1594 ;	-----------------------------------------
                                   1595 ;	 function main
                                   1596 ;	-----------------------------------------
      00077C                       1597 _main:
      00077C 52 3D            [ 2] 1598 	sub	sp, #61
                                   1599 ;	se8r01-receive-car.c: 586: UCHAR rx_addr_p1[]  = { 0xd2, 0xf0, 0xf0, 0xf0, 0xf0 };
      00077E 90 96            [ 1] 1600 	ldw	y, sp
      000780 72 A9 00 27      [ 2] 1601 	addw	y, #39
      000784 A6 D2            [ 1] 1602 	ld	a, #0xd2
      000786 90 F7            [ 1] 1603 	ld	(y), a
      000788 93               [ 1] 1604 	ldw	x, y
      000789 5C               [ 2] 1605 	incw	x
      00078A A6 F0            [ 1] 1606 	ld	a, #0xf0
      00078C F7               [ 1] 1607 	ld	(x), a
      00078D 93               [ 1] 1608 	ldw	x, y
      00078E 5C               [ 2] 1609 	incw	x
      00078F 5C               [ 2] 1610 	incw	x
      000790 A6 F0            [ 1] 1611 	ld	a, #0xf0
      000792 F7               [ 1] 1612 	ld	(x), a
      000793 93               [ 1] 1613 	ldw	x, y
      000794 A6 F0            [ 1] 1614 	ld	a, #0xf0
      000796 E7 03            [ 1] 1615 	ld	(0x0003, x), a
      000798 93               [ 1] 1616 	ldw	x, y
      000799 A6 F0            [ 1] 1617 	ld	a, #0xf0
      00079B E7 04            [ 1] 1618 	ld	(0x0004, x), a
                                   1619 ;	se8r01-receive-car.c: 587: UCHAR tx_addr[]     = { 0xe1, 0xf0, 0xf0, 0xf0, 0xf0 };
      00079D 90 96            [ 1] 1620 	ldw	y, sp
      00079F 72 A9 00 22      [ 2] 1621 	addw	y, #34
      0007A3 A6 E1            [ 1] 1622 	ld	a, #0xe1
      0007A5 90 F7            [ 1] 1623 	ld	(y), a
      0007A7 93               [ 1] 1624 	ldw	x, y
      0007A8 5C               [ 2] 1625 	incw	x
      0007A9 A6 F0            [ 1] 1626 	ld	a, #0xf0
      0007AB F7               [ 1] 1627 	ld	(x), a
      0007AC 93               [ 1] 1628 	ldw	x, y
      0007AD 5C               [ 2] 1629 	incw	x
      0007AE 5C               [ 2] 1630 	incw	x
      0007AF A6 F0            [ 1] 1631 	ld	a, #0xf0
      0007B1 F7               [ 1] 1632 	ld	(x), a
      0007B2 93               [ 1] 1633 	ldw	x, y
      0007B3 A6 F0            [ 1] 1634 	ld	a, #0xf0
      0007B5 E7 03            [ 1] 1635 	ld	(0x0003, x), a
      0007B7 93               [ 1] 1636 	ldw	x, y
      0007B8 1C 00 04         [ 2] 1637 	addw	x, #0x0004
      0007BB A6 F0            [ 1] 1638 	ld	a, #0xf0
      0007BD F7               [ 1] 1639 	ld	(x), a
                                   1640 ;	se8r01-receive-car.c: 592: InitializeSystemClock();
      0007BE CDr01r44         [ 4] 1641 	call	_InitializeSystemClock
                                   1642 ;	se8r01-receive-car.c: 593: InitializeUART();
      0007C1 CDr02r3E         [ 4] 1643 	call	_InitializeUART
                                   1644 ;	se8r01-receive-car.c: 595: InitializeSPI ();
      0007C4 CDr01r1C         [ 4] 1645 	call	_InitializeSPI
                                   1646 ;	se8r01-receive-car.c: 597: UARTPrintF("start debug \n\r");
      0007C7 AEr0Ar5B         [ 2] 1647 	ldw	x, #___str_2+0
      0007CA 89               [ 2] 1648 	pushw	x
      0007CB CDr01rD9         [ 4] 1649 	call	_UARTPrintF
      0007CE 5B 02            [ 2] 1650 	addw	sp, #2
                                   1651 ;	se8r01-receive-car.c: 599: memset (tx_payload, 0, sizeof(tx_payload));
      0007D0 96               [ 1] 1652 	ldw	x, sp
      0007D1 5C               [ 2] 1653 	incw	x
      0007D2 4B 21            [ 1] 1654 	push	#0x21
      0007D4 4B 00            [ 1] 1655 	push	#0x00
      0007D6 4B 00            [ 1] 1656 	push	#0x00
      0007D8 4B 00            [ 1] 1657 	push	#0x00
      0007DA 89               [ 2] 1658 	pushw	x
      0007DB CDr00r00         [ 4] 1659 	call	_memset
      0007DE 5B 06            [ 2] 1660 	addw	sp, #6
                                   1661 ;	se8r01-receive-car.c: 602: init_io();    // Initialize IO port
      0007E0 CDr02rB7         [ 4] 1662 	call	_init_io
                                   1663 ;	se8r01-receive-car.c: 603: write_spi_reg(FLUSH_RX,0); // receive data 
      0007E3 4B 00            [ 1] 1664 	push	#0x00
      0007E5 4B E2            [ 1] 1665 	push	#0xe2
      0007E7 CDr00r2E         [ 4] 1666 	call	_write_spi_reg
      0007EA 5B 02            [ 2] 1667 	addw	sp, #2
                                   1668 ;	se8r01-receive-car.c: 604: readstatus = read_spi_reg(CONFIG);
      0007EC 4B 00            [ 1] 1669 	push	#0x00
      0007EE CDr00r6A         [ 4] 1670 	call	_read_spi_reg
      0007F1 5B 01            [ 2] 1671 	addw	sp, #1
                                   1672 ;	se8r01-receive-car.c: 605: UARTPrintF("config = \n\r");
      0007F3 AEr0Ar6A         [ 2] 1673 	ldw	x, #___str_3+0
      0007F6 88               [ 1] 1674 	push	a
      0007F7 89               [ 2] 1675 	pushw	x
      0007F8 CDr01rD9         [ 4] 1676 	call	_UARTPrintF
      0007FB 5B 02            [ 2] 1677 	addw	sp, #2
      0007FD 84               [ 1] 1678 	pop	a
                                   1679 ;	se8r01-receive-car.c: 606: print_UCHAR_hex(readstatus);
      0007FE 88               [ 1] 1680 	push	a
      0007FF CDr01rF0         [ 4] 1681 	call	_print_UCHAR_hex
      000802 84               [ 1] 1682 	pop	a
                                   1683 ;	se8r01-receive-car.c: 607: readstatus = read_spi_reg(STATUS);
      000803 4B 07            [ 1] 1684 	push	#0x07
      000805 CDr00r6A         [ 4] 1685 	call	_read_spi_reg
      000808 5B 01            [ 2] 1686 	addw	sp, #1
                                   1687 ;	se8r01-receive-car.c: 608: UARTPrintF("status = \n\r");
      00080A AEr0Ar76         [ 2] 1688 	ldw	x, #___str_4+0
      00080D 88               [ 1] 1689 	push	a
      00080E 89               [ 2] 1690 	pushw	x
      00080F CDr01rD9         [ 4] 1691 	call	_UARTPrintF
      000812 5B 02            [ 2] 1692 	addw	sp, #2
      000814 84               [ 1] 1693 	pop	a
                                   1694 ;	se8r01-receive-car.c: 609: print_UCHAR_hex(readstatus);
      000815 88               [ 1] 1695 	push	a
      000816 CDr01rF0         [ 4] 1696 	call	_print_UCHAR_hex
      000819 84               [ 1] 1697 	pop	a
                                   1698 ;	se8r01-receive-car.c: 613: PD_DDR |= (1 << 2) ; // output mode
      00081A AE 50 11         [ 2] 1699 	ldw	x, #0x5011
      00081D F6               [ 1] 1700 	ld	a, (x)
      00081E AA 04            [ 1] 1701 	or	a, #0x04
      000820 F7               [ 1] 1702 	ld	(x), a
                                   1703 ;	se8r01-receive-car.c: 614: PD_CR1 |= (1 << 2) ; // push-pull
      000821 AE 50 12         [ 2] 1704 	ldw	x, #0x5012
      000824 F6               [ 1] 1705 	ld	a, (x)
      000825 AA 04            [ 1] 1706 	or	a, #0x04
      000827 F7               [ 1] 1707 	ld	(x), a
                                   1708 ;	se8r01-receive-car.c: 615: PD_ODR |= (1 << 2);
      000828 AE 50 0F         [ 2] 1709 	ldw	x, #0x500f
      00082B F6               [ 1] 1710 	ld	a, (x)
      00082C AA 04            [ 1] 1711 	or	a, #0x04
      00082E F7               [ 1] 1712 	ld	(x), a
                                   1713 ;	se8r01-receive-car.c: 619: Init_Tim2 (); //pwm on pd4
      00082F CDr07r11         [ 4] 1714 	call	_Init_Tim2
                                   1715 ;	se8r01-receive-car.c: 620: PD_DDR |= (1<<4);
      000832 AE 50 11         [ 2] 1716 	ldw	x, #0x5011
      000835 F6               [ 1] 1717 	ld	a, (x)
      000836 AA 10            [ 1] 1718 	or	a, #0x10
      000838 F7               [ 1] 1719 	ld	(x), a
                                   1720 ;	se8r01-receive-car.c: 621: PD_CR1 |= (1<<4);
      000839 AE 50 12         [ 2] 1721 	ldw	x, #0x5012
      00083C F6               [ 1] 1722 	ld	a, (x)
      00083D AA 10            [ 1] 1723 	or	a, #0x10
      00083F F7               [ 1] 1724 	ld	(x), a
                                   1725 ;	se8r01-receive-car.c: 622: PD_CR2 |= (1<<4);
      000840 AE 50 13         [ 2] 1726 	ldw	x, #0x5013
      000843 F6               [ 1] 1727 	ld	a, (x)
      000844 AA 10            [ 1] 1728 	or	a, #0x10
      000846 F7               [ 1] 1729 	ld	(x), a
                                   1730 ;	se8r01-receive-car.c: 626: PA_DDR |= (1<<3);
      000847 AE 50 02         [ 2] 1731 	ldw	x, #0x5002
      00084A F6               [ 1] 1732 	ld	a, (x)
      00084B AA 08            [ 1] 1733 	or	a, #0x08
      00084D F7               [ 1] 1734 	ld	(x), a
                                   1735 ;	se8r01-receive-car.c: 627: PA_CR1 |= (1<<3);
      00084E AE 50 03         [ 2] 1736 	ldw	x, #0x5003
      000851 F6               [ 1] 1737 	ld	a, (x)
      000852 AA 08            [ 1] 1738 	or	a, #0x08
      000854 F7               [ 1] 1739 	ld	(x), a
                                   1740 ;	se8r01-receive-car.c: 628: PA_CR2 |= (1<<4);
      000855 AE 50 04         [ 2] 1741 	ldw	x, #0x5004
      000858 F6               [ 1] 1742 	ld	a, (x)
      000859 AA 10            [ 1] 1743 	or	a, #0x10
      00085B F7               [ 1] 1744 	ld	(x), a
                                   1745 ;	se8r01-receive-car.c: 629: SE8R01_Init();
      00085C CDr06r2B         [ 4] 1746 	call	_SE8R01_Init
                                   1747 ;	se8r01-receive-car.c: 630: UARTPrintF("timer initialised = \n\r");
      00085F AEr0Ar82         [ 2] 1748 	ldw	x, #___str_5+0
      000862 89               [ 2] 1749 	pushw	x
      000863 CDr01rD9         [ 4] 1750 	call	_UARTPrintF
      000866 5B 02            [ 2] 1751 	addw	sp, #2
                                   1752 ;	se8r01-receive-car.c: 638: PB_DDR |= (1 << 4) | (1 << 5);  // output mode
      000868 AE 50 07         [ 2] 1753 	ldw	x, #0x5007
      00086B F6               [ 1] 1754 	ld	a, (x)
      00086C AA 30            [ 1] 1755 	or	a, #0x30
      00086E F7               [ 1] 1756 	ld	(x), a
                                   1757 ;	se8r01-receive-car.c: 639: PB_CR1 |= (1 << 4) | (1 << 5);  // push-pull
      00086F AE 50 08         [ 2] 1758 	ldw	x, #0x5008
      000872 F6               [ 1] 1759 	ld	a, (x)
      000873 AA 30            [ 1] 1760 	or	a, #0x30
      000875 F7               [ 1] 1761 	ld	(x), a
                                   1762 ;	se8r01-receive-car.c: 640: PB_CR2 |= (1 << 4) | (1 << 5);  // up to 10MHz speed
      000876 AE 50 09         [ 2] 1763 	ldw	x, #0x5009
      000879 F6               [ 1] 1764 	ld	a, (x)
      00087A AA 30            [ 1] 1765 	or	a, #0x30
      00087C F7               [ 1] 1766 	ld	(x), a
                                   1767 ;	se8r01-receive-car.c: 646: PA_DDR |= (1 << 1) | (1 << 2);  // output mode
      00087D AE 50 02         [ 2] 1768 	ldw	x, #0x5002
      000880 F6               [ 1] 1769 	ld	a, (x)
      000881 AA 06            [ 1] 1770 	or	a, #0x06
      000883 F7               [ 1] 1771 	ld	(x), a
                                   1772 ;	se8r01-receive-car.c: 647: PA_CR1 |= (1 << 1) | (1 << 2);  // push-pull
      000884 AE 50 03         [ 2] 1773 	ldw	x, #0x5003
      000887 F6               [ 1] 1774 	ld	a, (x)
      000888 AA 06            [ 1] 1775 	or	a, #0x06
      00088A F7               [ 1] 1776 	ld	(x), a
                                   1777 ;	se8r01-receive-car.c: 648: PA_CR2 |= (1 << 1) | (1 << 2);  // up to 10MHz speed
      00088B AE 50 04         [ 2] 1778 	ldw	x, #0x5004
      00088E F6               [ 1] 1779 	ld	a, (x)
      00088F AA 06            [ 1] 1780 	or	a, #0x06
      000891 F7               [ 1] 1781 	ld	(x), a
                                   1782 ;	se8r01-receive-car.c: 657: PB_ODR |= 1 << 5;
      000892 AE 50 05         [ 2] 1783 	ldw	x, #0x5005
      000895 F6               [ 1] 1784 	ld	a, (x)
      000896 AA 20            [ 1] 1785 	or	a, #0x20
      000898 F7               [ 1] 1786 	ld	(x), a
                                   1787 ;	se8r01-receive-car.c: 662: PA_ODR |= 1 << 1;
      000899 AE 50 00         [ 2] 1788 	ldw	x, #0x5000
      00089C F6               [ 1] 1789 	ld	a, (x)
      00089D AA 02            [ 1] 1790 	or	a, #0x02
      00089F F7               [ 1] 1791 	ld	(x), a
                                   1792 ;	se8r01-receive-car.c: 668: while (1) {
      0008A0                       1793 00113$:
                                   1794 ;	se8r01-receive-car.c: 673: delay(1000);
      0008A0 4B E8            [ 1] 1795 	push	#0xe8
      0008A2 4B 03            [ 1] 1796 	push	#0x03
      0008A4 CDr01r8E         [ 4] 1797 	call	_delay
      0008A7 5B 02            [ 2] 1798 	addw	sp, #2
                                   1799 ;	se8r01-receive-car.c: 678: PD_ODR &= ~(1 << 2); //blink LED
      0008A9 AE 50 0F         [ 2] 1800 	ldw	x, #0x500f
      0008AC F6               [ 1] 1801 	ld	a, (x)
      0008AD A4 FB            [ 1] 1802 	and	a, #0xfb
      0008AF F7               [ 1] 1803 	ld	(x), a
                                   1804 ;	se8r01-receive-car.c: 679: delay(500);
      0008B0 4B F4            [ 1] 1805 	push	#0xf4
      0008B2 4B 01            [ 1] 1806 	push	#0x01
      0008B4 CDr01r8E         [ 4] 1807 	call	_delay
      0008B7 5B 02            [ 2] 1808 	addw	sp, #2
                                   1809 ;	se8r01-receive-car.c: 682: delay(500);
      0008B9 4B F4            [ 1] 1810 	push	#0xf4
      0008BB 4B 01            [ 1] 1811 	push	#0x01
      0008BD CDr01r8E         [ 4] 1812 	call	_delay
      0008C0 5B 02            [ 2] 1813 	addw	sp, #2
                                   1814 ;	se8r01-receive-car.c: 683: if ((PD_IDR & (1 << 3))==0) //input low
      0008C2 AE 50 10         [ 2] 1815 	ldw	x, #0x5010
      0008C5 F6               [ 1] 1816 	ld	a, (x)
      0008C6 A5 08            [ 1] 1817 	bcp	a, #0x08
      0008C8 27 03            [ 1] 1818 	jreq	00181$
      0008CA CCr09rFD         [ 2] 1819 	jp	00108$
      0008CD                       1820 00181$:
                                   1821 ;	se8r01-receive-car.c: 687: delay(240);
      0008CD 4B F0            [ 1] 1822 	push	#0xf0
      0008CF 4B 00            [ 1] 1823 	push	#0x00
      0008D1 CDr01r8E         [ 4] 1824 	call	_delay
      0008D4 5B 02            [ 2] 1825 	addw	sp, #2
                                   1826 ;	se8r01-receive-car.c: 688: signal_lv=read_spi_reg(iRF_BANK0_RPD);
      0008D6 4B 09            [ 1] 1827 	push	#0x09
      0008D8 CDr00r6A         [ 4] 1828 	call	_read_spi_reg
      0008DB 5B 01            [ 2] 1829 	addw	sp, #1
      0008DD C7u00u0A         [ 1] 1830 	ld	_signal_lv+0, a
                                   1831 ;	se8r01-receive-car.c: 689: status = read_spi_reg(STATUS);
      0008E0 4B 07            [ 1] 1832 	push	#0x07
      0008E2 CDr00r6A         [ 4] 1833 	call	_read_spi_reg
      0008E5 5B 01            [ 2] 1834 	addw	sp, #1
      0008E7 C7u00u0D         [ 1] 1835 	ld	_status+0, a
                                   1836 ;	se8r01-receive-car.c: 691: if(status&STA_MARK_RX)                                                 // if receive data ready (TX_DS) interrupt
      0008EA 72 06u00u0D 02   [ 2] 1837 	btjt	_status+0, #6, 00182$
      0008EF 20 57            [ 2] 1838 	jra	00103$
      0008F1                       1839 00182$:
                                   1840 ;	se8r01-receive-car.c: 694: pip= (status & 0b00001110)>>1;
      0008F1 C6u00u0D         [ 1] 1841 	ld	a, _status+0
      0008F4 A4 0E            [ 1] 1842 	and	a, #0x0e
      0008F6 44               [ 1] 1843 	srl	a
      0008F7 5F               [ 1] 1844 	clrw	x
      0008F8 97               [ 1] 1845 	ld	xl, a
      0008F9 CFu00u0B         [ 2] 1846 	ldw	_pip+0, x
                                   1847 ;	se8r01-receive-car.c: 695: pload_width_now=read_spi_reg(iRF_CMD_R_RX_PL_WID);
      0008FC 4B 60            [ 1] 1848 	push	#0x60
      0008FE CDr00r6A         [ 4] 1849 	call	_read_spi_reg
      000901 5B 01            [ 2] 1850 	addw	sp, #1
      000903 5F               [ 1] 1851 	clrw	x
      000904 97               [ 1] 1852 	ld	xl, a
      000905 CFu00u06         [ 2] 1853 	ldw	_pload_width_now+0, x
                                   1854 ;	se8r01-receive-car.c: 696: read_spi_buf(RD_RX_PLOAD, rx_buf,32);             // read playload to rx_buf
      000908 AEr00r1E         [ 2] 1855 	ldw	x, #_rx_buf+0
      00090B 1F 3A            [ 2] 1856 	ldw	(0x3a, sp), x
      00090D 1E 3A            [ 2] 1857 	ldw	x, (0x3a, sp)
      00090F 4B 20            [ 1] 1858 	push	#0x20
      000911 89               [ 2] 1859 	pushw	x
      000912 4B 61            [ 1] 1860 	push	#0x61
      000914 CDr00rE0         [ 4] 1861 	call	_read_spi_buf
      000917 5B 04            [ 2] 1862 	addw	sp, #4
                                   1863 ;	se8r01-receive-car.c: 697: write_spi_reg(FLUSH_RX,0);
      000919 4B 00            [ 1] 1864 	push	#0x00
      00091B 4B E2            [ 1] 1865 	push	#0xe2
      00091D CDr00r2E         [ 4] 1866 	call	_write_spi_reg
      000920 5B 02            [ 2] 1867 	addw	sp, #2
                                   1868 ;	se8r01-receive-car.c: 699: newdata=1;
      000922 35 01u00u09      [ 1] 1869 	mov	_newdata+1, #0x01
      000926 72 5Fu00u08      [ 1] 1870 	clr	_newdata+0
                                   1871 ;	se8r01-receive-car.c: 700: for (teller=0;teller<32;++teller)
      00092A 5F               [ 1] 1872 	clrw	x
      00092B                       1873 00115$:
                                   1874 ;	se8r01-receive-car.c: 701: print_UCHAR_hex (rx_buf[teller]);
      00092B 90 93            [ 1] 1875 	ldw	y, x
      00092D 72 F9 3A         [ 2] 1876 	addw	y, (0x3a, sp)
      000930 90 F6            [ 1] 1877 	ld	a, (y)
      000932 89               [ 2] 1878 	pushw	x
      000933 88               [ 1] 1879 	push	a
      000934 CDr01rF0         [ 4] 1880 	call	_print_UCHAR_hex
      000937 84               [ 1] 1881 	pop	a
      000938 85               [ 2] 1882 	popw	x
                                   1883 ;	se8r01-receive-car.c: 700: for (teller=0;teller<32;++teller)
      000939 5C               [ 2] 1884 	incw	x
      00093A A3 00 20         [ 2] 1885 	cpw	x, #0x0020
      00093D 2F EC            [ 1] 1886 	jrslt	00115$
                                   1887 ;	se8r01-receive-car.c: 702: UARTPrintF("\n\r");
      00093F AEr0Ar99         [ 2] 1888 	ldw	x, #___str_6+0
      000942 89               [ 2] 1889 	pushw	x
      000943 CDr01rD9         [ 4] 1890 	call	_UARTPrintF
      000946 5B 02            [ 2] 1891 	addw	sp, #2
      000948                       1892 00103$:
                                   1893 ;	se8r01-receive-car.c: 705: if (rx_buf[0]==0xac && rx_buf[1]==0xcc) //the first two are a code to only accept these lines
      000948 AEr00r1E         [ 2] 1894 	ldw	x, #_rx_buf+0
      00094B 1F 3C            [ 2] 1895 	ldw	(0x3c, sp), x
      00094D 1E 3C            [ 2] 1896 	ldw	x, (0x3c, sp)
      00094F F6               [ 1] 1897 	ld	a, (x)
      000950 A1 AC            [ 1] 1898 	cp	a, #0xac
      000952 27 03            [ 1] 1899 	jreq	00186$
      000954 CCr09rF3         [ 2] 1900 	jp	00105$
      000957                       1901 00186$:
      000957 1E 3C            [ 2] 1902 	ldw	x, (0x3c, sp)
      000959 E6 01            [ 1] 1903 	ld	a, (0x1, x)
      00095B A1 CC            [ 1] 1904 	cp	a, #0xcc
      00095D 27 03            [ 1] 1905 	jreq	00189$
      00095F CCr09rF3         [ 2] 1906 	jp	00105$
      000962                       1907 00189$:
                                   1908 ;	se8r01-receive-car.c: 707: speed = (unsigned int)rx_buf[2] << 8 | (unsigned int)rx_buf[3];
      000962 1E 3C            [ 2] 1909 	ldw	x, (0x3c, sp)
      000964 E6 02            [ 1] 1910 	ld	a, (0x2, x)
      000966 5F               [ 1] 1911 	clrw	x
      000967 97               [ 1] 1912 	ld	xl, a
      000968 58               [ 2] 1913 	sllw	x
      000969 58               [ 2] 1914 	sllw	x
      00096A 58               [ 2] 1915 	sllw	x
      00096B 58               [ 2] 1916 	sllw	x
      00096C 58               [ 2] 1917 	sllw	x
      00096D 58               [ 2] 1918 	sllw	x
      00096E 58               [ 2] 1919 	sllw	x
      00096F 58               [ 2] 1920 	sllw	x
      000970 16 3C            [ 2] 1921 	ldw	y, (0x3c, sp)
      000972 90 E6 03         [ 1] 1922 	ld	a, (0x3, y)
      000975 0F 32            [ 1] 1923 	clr	(0x32, sp)
      000977 89               [ 2] 1924 	pushw	x
      000978 1A 02            [ 1] 1925 	or	a, (2, sp)
      00097A 85               [ 2] 1926 	popw	x
      00097B 97               [ 1] 1927 	ld	xl, a
      00097C 9E               [ 1] 1928 	ld	a, xh
      00097D 1A 32            [ 1] 1929 	or	a, (0x32, sp)
      00097F 95               [ 1] 1930 	ld	xh, a
                                   1931 ;	se8r01-receive-car.c: 708: TIM2_CCR1H =speed*20/256; //compare capture register value for channel 1
      000980 89               [ 2] 1932 	pushw	x
      000981 4B 14            [ 1] 1933 	push	#0x14
      000983 4B 00            [ 1] 1934 	push	#0x00
      000985 CDr00r00         [ 4] 1935 	call	__mulint
      000988 5B 04            [ 2] 1936 	addw	sp, #4
      00098A 1F 38            [ 2] 1937 	ldw	(0x38, sp), x
      00098C 4B 00            [ 1] 1938 	push	#0x00
      00098E 4B 01            [ 1] 1939 	push	#0x01
      000990 1E 3A            [ 2] 1940 	ldw	x, (0x3a, sp)
      000992 89               [ 2] 1941 	pushw	x
      000993 CDr00r00         [ 4] 1942 	call	__divsint
      000996 5B 04            [ 2] 1943 	addw	sp, #4
      000998 9F               [ 1] 1944 	ld	a, xl
      000999 AE 53 11         [ 2] 1945 	ldw	x, #0x5311
      00099C F7               [ 1] 1946 	ld	(x), a
                                   1947 ;	se8r01-receive-car.c: 709: TIM2_CCR1L =speed*20%256;
      00099D 4B 00            [ 1] 1948 	push	#0x00
      00099F 4B 01            [ 1] 1949 	push	#0x01
      0009A1 1E 3A            [ 2] 1950 	ldw	x, (0x3a, sp)
      0009A3 89               [ 2] 1951 	pushw	x
      0009A4 CDr00r00         [ 4] 1952 	call	__modsint
      0009A7 5B 04            [ 2] 1953 	addw	sp, #4
      0009A9 9F               [ 1] 1954 	ld	a, xl
      0009AA AE 53 12         [ 2] 1955 	ldw	x, #0x5312
      0009AD F7               [ 1] 1956 	ld	(x), a
                                   1957 ;	se8r01-receive-car.c: 712: angle = (unsigned int)rx_buf[4] << 8 | (unsigned int)rx_buf[5];
      0009AE 1E 3C            [ 2] 1958 	ldw	x, (0x3c, sp)
      0009B0 E6 04            [ 1] 1959 	ld	a, (0x4, x)
      0009B2 5F               [ 1] 1960 	clrw	x
      0009B3 97               [ 1] 1961 	ld	xl, a
      0009B4 58               [ 2] 1962 	sllw	x
      0009B5 58               [ 2] 1963 	sllw	x
      0009B6 58               [ 2] 1964 	sllw	x
      0009B7 58               [ 2] 1965 	sllw	x
      0009B8 58               [ 2] 1966 	sllw	x
      0009B9 58               [ 2] 1967 	sllw	x
      0009BA 58               [ 2] 1968 	sllw	x
      0009BB 58               [ 2] 1969 	sllw	x
      0009BC 16 3C            [ 2] 1970 	ldw	y, (0x3c, sp)
      0009BE 90 E6 05         [ 1] 1971 	ld	a, (0x5, y)
      0009C1 0F 36            [ 1] 1972 	clr	(0x36, sp)
      0009C3 89               [ 2] 1973 	pushw	x
      0009C4 1A 02            [ 1] 1974 	or	a, (2, sp)
      0009C6 85               [ 2] 1975 	popw	x
      0009C7 97               [ 1] 1976 	ld	xl, a
      0009C8 9E               [ 1] 1977 	ld	a, xh
      0009C9 1A 36            [ 1] 1978 	or	a, (0x36, sp)
      0009CB 95               [ 1] 1979 	ld	xh, a
                                   1980 ;	se8r01-receive-car.c: 713: TIM2_CCR3H =(1000+angle)/256; //compare capture register value
      0009CC 1C 03 E8         [ 2] 1981 	addw	x, #0x03e8
      0009CF 1F 34            [ 2] 1982 	ldw	(0x34, sp), x
      0009D1 4B 00            [ 1] 1983 	push	#0x00
      0009D3 4B 01            [ 1] 1984 	push	#0x01
      0009D5 1E 36            [ 2] 1985 	ldw	x, (0x36, sp)
      0009D7 89               [ 2] 1986 	pushw	x
      0009D8 CDr00r00         [ 4] 1987 	call	__divsint
      0009DB 5B 04            [ 2] 1988 	addw	sp, #4
      0009DD 9F               [ 1] 1989 	ld	a, xl
      0009DE AE 53 15         [ 2] 1990 	ldw	x, #0x5315
      0009E1 F7               [ 1] 1991 	ld	(x), a
                                   1992 ;	se8r01-receive-car.c: 714: TIM2_CCR3L =(1000+angle)%256;
      0009E2 4B 00            [ 1] 1993 	push	#0x00
      0009E4 4B 01            [ 1] 1994 	push	#0x01
      0009E6 1E 36            [ 2] 1995 	ldw	x, (0x36, sp)
      0009E8 89               [ 2] 1996 	pushw	x
      0009E9 CDr00r00         [ 4] 1997 	call	__modsint
      0009EC 5B 04            [ 2] 1998 	addw	sp, #4
      0009EE 9F               [ 1] 1999 	ld	a, xl
      0009EF AE 53 16         [ 2] 2000 	ldw	x, #0x5316
      0009F2 F7               [ 1] 2001 	ld	(x), a
      0009F3                       2002 00105$:
                                   2003 ;	se8r01-receive-car.c: 716: write_spi_reg(WRITE_REG+STATUS,status);       // clear RX_DR or TX_DS or MAX_RT interrupt flag
      0009F3 3Bu00u0D         [ 1] 2004 	push	_status+0
      0009F6 4B 27            [ 1] 2005 	push	#0x27
      0009F8 CDr00r2E         [ 4] 2006 	call	_write_spi_reg
      0009FB 5B 02            [ 2] 2007 	addw	sp, #2
      0009FD                       2008 00108$:
                                   2009 ;	se8r01-receive-car.c: 721: for (x1 = 0; x1 < 50; ++x1)
      0009FD 5F               [ 1] 2010 	clrw	x
      0009FE 1F 30            [ 2] 2011 	ldw	(0x30, sp), x
      000A00                       2012 00124$:
      000A00 1E 30            [ 2] 2013 	ldw	x, (0x30, sp)
      000A02 A3 00 32         [ 2] 2014 	cpw	x, #0x0032
      000A05 2F 03            [ 1] 2015 	jrslt	00190$
      000A07 CCr08rA0         [ 2] 2016 	jp	00113$
      000A0A                       2017 00190$:
                                   2018 ;	se8r01-receive-car.c: 722: for (y1 = 0; y1 < 50; ++y1)
      000A0A 5F               [ 1] 2019 	clrw	x
      000A0B 1F 2E            [ 2] 2020 	ldw	(0x2e, sp), x
      000A0D                       2021 00121$:
      000A0D 1E 2E            [ 2] 2022 	ldw	x, (0x2e, sp)
      000A0F A3 00 32         [ 2] 2023 	cpw	x, #0x0032
      000A12 2E 19            [ 1] 2024 	jrsge	00125$
                                   2025 ;	se8r01-receive-car.c: 723: for (z1 = 0; z1 < 50; ++z1)
      000A14 5F               [ 1] 2026 	clrw	x
      000A15 1F 2C            [ 2] 2027 	ldw	(0x2c, sp), x
      000A17                       2028 00118$:
      000A17 1E 2C            [ 2] 2029 	ldw	x, (0x2c, sp)
      000A19 A3 00 32         [ 2] 2030 	cpw	x, #0x0032
      000A1C 2E 08            [ 1] 2031 	jrsge	00122$
                                   2032 ;	se8r01-receive-car.c: 724: __asm__("nop");
      000A1E 9D               [ 1] 2033 	nop
                                   2034 ;	se8r01-receive-car.c: 723: for (z1 = 0; z1 < 50; ++z1)
      000A1F 1E 2C            [ 2] 2035 	ldw	x, (0x2c, sp)
      000A21 5C               [ 2] 2036 	incw	x
      000A22 1F 2C            [ 2] 2037 	ldw	(0x2c, sp), x
      000A24 20 F1            [ 2] 2038 	jra	00118$
      000A26                       2039 00122$:
                                   2040 ;	se8r01-receive-car.c: 722: for (y1 = 0; y1 < 50; ++y1)
      000A26 1E 2E            [ 2] 2041 	ldw	x, (0x2e, sp)
      000A28 5C               [ 2] 2042 	incw	x
      000A29 1F 2E            [ 2] 2043 	ldw	(0x2e, sp), x
      000A2B 20 E0            [ 2] 2044 	jra	00121$
      000A2D                       2045 00125$:
                                   2046 ;	se8r01-receive-car.c: 721: for (x1 = 0; x1 < 50; ++x1)
      000A2D 1E 30            [ 2] 2047 	ldw	x, (0x30, sp)
      000A2F 5C               [ 2] 2048 	incw	x
      000A30 1F 30            [ 2] 2049 	ldw	(0x30, sp), x
      000A32 20 CC            [ 2] 2050 	jra	00124$
      000A34 5B 3D            [ 2] 2051 	addw	sp, #61
      000A36 81               [ 4] 2052 	ret
                                   2053 	.area CODE
      000A37                       2054 ___str_0:
      000A37 74 69 6D 65 72 20 69  2055 	.ascii "timer init 1 = "
             6E 69 74 20 31 20 3D
             20
      000A46 0A                    2056 	.db 0x0A
      000A47 0D                    2057 	.db 0x0D
      000A48 00                    2058 	.db 0x00
      000A49                       2059 ___str_1:
      000A49 74 69 6D 65 72 20 69  2060 	.ascii "timer init 2 = "
             6E 69 74 20 32 20 3D
             20
      000A58 0A                    2061 	.db 0x0A
      000A59 0D                    2062 	.db 0x0D
      000A5A 00                    2063 	.db 0x00
      000A5B                       2064 ___str_2:
      000A5B 73 74 61 72 74 20 64  2065 	.ascii "start debug "
             65 62 75 67 20
      000A67 0A                    2066 	.db 0x0A
      000A68 0D                    2067 	.db 0x0D
      000A69 00                    2068 	.db 0x00
      000A6A                       2069 ___str_3:
      000A6A 63 6F 6E 66 69 67 20  2070 	.ascii "config = "
             3D 20
      000A73 0A                    2071 	.db 0x0A
      000A74 0D                    2072 	.db 0x0D
      000A75 00                    2073 	.db 0x00
      000A76                       2074 ___str_4:
      000A76 73 74 61 74 75 73 20  2075 	.ascii "status = "
             3D 20
      000A7F 0A                    2076 	.db 0x0A
      000A80 0D                    2077 	.db 0x0D
      000A81 00                    2078 	.db 0x00
      000A82                       2079 ___str_5:
      000A82 74 69 6D 65 72 20 69  2080 	.ascii "timer initialised = "
             6E 69 74 69 61 6C 69
             73 65 64 20 3D 20
      000A96 0A                    2081 	.db 0x0A
      000A97 0D                    2082 	.db 0x0D
      000A98 00                    2083 	.db 0x00
      000A99                       2084 ___str_6:
      000A99 0A                    2085 	.db 0x0A
      000A9A 0D                    2086 	.db 0x0D
      000A9B 00                    2087 	.db 0x00
                                   2088 	.area INITIALIZER
      000000                       2089 __xinit__SE8R01_DR_2M:
      000000 00 00                 2090 	.dw #0x0000
      000002                       2091 __xinit__SE8R01_DR_1M:
      000002 00 00                 2092 	.dw #0x0000
      000004                       2093 __xinit__SE8R01_DR_500K:
      000004 00 01                 2094 	.dw #0x0001
      000006                       2095 __xinit__pload_width_now:
      000006 00 00                 2096 	.dw #0x0000
      000008                       2097 __xinit__newdata:
      000008 00 00                 2098 	.dw #0x0000
      00000A                       2099 __xinit__signal_lv:
      00000A 00                    2100 	.db #0x00	;  0
      00000B                       2101 __xinit__pip:
      00000B 00 00                 2102 	.dw #0x0000
      00000D                       2103 __xinit__status:
      00000D 00                    2104 	.db #0x00	; 0
      00000E                       2105 __xinit__TX_ADDRESS:
      00000E B3                    2106 	.db #0xB3	; 179
      00000F 43                    2107 	.db #0x43	; 67	'C'
      000010 10                    2108 	.db #0x10	; 16
      000011 10                    2109 	.db #0x10	; 16
      000012                       2110 __xinit__ADDRESS2:
      000012 B1                    2111 	.db #0xB1	; 177
      000013                       2112 __xinit__ADDRESS3:
      000013 B2                    2113 	.db #0xB2	; 178
      000014                       2114 __xinit__ADDRESS4:
      000014 B3                    2115 	.db #0xB3	; 179
      000015                       2116 __xinit__ADDRESS5:
      000015 B4                    2117 	.db #0xB4	; 180
      000016                       2118 __xinit__ADDRESS1:
      000016 B0                    2119 	.db #0xB0	; 176
      000017 43                    2120 	.db #0x43	; 67	'C'
      000018 10                    2121 	.db #0x10	; 16
      000019 10                    2122 	.db #0x10	; 16
      00001A                       2123 __xinit__ADDRESS0:
      00001A 34                    2124 	.db #0x34	; 52	'4'
      00001B 43                    2125 	.db #0x43	; 67	'C'
      00001C 10                    2126 	.db #0x10	; 16
      00001D 10                    2127 	.db #0x10	; 16
      00001E                       2128 __xinit__rx_buf:
      00001E 00                    2129 	.db #0x00	; 0
      00001F 00                    2130 	.db 0x00
      000020 00                    2131 	.db 0x00
      000021 00                    2132 	.db 0x00
      000022 00                    2133 	.db 0x00
      000023 00                    2134 	.db 0x00
      000024 00                    2135 	.db 0x00
      000025 00                    2136 	.db 0x00
      000026 00                    2137 	.db 0x00
      000027 00                    2138 	.db 0x00
      000028 00                    2139 	.db 0x00
      000029 00                    2140 	.db 0x00
      00002A 00                    2141 	.db 0x00
      00002B 00                    2142 	.db 0x00
      00002C 00                    2143 	.db 0x00
      00002D 00                    2144 	.db 0x00
      00002E 00                    2145 	.db 0x00
      00002F 00                    2146 	.db 0x00
      000030 00                    2147 	.db 0x00
      000031 00                    2148 	.db 0x00
      000032 00                    2149 	.db 0x00
      000033 00                    2150 	.db 0x00
      000034 00                    2151 	.db 0x00
      000035 00                    2152 	.db 0x00
      000036 00                    2153 	.db 0x00
      000037 00                    2154 	.db 0x00
      000038 00                    2155 	.db 0x00
      000039 00                    2156 	.db 0x00
      00003A 00                    2157 	.db 0x00
      00003B 00                    2158 	.db 0x00
      00003C 00                    2159 	.db 0x00
      00003D 00                    2160 	.db 0x00
      00003E                       2161 __xinit__tx_buf:
      00003E 00                    2162 	.db #0x00	; 0
      00003F 00                    2163 	.db 0x00
      000040 00                    2164 	.db 0x00
      000041 00                    2165 	.db 0x00
      000042 00                    2166 	.db 0x00
      000043 00                    2167 	.db 0x00
      000044 00                    2168 	.db 0x00
      000045 00                    2169 	.db 0x00
      000046 00                    2170 	.db 0x00
      000047 00                    2171 	.db 0x00
      000048 00                    2172 	.db 0x00
      000049 00                    2173 	.db 0x00
      00004A 00                    2174 	.db 0x00
      00004B 00                    2175 	.db 0x00
      00004C 00                    2176 	.db 0x00
      00004D 00                    2177 	.db 0x00
      00004E 00                    2178 	.db 0x00
      00004F 00                    2179 	.db 0x00
      000050 00                    2180 	.db 0x00
      000051 00                    2181 	.db 0x00
      000052 00                    2182 	.db 0x00
      000053 00                    2183 	.db 0x00
      000054 00                    2184 	.db 0x00
      000055 00                    2185 	.db 0x00
      000056 00                    2186 	.db 0x00
      000057 00                    2187 	.db 0x00
      000058 00                    2188 	.db 0x00
      000059 00                    2189 	.db 0x00
      00005A 00                    2190 	.db 0x00
      00005B 00                    2191 	.db 0x00
      00005C 00                    2192 	.db 0x00
      00005D 00                    2193 	.db 0x00
                                   2194 	.area CABS (ABS)
