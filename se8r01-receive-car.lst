                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Jul 11 2014) (Linux)
                                      4 ; This file was generated Wed Feb  7 10:05:44 2018
                                      5 ;--------------------------------------------------------
                                      6 	.module se8r01_receive_car
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _main
                                     13 	.globl _Init_Tim2
                                     14 	.globl _SE8R01_Init
                                     15 	.globl _SE8R01_Analog_Init
                                     16 	.globl _SE8R01_Calibration
                                     17 	.globl _rf_switch_bank
                                     18 	.globl _init_io
                                     19 	.globl _InitializeUART
                                     20 	.globl _print_UCHAR_hex
                                     21 	.globl _UARTPrintF
                                     22 	.globl _delay
                                     23 	.globl _InitializeSystemClock
                                     24 	.globl _InitializeSPI
                                     25 	.globl _read_spi_buf
                                     26 	.globl _write_spi_buf
                                     27 	.globl _read_spi_reg
                                     28 	.globl _write_spi_reg
                                     29 	.globl _write_spi
                                     30 	.globl _delayTenMicro
                                     31 	.globl _memset
                                     32 	.globl _tx_buf
                                     33 	.globl _rx_buf
                                     34 	.globl _ADDRESS0
                                     35 	.globl _ADDRESS1
                                     36 	.globl _ADDRESS5
                                     37 	.globl _ADDRESS4
                                     38 	.globl _ADDRESS3
                                     39 	.globl _ADDRESS2
                                     40 	.globl _TX_ADDRESS
                                     41 	.globl _status
                                     42 	.globl _pip
                                     43 	.globl _signal_lv
                                     44 	.globl _newdata
                                     45 	.globl _pload_width_now
                                     46 	.globl _SE8R01_DR_500K
                                     47 	.globl _SE8R01_DR_1M
                                     48 	.globl _SE8R01_DR_2M
                                     49 	.globl _myData_pip4
                                     50 	.globl _myData_pip5
                                     51 	.globl _gtemp
                                     52 ;--------------------------------------------------------
                                     53 ; ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area DATA
      000000                         56 _gtemp::
      000000                         57 	.ds 5
      000005                         58 _myData_pip5::
      000005                         59 	.ds 5
      00000A                         60 _myData_pip4::
      00000A                         61 	.ds 5
                                     62 ;--------------------------------------------------------
                                     63 ; ram data
                                     64 ;--------------------------------------------------------
                                     65 	.area INITIALIZED
      000000                         66 _SE8R01_DR_2M::
      000000                         67 	.ds 2
      000002                         68 _SE8R01_DR_1M::
      000002                         69 	.ds 2
      000004                         70 _SE8R01_DR_500K::
      000004                         71 	.ds 2
      000006                         72 _pload_width_now::
      000006                         73 	.ds 2
      000008                         74 _newdata::
      000008                         75 	.ds 2
      00000A                         76 _signal_lv::
      00000A                         77 	.ds 1
      00000B                         78 _pip::
      00000B                         79 	.ds 2
      00000D                         80 _status::
      00000D                         81 	.ds 1
      00000E                         82 _TX_ADDRESS::
      00000E                         83 	.ds 4
      000012                         84 _ADDRESS2::
      000012                         85 	.ds 1
      000013                         86 _ADDRESS3::
      000013                         87 	.ds 1
      000014                         88 _ADDRESS4::
      000014                         89 	.ds 1
      000015                         90 _ADDRESS5::
      000015                         91 	.ds 1
      000016                         92 _ADDRESS1::
      000016                         93 	.ds 4
      00001A                         94 _ADDRESS0::
      00001A                         95 	.ds 4
      00001E                         96 _rx_buf::
      00001E                         97 	.ds 32
      00003E                         98 _tx_buf::
      00003E                         99 	.ds 32
                                    100 ;--------------------------------------------------------
                                    101 ; Stack segment in internal ram 
                                    102 ;--------------------------------------------------------
                                    103 	.area	SSEG
      000000                        104 __start__stack:
      000000                        105 	.ds	1
                                    106 
                                    107 ;--------------------------------------------------------
                                    108 ; absolute external ram data
                                    109 ;--------------------------------------------------------
                                    110 	.area DABS (ABS)
                                    111 ;--------------------------------------------------------
                                    112 ; interrupt vector 
                                    113 ;--------------------------------------------------------
                                    114 	.area HOME
      000000                        115 __interrupt_vect:
      000000 82v00u00u00            116 	int s_GSINIT ;reset
      000004 82 00 00 00            117 	int 0x0000 ;trap
      000008 82 00 00 00            118 	int 0x0000 ;int0
      00000C 82 00 00 00            119 	int 0x0000 ;int1
      000010 82 00 00 00            120 	int 0x0000 ;int2
      000014 82 00 00 00            121 	int 0x0000 ;int3
      000018 82 00 00 00            122 	int 0x0000 ;int4
      00001C 82 00 00 00            123 	int 0x0000 ;int5
      000020 82 00 00 00            124 	int 0x0000 ;int6
      000024 82 00 00 00            125 	int 0x0000 ;int7
      000028 82 00 00 00            126 	int 0x0000 ;int8
      00002C 82 00 00 00            127 	int 0x0000 ;int9
      000030 82 00 00 00            128 	int 0x0000 ;int10
      000034 82 00 00 00            129 	int 0x0000 ;int11
      000038 82 00 00 00            130 	int 0x0000 ;int12
      00003C 82 00 00 00            131 	int 0x0000 ;int13
      000040 82 00 00 00            132 	int 0x0000 ;int14
      000044 82 00 00 00            133 	int 0x0000 ;int15
      000048 82 00 00 00            134 	int 0x0000 ;int16
      00004C 82 00 00 00            135 	int 0x0000 ;int17
      000050 82 00 00 00            136 	int 0x0000 ;int18
      000054 82 00 00 00            137 	int 0x0000 ;int19
      000058 82 00 00 00            138 	int 0x0000 ;int20
      00005C 82 00 00 00            139 	int 0x0000 ;int21
      000060 82 00 00 00            140 	int 0x0000 ;int22
      000064 82 00 00 00            141 	int 0x0000 ;int23
      000068 82 00 00 00            142 	int 0x0000 ;int24
      00006C 82 00 00 00            143 	int 0x0000 ;int25
      000070 82 00 00 00            144 	int 0x0000 ;int26
      000074 82 00 00 00            145 	int 0x0000 ;int27
      000078 82 00 00 00            146 	int 0x0000 ;int28
      00007C 82 00 00 00            147 	int 0x0000 ;int29
                                    148 ;--------------------------------------------------------
                                    149 ; global & static initialisations
                                    150 ;--------------------------------------------------------
                                    151 	.area HOME
                                    152 	.area GSINIT
                                    153 	.area GSFINAL
                                    154 	.area GSINIT
      000000                        155 __sdcc_gs_init_startup:
      000000                        156 __sdcc_init_data:
                                    157 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]  158 	ldw x, #l_DATA
      000003 27 07            [ 1]  159 	jreq	00002$
      000005                        160 00001$:
      000005 72 4FuFFuFF      [ 1]  161 	clr (s_DATA - 1, x)
      000009 5A               [ 2]  162 	decw x
      00000A 26 F9            [ 1]  163 	jrne	00001$
      00000C                        164 00002$:
      00000C AEr00r00         [ 2]  165 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]  166 	jreq	00004$
      000011                        167 00003$:
      000011 D6uFFuFF         [ 1]  168 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]  169 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]  170 	decw	x
      000018 26 F7            [ 1]  171 	jrne	00003$
      00001A                        172 00004$:
                                    173 ; stm8_genXINIT() end
                                    174 	.area GSFINAL
      000000 CCr00r80         [ 2]  175 	jp	__sdcc_program_startup
                                    176 ;--------------------------------------------------------
                                    177 ; Home
                                    178 ;--------------------------------------------------------
                                    179 	.area HOME
                                    180 	.area HOME
      000080                        181 __sdcc_program_startup:
      000080 CCr07r94         [ 2]  182 	jp	_main
                                    183 ;	return from main will return to caller
                                    184 ;--------------------------------------------------------
                                    185 ; code
                                    186 ;--------------------------------------------------------
                                    187 	.area CODE
                                    188 ;	se8r01-receive-car.c: 39: void delayTenMicro (void) {
                                    189 ;	-----------------------------------------
                                    190 ;	 function delayTenMicro
                                    191 ;	-----------------------------------------
      000000                        192 _delayTenMicro:
                                    193 ;	se8r01-receive-car.c: 41: for (a = 0; a < 50; ++a)
      000000 A6 32            [ 1]  194 	ld	a, #0x32
      000002                        195 00104$:
                                    196 ;	se8r01-receive-car.c: 42: __asm__("nop");
      000002 9D               [ 1]  197 	nop
      000003 4A               [ 1]  198 	dec	a
                                    199 ;	se8r01-receive-car.c: 41: for (a = 0; a < 50; ++a)
      000004 4D               [ 1]  200 	tnz	a
      000005 26 FB            [ 1]  201 	jrne	00104$
      000007 81               [ 4]  202 	ret
                                    203 ;	se8r01-receive-car.c: 44: UCHAR write_spi (UCHAR value) {
                                    204 ;	-----------------------------------------
                                    205 ;	 function write_spi
                                    206 ;	-----------------------------------------
      000008                        207 _write_spi:
                                    208 ;	se8r01-receive-car.c: 46: delayTenMicro ();
      000008 CDr00r00         [ 4]  209 	call	_delayTenMicro
                                    210 ;	se8r01-receive-car.c: 47: SPI_DR = value;
      00000B AE 52 04         [ 2]  211 	ldw	x, #0x5204
      00000E 7B 03            [ 1]  212 	ld	a, (0x03, sp)
      000010 F7               [ 1]  213 	ld	(x), a
                                    214 ;	se8r01-receive-car.c: 48: delayTenMicro ();
      000011 CDr00r00         [ 4]  215 	call	_delayTenMicro
                                    216 ;	se8r01-receive-car.c: 49: while ((SPI_SR & TXE) == 0);
      000014                        217 00101$:
      000014 AE 52 03         [ 2]  218 	ldw	x, #0x5203
      000017 F6               [ 1]  219 	ld	a, (x)
      000018 A5 02            [ 1]  220 	bcp	a, #0x02
      00001A 27 F8            [ 1]  221 	jreq	00101$
                                    222 ;	se8r01-receive-car.c: 50: delayTenMicro ();
      00001C CDr00r00         [ 4]  223 	call	_delayTenMicro
                                    224 ;	se8r01-receive-car.c: 51: while ((SPI_SR & RXNE) == 0);
      00001F                        225 00104$:
      00001F AE 52 03         [ 2]  226 	ldw	x, #0x5203
      000022 F6               [ 1]  227 	ld	a, (x)
      000023 44               [ 1]  228 	srl	a
      000024 24 F9            [ 1]  229 	jrnc	00104$
                                    230 ;	se8r01-receive-car.c: 52: delayTenMicro ();
      000026 CDr00r00         [ 4]  231 	call	_delayTenMicro
                                    232 ;	se8r01-receive-car.c: 53: ret = SPI_DR;
      000029 AE 52 04         [ 2]  233 	ldw	x, #0x5204
      00002C F6               [ 1]  234 	ld	a, (x)
                                    235 ;	se8r01-receive-car.c: 54: return (ret);
      00002D 81               [ 4]  236 	ret
                                    237 ;	se8r01-receive-car.c: 56: UCHAR write_spi_reg (UCHAR reg, UCHAR value) {
                                    238 ;	-----------------------------------------
                                    239 ;	 function write_spi_reg
                                    240 ;	-----------------------------------------
      00002E                        241 _write_spi_reg:
      00002E 88               [ 1]  242 	push	a
                                    243 ;	se8r01-receive-car.c: 58: PC_ODR &= ~(1 << CSN);
      00002F AE 50 0A         [ 2]  244 	ldw	x, #0x500a
      000032 F6               [ 1]  245 	ld	a, (x)
      000033 A4 F7            [ 1]  246 	and	a, #0xf7
      000035 F7               [ 1]  247 	ld	(x), a
                                    248 ;	se8r01-receive-car.c: 59: ret = write_spi (reg);
      000036 7B 04            [ 1]  249 	ld	a, (0x04, sp)
      000038 88               [ 1]  250 	push	a
      000039 CDr00r08         [ 4]  251 	call	_write_spi
      00003C 5B 01            [ 2]  252 	addw	sp, #1
      00003E 6B 01            [ 1]  253 	ld	(0x01, sp), a
                                    254 ;	se8r01-receive-car.c: 60: if (reg != NOP && reg != FLUSH_RX && reg != FLUSH_TX)
      000040 7B 04            [ 1]  255 	ld	a, (0x04, sp)
      000042 A1 FF            [ 1]  256 	cp	a, #0xff
      000044 27 15            [ 1]  257 	jreq	00102$
      000046 7B 04            [ 1]  258 	ld	a, (0x04, sp)
      000048 A1 E2            [ 1]  259 	cp	a, #0xe2
      00004A 27 0F            [ 1]  260 	jreq	00102$
      00004C 7B 04            [ 1]  261 	ld	a, (0x04, sp)
      00004E A1 E1            [ 1]  262 	cp	a, #0xe1
      000050 27 09            [ 1]  263 	jreq	00102$
                                    264 ;	se8r01-receive-car.c: 61: write_spi (value);
      000052 7B 05            [ 1]  265 	ld	a, (0x05, sp)
      000054 88               [ 1]  266 	push	a
      000055 CDr00r08         [ 4]  267 	call	_write_spi
      000058 84               [ 1]  268 	pop	a
      000059 20 03            [ 2]  269 	jra	00103$
      00005B                        270 00102$:
                                    271 ;	se8r01-receive-car.c: 63: delayTenMicro ();
      00005B CDr00r00         [ 4]  272 	call	_delayTenMicro
      00005E                        273 00103$:
                                    274 ;	se8r01-receive-car.c: 64: PC_ODR |= (1 << CSN);
      00005E AE 50 0A         [ 2]  275 	ldw	x, #0x500a
      000061 F6               [ 1]  276 	ld	a, (x)
      000062 AA 08            [ 1]  277 	or	a, #0x08
      000064 F7               [ 1]  278 	ld	(x), a
                                    279 ;	se8r01-receive-car.c: 65: return (ret);
      000065 7B 01            [ 1]  280 	ld	a, (0x01, sp)
      000067 5B 01            [ 2]  281 	addw	sp, #1
      000069 81               [ 4]  282 	ret
                                    283 ;	se8r01-receive-car.c: 67: UCHAR read_spi_reg (UCHAR reg) {
                                    284 ;	-----------------------------------------
                                    285 ;	 function read_spi_reg
                                    286 ;	-----------------------------------------
      00006A                        287 _read_spi_reg:
      00006A 88               [ 1]  288 	push	a
                                    289 ;	se8r01-receive-car.c: 69: PC_ODR &= ~(1 << CSN);
      00006B AE 50 0A         [ 2]  290 	ldw	x, #0x500a
      00006E F6               [ 1]  291 	ld	a, (x)
      00006F A4 F7            [ 1]  292 	and	a, #0xf7
      000071 F7               [ 1]  293 	ld	(x), a
                                    294 ;	se8r01-receive-car.c: 70: ret = write_spi (reg);
      000072 7B 04            [ 1]  295 	ld	a, (0x04, sp)
      000074 88               [ 1]  296 	push	a
      000075 CDr00r08         [ 4]  297 	call	_write_spi
      000078 5B 01            [ 2]  298 	addw	sp, #1
      00007A 6B 01            [ 1]  299 	ld	(0x01, sp), a
                                    300 ;	se8r01-receive-car.c: 71: if (reg != NOP && reg != FLUSH_RX && reg != FLUSH_TX)
      00007C 7B 04            [ 1]  301 	ld	a, (0x04, sp)
      00007E A1 FF            [ 1]  302 	cp	a, #0xff
      000080 27 17            [ 1]  303 	jreq	00102$
      000082 7B 04            [ 1]  304 	ld	a, (0x04, sp)
      000084 A1 E2            [ 1]  305 	cp	a, #0xe2
      000086 27 11            [ 1]  306 	jreq	00102$
      000088 7B 04            [ 1]  307 	ld	a, (0x04, sp)
      00008A A1 E1            [ 1]  308 	cp	a, #0xe1
      00008C 27 0B            [ 1]  309 	jreq	00102$
                                    310 ;	se8r01-receive-car.c: 72: ret = write_spi (NOP);
      00008E 4B FF            [ 1]  311 	push	#0xff
      000090 CDr00r08         [ 4]  312 	call	_write_spi
      000093 5B 01            [ 2]  313 	addw	sp, #1
      000095 6B 01            [ 1]  314 	ld	(0x01, sp), a
      000097 20 03            [ 2]  315 	jra	00103$
      000099                        316 00102$:
                                    317 ;	se8r01-receive-car.c: 74: delayTenMicro ();
      000099 CDr00r00         [ 4]  318 	call	_delayTenMicro
      00009C                        319 00103$:
                                    320 ;	se8r01-receive-car.c: 75: PC_ODR |= (1 << CSN);
      00009C AE 50 0A         [ 2]  321 	ldw	x, #0x500a
      00009F F6               [ 1]  322 	ld	a, (x)
      0000A0 AA 08            [ 1]  323 	or	a, #0x08
      0000A2 F7               [ 1]  324 	ld	(x), a
                                    325 ;	se8r01-receive-car.c: 76: return (ret);
      0000A3 7B 01            [ 1]  326 	ld	a, (0x01, sp)
      0000A5 5B 01            [ 2]  327 	addw	sp, #1
      0000A7 81               [ 4]  328 	ret
                                    329 ;	se8r01-receive-car.c: 78: UCHAR write_spi_buf (UCHAR reg, UCHAR *array, UCHAR len) {
                                    330 ;	-----------------------------------------
                                    331 ;	 function write_spi_buf
                                    332 ;	-----------------------------------------
      0000A8                        333 _write_spi_buf:
      0000A8 52 02            [ 2]  334 	sub	sp, #2
                                    335 ;	se8r01-receive-car.c: 80: PC_ODR &= ~(1 << CSN);
      0000AA AE 50 0A         [ 2]  336 	ldw	x, #0x500a
      0000AD F6               [ 1]  337 	ld	a, (x)
      0000AE A4 F7            [ 1]  338 	and	a, #0xf7
      0000B0 F7               [ 1]  339 	ld	(x), a
                                    340 ;	se8r01-receive-car.c: 81: ret = write_spi (reg);
      0000B1 7B 05            [ 1]  341 	ld	a, (0x05, sp)
      0000B3 88               [ 1]  342 	push	a
      0000B4 CDr00r08         [ 4]  343 	call	_write_spi
      0000B7 5B 01            [ 2]  344 	addw	sp, #1
      0000B9 6B 02            [ 1]  345 	ld	(0x02, sp), a
                                    346 ;	se8r01-receive-car.c: 82: for (n = 0; n < len; ++n)
      0000BB 0F 01            [ 1]  347 	clr	(0x01, sp)
      0000BD                        348 00103$:
      0000BD 7B 01            [ 1]  349 	ld	a, (0x01, sp)
      0000BF 11 08            [ 1]  350 	cp	a, (0x08, sp)
      0000C1 24 11            [ 1]  351 	jrnc	00101$
                                    352 ;	se8r01-receive-car.c: 83: write_spi (array[n]);
      0000C3 5F               [ 1]  353 	clrw	x
      0000C4 7B 01            [ 1]  354 	ld	a, (0x01, sp)
      0000C6 97               [ 1]  355 	ld	xl, a
      0000C7 72 FB 06         [ 2]  356 	addw	x, (0x06, sp)
      0000CA F6               [ 1]  357 	ld	a, (x)
      0000CB 88               [ 1]  358 	push	a
      0000CC CDr00r08         [ 4]  359 	call	_write_spi
      0000CF 84               [ 1]  360 	pop	a
                                    361 ;	se8r01-receive-car.c: 82: for (n = 0; n < len; ++n)
      0000D0 0C 01            [ 1]  362 	inc	(0x01, sp)
      0000D2 20 E9            [ 2]  363 	jra	00103$
      0000D4                        364 00101$:
                                    365 ;	se8r01-receive-car.c: 84: PC_ODR |= (1 << CSN);
      0000D4 AE 50 0A         [ 2]  366 	ldw	x, #0x500a
      0000D7 F6               [ 1]  367 	ld	a, (x)
      0000D8 AA 08            [ 1]  368 	or	a, #0x08
      0000DA F7               [ 1]  369 	ld	(x), a
                                    370 ;	se8r01-receive-car.c: 85: return (ret);
      0000DB 7B 02            [ 1]  371 	ld	a, (0x02, sp)
      0000DD 5B 02            [ 2]  372 	addw	sp, #2
      0000DF 81               [ 4]  373 	ret
                                    374 ;	se8r01-receive-car.c: 87: UCHAR read_spi_buf (UCHAR reg, UCHAR *array, UCHAR len) {
                                    375 ;	-----------------------------------------
                                    376 ;	 function read_spi_buf
                                    377 ;	-----------------------------------------
      0000E0                        378 _read_spi_buf:
      0000E0 52 02            [ 2]  379 	sub	sp, #2
                                    380 ;	se8r01-receive-car.c: 89: PC_ODR &= ~(1 << CSN);
      0000E2 AE 50 0A         [ 2]  381 	ldw	x, #0x500a
      0000E5 F6               [ 1]  382 	ld	a, (x)
      0000E6 A4 F7            [ 1]  383 	and	a, #0xf7
      0000E8 F7               [ 1]  384 	ld	(x), a
                                    385 ;	se8r01-receive-car.c: 90: ret = write_spi (reg);
      0000E9 7B 05            [ 1]  386 	ld	a, (0x05, sp)
      0000EB 88               [ 1]  387 	push	a
      0000EC CDr00r08         [ 4]  388 	call	_write_spi
      0000EF 5B 01            [ 2]  389 	addw	sp, #1
      0000F1 6B 01            [ 1]  390 	ld	(0x01, sp), a
                                    391 ;	se8r01-receive-car.c: 91: for (n = 0; n < len; ++n)
      0000F3 0F 02            [ 1]  392 	clr	(0x02, sp)
      0000F5                        393 00103$:
      0000F5 7B 02            [ 1]  394 	ld	a, (0x02, sp)
      0000F7 11 08            [ 1]  395 	cp	a, (0x08, sp)
      0000F9 24 15            [ 1]  396 	jrnc	00101$
                                    397 ;	se8r01-receive-car.c: 92: array[n] = write_spi (NOP);
      0000FB 5F               [ 1]  398 	clrw	x
      0000FC 7B 02            [ 1]  399 	ld	a, (0x02, sp)
      0000FE 97               [ 1]  400 	ld	xl, a
      0000FF 72 FB 06         [ 2]  401 	addw	x, (0x06, sp)
      000102 89               [ 2]  402 	pushw	x
      000103 4B FF            [ 1]  403 	push	#0xff
      000105 CDr00r08         [ 4]  404 	call	_write_spi
      000108 5B 01            [ 2]  405 	addw	sp, #1
      00010A 85               [ 2]  406 	popw	x
      00010B F7               [ 1]  407 	ld	(x), a
                                    408 ;	se8r01-receive-car.c: 91: for (n = 0; n < len; ++n)
      00010C 0C 02            [ 1]  409 	inc	(0x02, sp)
      00010E 20 E5            [ 2]  410 	jra	00103$
      000110                        411 00101$:
                                    412 ;	se8r01-receive-car.c: 93: PC_ODR |= (1 << CSN);
      000110 AE 50 0A         [ 2]  413 	ldw	x, #0x500a
      000113 F6               [ 1]  414 	ld	a, (x)
      000114 AA 08            [ 1]  415 	or	a, #0x08
      000116 F7               [ 1]  416 	ld	(x), a
                                    417 ;	se8r01-receive-car.c: 94: return (ret);
      000117 7B 01            [ 1]  418 	ld	a, (0x01, sp)
      000119 5B 02            [ 2]  419 	addw	sp, #2
      00011B 81               [ 4]  420 	ret
                                    421 ;	se8r01-receive-car.c: 96: void InitializeSPI () {
                                    422 ;	-----------------------------------------
                                    423 ;	 function InitializeSPI
                                    424 ;	-----------------------------------------
      00011C                        425 _InitializeSPI:
                                    426 ;	se8r01-receive-car.c: 97: SPI_CR1 = MSBFIRST | SPI_ENABLE | BR_DIV256 | MASTER | CPOL0 | CPHA0;
      00011C AE 52 00         [ 2]  427 	ldw	x, #0x5200
      00011F A6 7C            [ 1]  428 	ld	a, #0x7c
      000121 F7               [ 1]  429 	ld	(x), a
                                    430 ;	se8r01-receive-car.c: 98: SPI_CR2 = BDM_2LINE | CRCEN_OFF | CRCNEXT_TXBUF | FULL_DUPLEX | SSM_DISABLE;
      000122 AE 52 01         [ 2]  431 	ldw	x, #0x5201
      000125 7F               [ 1]  432 	clr	(x)
                                    433 ;	se8r01-receive-car.c: 99: SPI_ICR = TXIE_MASKED | RXIE_MASKED | ERRIE_MASKED | WKIE_MASKED;
      000126 AE 52 02         [ 2]  434 	ldw	x, #0x5202
      000129 7F               [ 1]  435 	clr	(x)
                                    436 ;	se8r01-receive-car.c: 100: PC_DDR = (1 << PC3) | (1 << PC4); // output mode
      00012A AE 50 0C         [ 2]  437 	ldw	x, #0x500c
      00012D A6 18            [ 1]  438 	ld	a, #0x18
      00012F F7               [ 1]  439 	ld	(x), a
                                    440 ;	se8r01-receive-car.c: 101: PC_CR1 = (1 << PC3) | (1 << PC4); // push-pull
      000130 AE 50 0D         [ 2]  441 	ldw	x, #0x500d
      000133 A6 18            [ 1]  442 	ld	a, #0x18
      000135 F7               [ 1]  443 	ld	(x), a
                                    444 ;	se8r01-receive-car.c: 102: PC_CR2 = (1 << PC3) | (1 << PC4); // up to 10MHz speed
      000136 AE 50 0E         [ 2]  445 	ldw	x, #0x500e
      000139 A6 18            [ 1]  446 	ld	a, #0x18
      00013B F7               [ 1]  447 	ld	(x), a
                                    448 ;	se8r01-receive-car.c: 104: PC_ODR &= ~(1 << CE);
      00013C AE 50 0A         [ 2]  449 	ldw	x, #0x500a
      00013F F6               [ 1]  450 	ld	a, (x)
      000140 A4 EF            [ 1]  451 	and	a, #0xef
      000142 F7               [ 1]  452 	ld	(x), a
      000143 81               [ 4]  453 	ret
                                    454 ;	se8r01-receive-car.c: 106: void InitializeSystemClock() {
                                    455 ;	-----------------------------------------
                                    456 ;	 function InitializeSystemClock
                                    457 ;	-----------------------------------------
      000144                        458 _InitializeSystemClock:
                                    459 ;	se8r01-receive-car.c: 107: CLK_ICKR = 0;                       //  Reset the Internal Clock Register.
      000144 AE 50 C0         [ 2]  460 	ldw	x, #0x50c0
      000147 7F               [ 1]  461 	clr	(x)
                                    462 ;	se8r01-receive-car.c: 108: CLK_ICKR = CLK_HSIEN;               //  Enable the HSI.
      000148 AE 50 C0         [ 2]  463 	ldw	x, #0x50c0
      00014B A6 01            [ 1]  464 	ld	a, #0x01
      00014D F7               [ 1]  465 	ld	(x), a
                                    466 ;	se8r01-receive-car.c: 109: CLK_ECKR = 0;                       //  Disable the external clock.
      00014E AE 50 C1         [ 2]  467 	ldw	x, #0x50c1
      000151 7F               [ 1]  468 	clr	(x)
                                    469 ;	se8r01-receive-car.c: 110: while ((CLK_ICKR & CLK_HSIRDY) == 0);       //  Wait for the HSI to be ready for use.
      000152                        470 00101$:
      000152 AE 50 C0         [ 2]  471 	ldw	x, #0x50c0
      000155 F6               [ 1]  472 	ld	a, (x)
      000156 A5 02            [ 1]  473 	bcp	a, #0x02
      000158 27 F8            [ 1]  474 	jreq	00101$
                                    475 ;	se8r01-receive-car.c: 111: CLK_CKDIVR = 0;                     //  Ensure the clocks are running at full speed.
      00015A AE 50 C6         [ 2]  476 	ldw	x, #0x50c6
      00015D 7F               [ 1]  477 	clr	(x)
                                    478 ;	se8r01-receive-car.c: 112: CLK_PCKENR1 = 0xff;                 //  Enable all peripheral clocks.
      00015E AE 50 C7         [ 2]  479 	ldw	x, #0x50c7
      000161 A6 FF            [ 1]  480 	ld	a, #0xff
      000163 F7               [ 1]  481 	ld	(x), a
                                    482 ;	se8r01-receive-car.c: 113: CLK_PCKENR2 = 0xff;                 //  Ditto.
      000164 AE 50 CA         [ 2]  483 	ldw	x, #0x50ca
      000167 A6 FF            [ 1]  484 	ld	a, #0xff
      000169 F7               [ 1]  485 	ld	(x), a
                                    486 ;	se8r01-receive-car.c: 114: CLK_CCOR = 0;                       //  Turn off CCO.
      00016A AE 50 C9         [ 2]  487 	ldw	x, #0x50c9
      00016D 7F               [ 1]  488 	clr	(x)
                                    489 ;	se8r01-receive-car.c: 115: CLK_HSITRIMR = 0;                   //  Turn off any HSIU trimming.
      00016E AE 50 CC         [ 2]  490 	ldw	x, #0x50cc
      000171 7F               [ 1]  491 	clr	(x)
                                    492 ;	se8r01-receive-car.c: 116: CLK_SWIMCCR = 0;                    //  Set SWIM to run at clock / 2.
      000172 AE 50 CD         [ 2]  493 	ldw	x, #0x50cd
      000175 7F               [ 1]  494 	clr	(x)
                                    495 ;	se8r01-receive-car.c: 117: CLK_SWR = 0xe1;                     //  Use HSI as the clock source.
      000176 AE 50 C4         [ 2]  496 	ldw	x, #0x50c4
      000179 A6 E1            [ 1]  497 	ld	a, #0xe1
      00017B F7               [ 1]  498 	ld	(x), a
                                    499 ;	se8r01-receive-car.c: 118: CLK_SWCR = 0;                       //  Reset the clock switch control register.
      00017C AE 50 C5         [ 2]  500 	ldw	x, #0x50c5
      00017F 7F               [ 1]  501 	clr	(x)
                                    502 ;	se8r01-receive-car.c: 119: CLK_SWCR = CLK_SWEN;                //  Enable switching.
      000180 AE 50 C5         [ 2]  503 	ldw	x, #0x50c5
      000183 A6 02            [ 1]  504 	ld	a, #0x02
      000185 F7               [ 1]  505 	ld	(x), a
                                    506 ;	se8r01-receive-car.c: 120: while ((CLK_SWCR & CLK_SWBSY) != 0);        //  Pause while the clock switch is busy.
      000186                        507 00104$:
      000186 AE 50 C5         [ 2]  508 	ldw	x, #0x50c5
      000189 F6               [ 1]  509 	ld	a, (x)
      00018A 44               [ 1]  510 	srl	a
      00018B 25 F9            [ 1]  511 	jrc	00104$
      00018D 81               [ 4]  512 	ret
                                    513 ;	se8r01-receive-car.c: 122: void delay (int time_ms) {
                                    514 ;	-----------------------------------------
                                    515 ;	 function delay
                                    516 ;	-----------------------------------------
      00018E                        517 _delay:
      00018E 52 0A            [ 2]  518 	sub	sp, #10
                                    519 ;	se8r01-receive-car.c: 124: for (x = 0; x < 1036*time_ms; ++x)
      000190 5F               [ 1]  520 	clrw	x
      000191 1F 03            [ 2]  521 	ldw	(0x03, sp), x
      000193 1F 01            [ 2]  522 	ldw	(0x01, sp), x
      000195 1E 0D            [ 2]  523 	ldw	x, (0x0d, sp)
      000197 89               [ 2]  524 	pushw	x
      000198 4B 0C            [ 1]  525 	push	#0x0c
      00019A 4B 04            [ 1]  526 	push	#0x04
      00019C CDr00r00         [ 4]  527 	call	__mulint
      00019F 5B 04            [ 2]  528 	addw	sp, #4
      0001A1 1F 09            [ 2]  529 	ldw	(0x09, sp), x
      0001A3                        530 00103$:
      0001A3 16 09            [ 2]  531 	ldw	y, (0x09, sp)
      0001A5 17 07            [ 2]  532 	ldw	(0x07, sp), y
      0001A7 7B 07            [ 1]  533 	ld	a, (0x07, sp)
      0001A9 49               [ 1]  534 	rlc	a
      0001AA 4F               [ 1]  535 	clr	a
      0001AB A2 00            [ 1]  536 	sbc	a, #0x00
      0001AD 6B 06            [ 1]  537 	ld	(0x06, sp), a
      0001AF 6B 05            [ 1]  538 	ld	(0x05, sp), a
      0001B1 1E 03            [ 2]  539 	ldw	x, (0x03, sp)
      0001B3 13 07            [ 2]  540 	cpw	x, (0x07, sp)
      0001B5 7B 02            [ 1]  541 	ld	a, (0x02, sp)
      0001B7 12 06            [ 1]  542 	sbc	a, (0x06, sp)
      0001B9 7B 01            [ 1]  543 	ld	a, (0x01, sp)
      0001BB 12 05            [ 1]  544 	sbc	a, (0x05, sp)
      0001BD 2E 17            [ 1]  545 	jrsge	00105$
                                    546 ;	se8r01-receive-car.c: 125: __asm__("nop");
      0001BF 9D               [ 1]  547 	nop
                                    548 ;	se8r01-receive-car.c: 124: for (x = 0; x < 1036*time_ms; ++x)
      0001C0 16 03            [ 2]  549 	ldw	y, (0x03, sp)
      0001C2 72 A9 00 01      [ 2]  550 	addw	y, #0x0001
      0001C6 7B 02            [ 1]  551 	ld	a, (0x02, sp)
      0001C8 A9 00            [ 1]  552 	adc	a, #0x00
      0001CA 97               [ 1]  553 	ld	xl, a
      0001CB 7B 01            [ 1]  554 	ld	a, (0x01, sp)
      0001CD A9 00            [ 1]  555 	adc	a, #0x00
      0001CF 95               [ 1]  556 	ld	xh, a
      0001D0 17 03            [ 2]  557 	ldw	(0x03, sp), y
      0001D2 1F 01            [ 2]  558 	ldw	(0x01, sp), x
      0001D4 20 CD            [ 2]  559 	jra	00103$
      0001D6                        560 00105$:
      0001D6 5B 0A            [ 2]  561 	addw	sp, #10
      0001D8 81               [ 4]  562 	ret
                                    563 ;	se8r01-receive-car.c: 130: void UARTPrintF (char *message) {
                                    564 ;	-----------------------------------------
                                    565 ;	 function UARTPrintF
                                    566 ;	-----------------------------------------
      0001D9                        567 _UARTPrintF:
                                    568 ;	se8r01-receive-car.c: 131: char *ch = message;
      0001D9 16 03            [ 2]  569 	ldw	y, (0x03, sp)
                                    570 ;	se8r01-receive-car.c: 132: while (*ch) {
      0001DB                        571 00104$:
      0001DB 90 F6            [ 1]  572 	ld	a, (y)
      0001DD 4D               [ 1]  573 	tnz	a
      0001DE 27 0F            [ 1]  574 	jreq	00107$
                                    575 ;	se8r01-receive-car.c: 133: UART1_DR = (unsigned char) *ch;     //  Put the next character into the data transmission register.
      0001E0 AE 52 31         [ 2]  576 	ldw	x, #0x5231
      0001E3 F7               [ 1]  577 	ld	(x), a
                                    578 ;	se8r01-receive-car.c: 134: while ((UART1_SR & SR_TXE) == 0);   //  Wait for transmission to complete.
      0001E4                        579 00101$:
      0001E4 AE 52 30         [ 2]  580 	ldw	x, #0x5230
      0001E7 F6               [ 1]  581 	ld	a, (x)
      0001E8 48               [ 1]  582 	sll	a
      0001E9 24 F9            [ 1]  583 	jrnc	00101$
                                    584 ;	se8r01-receive-car.c: 135: ch++;                               //  Grab the next character.
      0001EB 90 5C            [ 2]  585 	incw	y
      0001ED 20 EC            [ 2]  586 	jra	00104$
      0001EF                        587 00107$:
      0001EF 81               [ 4]  588 	ret
                                    589 ;	se8r01-receive-car.c: 138: void print_UCHAR_hex (unsigned char buffer) {
                                    590 ;	-----------------------------------------
                                    591 ;	 function print_UCHAR_hex
                                    592 ;	-----------------------------------------
      0001F0                        593 _print_UCHAR_hex:
      0001F0 52 0C            [ 2]  594 	sub	sp, #12
                                    595 ;	se8r01-receive-car.c: 141: a = (buffer >> 4);
      0001F2 7B 0F            [ 1]  596 	ld	a, (0x0f, sp)
      0001F4 4E               [ 1]  597 	swap	a
      0001F5 A4 0F            [ 1]  598 	and	a, #0x0f
      0001F7 5F               [ 1]  599 	clrw	x
      0001F8 97               [ 1]  600 	ld	xl, a
                                    601 ;	se8r01-receive-car.c: 142: if (a > 9)
      0001F9 A3 00 09         [ 2]  602 	cpw	x, #0x0009
      0001FC 2D 07            [ 1]  603 	jrsle	00102$
                                    604 ;	se8r01-receive-car.c: 143: a = a + 'a' - 10;
      0001FE 1C 00 57         [ 2]  605 	addw	x, #0x0057
      000201 1F 03            [ 2]  606 	ldw	(0x03, sp), x
      000203 20 05            [ 2]  607 	jra	00103$
      000205                        608 00102$:
                                    609 ;	se8r01-receive-car.c: 145: a += '0'; 
      000205 1C 00 30         [ 2]  610 	addw	x, #0x0030
      000208 1F 03            [ 2]  611 	ldw	(0x03, sp), x
      00020A                        612 00103$:
                                    613 ;	se8r01-receive-car.c: 146: b = buffer & 0x0f;
      00020A 7B 0F            [ 1]  614 	ld	a, (0x0f, sp)
      00020C A4 0F            [ 1]  615 	and	a, #0x0f
      00020E 5F               [ 1]  616 	clrw	x
      00020F 97               [ 1]  617 	ld	xl, a
                                    618 ;	se8r01-receive-car.c: 147: if (b > 9)
      000210 A3 00 09         [ 2]  619 	cpw	x, #0x0009
      000213 2D 07            [ 1]  620 	jrsle	00105$
                                    621 ;	se8r01-receive-car.c: 148: b = b + 'a' - 10;
      000215 1C 00 57         [ 2]  622 	addw	x, #0x0057
      000218 1F 01            [ 2]  623 	ldw	(0x01, sp), x
      00021A 20 05            [ 2]  624 	jra	00106$
      00021C                        625 00105$:
                                    626 ;	se8r01-receive-car.c: 150: b += '0'; 
      00021C 1C 00 30         [ 2]  627 	addw	x, #0x0030
      00021F 1F 01            [ 2]  628 	ldw	(0x01, sp), x
      000221                        629 00106$:
                                    630 ;	se8r01-receive-car.c: 151: message[0] = a;
      000221 90 96            [ 1]  631 	ldw	y, sp
      000223 72 A9 00 05      [ 2]  632 	addw	y, #5
      000227 7B 04            [ 1]  633 	ld	a, (0x04, sp)
      000229 90 F7            [ 1]  634 	ld	(y), a
                                    635 ;	se8r01-receive-car.c: 152: message[1] = b;
      00022B 93               [ 1]  636 	ldw	x, y
      00022C 5C               [ 2]  637 	incw	x
      00022D 7B 02            [ 1]  638 	ld	a, (0x02, sp)
      00022F F7               [ 1]  639 	ld	(x), a
                                    640 ;	se8r01-receive-car.c: 153: message[2] = 0;
      000230 93               [ 1]  641 	ldw	x, y
      000231 5C               [ 2]  642 	incw	x
      000232 5C               [ 2]  643 	incw	x
      000233 7F               [ 1]  644 	clr	(x)
                                    645 ;	se8r01-receive-car.c: 154: UARTPrintF (message);
      000234 90 89            [ 2]  646 	pushw	y
      000236 CDr01rD9         [ 4]  647 	call	_UARTPrintF
      000239 5B 02            [ 2]  648 	addw	sp, #2
      00023B 5B 0C            [ 2]  649 	addw	sp, #12
      00023D 81               [ 4]  650 	ret
                                    651 ;	se8r01-receive-car.c: 157: void InitializeUART() {
                                    652 ;	-----------------------------------------
                                    653 ;	 function InitializeUART
                                    654 ;	-----------------------------------------
      00023E                        655 _InitializeUART:
                                    656 ;	se8r01-receive-car.c: 167: UART1_CR1 = 0;
      00023E AE 52 34         [ 2]  657 	ldw	x, #0x5234
      000241 7F               [ 1]  658 	clr	(x)
                                    659 ;	se8r01-receive-car.c: 168: UART1_CR2 = 0;
      000242 AE 52 35         [ 2]  660 	ldw	x, #0x5235
      000245 7F               [ 1]  661 	clr	(x)
                                    662 ;	se8r01-receive-car.c: 169: UART1_CR4 = 0;
      000246 AE 52 37         [ 2]  663 	ldw	x, #0x5237
      000249 7F               [ 1]  664 	clr	(x)
                                    665 ;	se8r01-receive-car.c: 170: UART1_CR3 = 0;
      00024A AE 52 36         [ 2]  666 	ldw	x, #0x5236
      00024D 7F               [ 1]  667 	clr	(x)
                                    668 ;	se8r01-receive-car.c: 171: UART1_CR5 = 0;
      00024E AE 52 38         [ 2]  669 	ldw	x, #0x5238
      000251 7F               [ 1]  670 	clr	(x)
                                    671 ;	se8r01-receive-car.c: 172: UART1_GTR = 0;
      000252 AE 52 39         [ 2]  672 	ldw	x, #0x5239
      000255 7F               [ 1]  673 	clr	(x)
                                    674 ;	se8r01-receive-car.c: 173: UART1_PSCR = 0;
      000256 AE 52 3A         [ 2]  675 	ldw	x, #0x523a
      000259 7F               [ 1]  676 	clr	(x)
                                    677 ;	se8r01-receive-car.c: 177: UNSET (UART1_CR1, CR1_M);        //  8 Data bits.
      00025A AE 52 34         [ 2]  678 	ldw	x, #0x5234
      00025D F6               [ 1]  679 	ld	a, (x)
      00025E A4 EF            [ 1]  680 	and	a, #0xef
      000260 F7               [ 1]  681 	ld	(x), a
                                    682 ;	se8r01-receive-car.c: 178: UNSET (UART1_CR1, CR1_PCEN);     //  Disable parity.
      000261 AE 52 34         [ 2]  683 	ldw	x, #0x5234
      000264 F6               [ 1]  684 	ld	a, (x)
      000265 A4 FB            [ 1]  685 	and	a, #0xfb
      000267 F7               [ 1]  686 	ld	(x), a
                                    687 ;	se8r01-receive-car.c: 179: UNSET (UART1_CR3, CR3_STOPH);    //  1 stop bit.
      000268 AE 52 36         [ 2]  688 	ldw	x, #0x5236
      00026B F6               [ 1]  689 	ld	a, (x)
      00026C A4 DF            [ 1]  690 	and	a, #0xdf
      00026E F7               [ 1]  691 	ld	(x), a
                                    692 ;	se8r01-receive-car.c: 180: UNSET (UART1_CR3, CR3_STOPL);    //  1 stop bit.
      00026F AE 52 36         [ 2]  693 	ldw	x, #0x5236
      000272 F6               [ 1]  694 	ld	a, (x)
      000273 A4 EF            [ 1]  695 	and	a, #0xef
      000275 F7               [ 1]  696 	ld	(x), a
                                    697 ;	se8r01-receive-car.c: 181: UART1_BRR2 = 0x0a;      //  Set the baud rate registers to 115200 baud
      000276 AE 52 33         [ 2]  698 	ldw	x, #0x5233
      000279 A6 0A            [ 1]  699 	ld	a, #0x0a
      00027B F7               [ 1]  700 	ld	(x), a
                                    701 ;	se8r01-receive-car.c: 182: UART1_BRR1 = 0x08;      //  based upon a 16 MHz system clock.
      00027C AE 52 32         [ 2]  702 	ldw	x, #0x5232
      00027F A6 08            [ 1]  703 	ld	a, #0x08
      000281 F7               [ 1]  704 	ld	(x), a
                                    705 ;	se8r01-receive-car.c: 186: UNSET (UART1_CR2, CR2_TEN);      //  Disable transmit.
      000282 AE 52 35         [ 2]  706 	ldw	x, #0x5235
      000285 F6               [ 1]  707 	ld	a, (x)
      000286 A4 F7            [ 1]  708 	and	a, #0xf7
      000288 F7               [ 1]  709 	ld	(x), a
                                    710 ;	se8r01-receive-car.c: 187: UNSET (UART1_CR2, CR2_REN);      //  Disable receive.
      000289 AE 52 35         [ 2]  711 	ldw	x, #0x5235
      00028C F6               [ 1]  712 	ld	a, (x)
      00028D A4 FB            [ 1]  713 	and	a, #0xfb
      00028F F7               [ 1]  714 	ld	(x), a
                                    715 ;	se8r01-receive-car.c: 191: SET (UART1_CR3, CR3_CPOL);
      000290 AE 52 36         [ 2]  716 	ldw	x, #0x5236
      000293 F6               [ 1]  717 	ld	a, (x)
      000294 AA 04            [ 1]  718 	or	a, #0x04
      000296 F7               [ 1]  719 	ld	(x), a
                                    720 ;	se8r01-receive-car.c: 192: SET (UART1_CR3, CR3_CPHA);
      000297 AE 52 36         [ 2]  721 	ldw	x, #0x5236
      00029A F6               [ 1]  722 	ld	a, (x)
      00029B AA 02            [ 1]  723 	or	a, #0x02
      00029D F7               [ 1]  724 	ld	(x), a
                                    725 ;	se8r01-receive-car.c: 193: SET (UART1_CR3, CR3_LBCL);
      00029E 72 10 52 36      [ 1]  726 	bset	0x5236, #0
                                    727 ;	se8r01-receive-car.c: 197: SET (UART1_CR2, CR2_TEN);
      0002A2 AE 52 35         [ 2]  728 	ldw	x, #0x5235
      0002A5 F6               [ 1]  729 	ld	a, (x)
      0002A6 AA 08            [ 1]  730 	or	a, #0x08
      0002A8 F7               [ 1]  731 	ld	(x), a
                                    732 ;	se8r01-receive-car.c: 198: SET (UART1_CR2, CR2_REN);
      0002A9 AE 52 35         [ 2]  733 	ldw	x, #0x5235
      0002AC F6               [ 1]  734 	ld	a, (x)
      0002AD AA 04            [ 1]  735 	or	a, #0x04
      0002AF F7               [ 1]  736 	ld	(x), a
                                    737 ;	se8r01-receive-car.c: 199: UART1_CR3 = CR3_CLKEN;
      0002B0 AE 52 36         [ 2]  738 	ldw	x, #0x5236
      0002B3 A6 08            [ 1]  739 	ld	a, #0x08
      0002B5 F7               [ 1]  740 	ld	(x), a
      0002B6 81               [ 4]  741 	ret
                                    742 ;	se8r01-receive-car.c: 272: void init_io(void)
                                    743 ;	-----------------------------------------
                                    744 ;	 function init_io
                                    745 ;	-----------------------------------------
      0002B7                        746 _init_io:
                                    747 ;	se8r01-receive-car.c: 274: PD_DDR &= ~(1 << 3); // input mode
      0002B7 AE 50 11         [ 2]  748 	ldw	x, #0x5011
      0002BA F6               [ 1]  749 	ld	a, (x)
      0002BB A4 F7            [ 1]  750 	and	a, #0xf7
      0002BD F7               [ 1]  751 	ld	(x), a
                                    752 ;	se8r01-receive-car.c: 275: PD_CR1 |= (1 << 3); // input with pull up 
      0002BE AE 50 12         [ 2]  753 	ldw	x, #0x5012
      0002C1 F6               [ 1]  754 	ld	a, (x)
      0002C2 AA 08            [ 1]  755 	or	a, #0x08
      0002C4 F7               [ 1]  756 	ld	(x), a
                                    757 ;	se8r01-receive-car.c: 276: PD_CR2 |= (1 << 3); // interrupt enabled 
      0002C5 AE 50 13         [ 2]  758 	ldw	x, #0x5013
      0002C8 F6               [ 1]  759 	ld	a, (x)
      0002C9 AA 08            [ 1]  760 	or	a, #0x08
      0002CB F7               [ 1]  761 	ld	(x), a
                                    762 ;	se8r01-receive-car.c: 280: PC_ODR &= ~(1 << CE);
      0002CC AE 50 0A         [ 2]  763 	ldw	x, #0x500a
      0002CF F6               [ 1]  764 	ld	a, (x)
      0002D0 A4 EF            [ 1]  765 	and	a, #0xef
      0002D2 F7               [ 1]  766 	ld	(x), a
                                    767 ;	se8r01-receive-car.c: 282: PC_ODR |= (1 << CSN);
      0002D3 AE 50 0A         [ 2]  768 	ldw	x, #0x500a
      0002D6 F6               [ 1]  769 	ld	a, (x)
      0002D7 AA 08            [ 1]  770 	or	a, #0x08
      0002D9 F7               [ 1]  771 	ld	(x), a
      0002DA 81               [ 4]  772 	ret
                                    773 ;	se8r01-receive-car.c: 288: void rf_switch_bank(unsigned char bankindex)
                                    774 ;	-----------------------------------------
                                    775 ;	 function rf_switch_bank
                                    776 ;	-----------------------------------------
      0002DB                        777 _rf_switch_bank:
      0002DB 88               [ 1]  778 	push	a
                                    779 ;	se8r01-receive-car.c: 291: temp1 = bankindex;
      0002DC 7B 04            [ 1]  780 	ld	a, (0x04, sp)
      0002DE 6B 01            [ 1]  781 	ld	(0x01, sp), a
                                    782 ;	se8r01-receive-car.c: 293: temp0 = write_spi(iRF_BANK0_STATUS);
      0002E0 4B 07            [ 1]  783 	push	#0x07
      0002E2 CDr00r08         [ 4]  784 	call	_write_spi
      0002E5 5B 01            [ 2]  785 	addw	sp, #1
                                    786 ;	se8r01-receive-car.c: 295: if((temp0&0x80)!=temp1)
      0002E7 A4 80            [ 1]  787 	and	a, #0x80
      0002E9 11 01            [ 1]  788 	cp	a, (0x01, sp)
      0002EB 27 09            [ 1]  789 	jreq	00103$
                                    790 ;	se8r01-receive-car.c: 297: write_spi_reg(iRF_CMD_ACTIVATE,0x53);
      0002ED 4B 53            [ 1]  791 	push	#0x53
      0002EF 4B 50            [ 1]  792 	push	#0x50
      0002F1 CDr00r2E         [ 4]  793 	call	_write_spi_reg
      0002F4 5B 02            [ 2]  794 	addw	sp, #2
      0002F6                        795 00103$:
      0002F6 84               [ 1]  796 	pop	a
      0002F7 81               [ 4]  797 	ret
                                    798 ;	se8r01-receive-car.c: 304: void SE8R01_Calibration()
                                    799 ;	-----------------------------------------
                                    800 ;	 function SE8R01_Calibration
                                    801 ;	-----------------------------------------
      0002F8                        802 _SE8R01_Calibration:
      0002F8 52 0D            [ 2]  803 	sub	sp, #13
                                    804 ;	se8r01-receive-car.c: 307: rf_switch_bank(iBANK0);
      0002FA 4B 00            [ 1]  805 	push	#0x00
      0002FC CDr02rDB         [ 4]  806 	call	_rf_switch_bank
      0002FF 84               [ 1]  807 	pop	a
                                    808 ;	se8r01-receive-car.c: 308: temp[0]=0x03;
      000300 96               [ 1]  809 	ldw	x, sp
      000301 5C               [ 2]  810 	incw	x
      000302 1F 0C            [ 2]  811 	ldw	(0x0c, sp), x
      000304 1E 0C            [ 2]  812 	ldw	x, (0x0c, sp)
      000306 A6 03            [ 1]  813 	ld	a, #0x03
      000308 F7               [ 1]  814 	ld	(x), a
                                    815 ;	se8r01-receive-car.c: 309: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_CONFIG,temp, 1);
      000309 1E 0C            [ 2]  816 	ldw	x, (0x0c, sp)
      00030B 4B 01            [ 1]  817 	push	#0x01
      00030D 89               [ 2]  818 	pushw	x
      00030E 4B 20            [ 1]  819 	push	#0x20
      000310 CDr00rA8         [ 4]  820 	call	_write_spi_buf
      000313 5B 04            [ 2]  821 	addw	sp, #4
                                    822 ;	se8r01-receive-car.c: 311: temp[0]=0x32;
      000315 1E 0C            [ 2]  823 	ldw	x, (0x0c, sp)
      000317 A6 32            [ 1]  824 	ld	a, #0x32
      000319 F7               [ 1]  825 	ld	(x), a
                                    826 ;	se8r01-receive-car.c: 313: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_RF_CH, temp,1);
      00031A 1E 0C            [ 2]  827 	ldw	x, (0x0c, sp)
      00031C 4B 01            [ 1]  828 	push	#0x01
      00031E 89               [ 2]  829 	pushw	x
      00031F 4B 25            [ 1]  830 	push	#0x25
      000321 CDr00rA8         [ 4]  831 	call	_write_spi_buf
      000324 5B 04            [ 2]  832 	addw	sp, #4
                                    833 ;	se8r01-receive-car.c: 317: if (SE8R01_DR_2M==1)
      000326 CEu00u00         [ 2]  834 	ldw	x, _SE8R01_DR_2M+0
      000329 A3 00 01         [ 2]  835 	cpw	x, #0x0001
      00032C 26 07            [ 1]  836 	jrne	00105$
                                    837 ;	se8r01-receive-car.c: 318: {temp[0]=0x48;}
      00032E 1E 0C            [ 2]  838 	ldw	x, (0x0c, sp)
      000330 A6 48            [ 1]  839 	ld	a, #0x48
      000332 F7               [ 1]  840 	ld	(x), a
      000333 20 14            [ 2]  841 	jra	00106$
      000335                        842 00105$:
                                    843 ;	se8r01-receive-car.c: 319: else if (SE8R01_DR_1M==1)
      000335 CEu00u02         [ 2]  844 	ldw	x, _SE8R01_DR_1M+0
      000338 A3 00 01         [ 2]  845 	cpw	x, #0x0001
      00033B 26 07            [ 1]  846 	jrne	00102$
                                    847 ;	se8r01-receive-car.c: 320: {temp[0]=0x40;}
      00033D 1E 0C            [ 2]  848 	ldw	x, (0x0c, sp)
      00033F A6 40            [ 1]  849 	ld	a, #0x40
      000341 F7               [ 1]  850 	ld	(x), a
      000342 20 05            [ 2]  851 	jra	00106$
      000344                        852 00102$:
                                    853 ;	se8r01-receive-car.c: 322: {temp[0]=0x68;}   
      000344 1E 0C            [ 2]  854 	ldw	x, (0x0c, sp)
      000346 A6 68            [ 1]  855 	ld	a, #0x68
      000348 F7               [ 1]  856 	ld	(x), a
      000349                        857 00106$:
                                    858 ;	se8r01-receive-car.c: 324: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_RF_SETUP,temp,1);
      000349 1E 0C            [ 2]  859 	ldw	x, (0x0c, sp)
      00034B 4B 01            [ 1]  860 	push	#0x01
      00034D 89               [ 2]  861 	pushw	x
      00034E 4B 26            [ 1]  862 	push	#0x26
      000350 CDr00rA8         [ 4]  863 	call	_write_spi_buf
      000353 5B 04            [ 2]  864 	addw	sp, #4
                                    865 ;	se8r01-receive-car.c: 325: temp[0]=0x77;
      000355 1E 0C            [ 2]  866 	ldw	x, (0x0c, sp)
      000357 A6 77            [ 1]  867 	ld	a, #0x77
      000359 F7               [ 1]  868 	ld	(x), a
                                    869 ;	se8r01-receive-car.c: 326: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_PRE_GURD, temp,1);
      00035A 1E 0C            [ 2]  870 	ldw	x, (0x0c, sp)
      00035C 4B 01            [ 1]  871 	push	#0x01
      00035E 89               [ 2]  872 	pushw	x
      00035F 4B 3F            [ 1]  873 	push	#0x3f
      000361 CDr00rA8         [ 4]  874 	call	_write_spi_buf
      000364 5B 04            [ 2]  875 	addw	sp, #4
                                    876 ;	se8r01-receive-car.c: 328: rf_switch_bank(iBANK1);
      000366 4B 80            [ 1]  877 	push	#0x80
      000368 CDr02rDB         [ 4]  878 	call	_rf_switch_bank
      00036B 84               [ 1]  879 	pop	a
                                    880 ;	se8r01-receive-car.c: 329: temp[0]=0x40;
      00036C 1E 0C            [ 2]  881 	ldw	x, (0x0c, sp)
      00036E A6 40            [ 1]  882 	ld	a, #0x40
      000370 F7               [ 1]  883 	ld	(x), a
                                    884 ;	se8r01-receive-car.c: 330: temp[1]=0x00;
      000371 1E 0C            [ 2]  885 	ldw	x, (0x0c, sp)
      000373 5C               [ 2]  886 	incw	x
      000374 1F 0A            [ 2]  887 	ldw	(0x0a, sp), x
      000376 1E 0A            [ 2]  888 	ldw	x, (0x0a, sp)
      000378 7F               [ 1]  889 	clr	(x)
                                    890 ;	se8r01-receive-car.c: 331: temp[2]=0x10;
      000379 1E 0C            [ 2]  891 	ldw	x, (0x0c, sp)
      00037B 5C               [ 2]  892 	incw	x
      00037C 5C               [ 2]  893 	incw	x
      00037D 1F 06            [ 2]  894 	ldw	(0x06, sp), x
      00037F 1E 06            [ 2]  895 	ldw	x, (0x06, sp)
      000381 A6 10            [ 1]  896 	ld	a, #0x10
      000383 F7               [ 1]  897 	ld	(x), a
                                    898 ;	se8r01-receive-car.c: 333: {temp[3]=0xE6;}
      000384 1E 0C            [ 2]  899 	ldw	x, (0x0c, sp)
      000386 1C 00 03         [ 2]  900 	addw	x, #0x0003
      000389 1F 08            [ 2]  901 	ldw	(0x08, sp), x
                                    902 ;	se8r01-receive-car.c: 332: if (SE8R01_DR_2M==1)
      00038B CEu00u00         [ 2]  903 	ldw	x, _SE8R01_DR_2M+0
      00038E A3 00 01         [ 2]  904 	cpw	x, #0x0001
      000391 26 07            [ 1]  905 	jrne	00108$
                                    906 ;	se8r01-receive-car.c: 333: {temp[3]=0xE6;}
      000393 1E 08            [ 2]  907 	ldw	x, (0x08, sp)
      000395 A6 E6            [ 1]  908 	ld	a, #0xe6
      000397 F7               [ 1]  909 	ld	(x), a
      000398 20 05            [ 2]  910 	jra	00109$
      00039A                        911 00108$:
                                    912 ;	se8r01-receive-car.c: 335: {temp[3]=0xE4;}
      00039A 1E 08            [ 2]  913 	ldw	x, (0x08, sp)
      00039C A6 E4            [ 1]  914 	ld	a, #0xe4
      00039E F7               [ 1]  915 	ld	(x), a
      00039F                        916 00109$:
                                    917 ;	se8r01-receive-car.c: 337: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_PLL_CTL0, temp, 4);
      00039F 1E 0C            [ 2]  918 	ldw	x, (0x0c, sp)
      0003A1 4B 04            [ 1]  919 	push	#0x04
      0003A3 89               [ 2]  920 	pushw	x
      0003A4 4B 21            [ 1]  921 	push	#0x21
      0003A6 CDr00rA8         [ 4]  922 	call	_write_spi_buf
      0003A9 5B 04            [ 2]  923 	addw	sp, #4
                                    924 ;	se8r01-receive-car.c: 339: temp[0]=0x20;
      0003AB 1E 0C            [ 2]  925 	ldw	x, (0x0c, sp)
      0003AD A6 20            [ 1]  926 	ld	a, #0x20
      0003AF F7               [ 1]  927 	ld	(x), a
                                    928 ;	se8r01-receive-car.c: 340: temp[1]=0x08;
      0003B0 1E 0A            [ 2]  929 	ldw	x, (0x0a, sp)
      0003B2 A6 08            [ 1]  930 	ld	a, #0x08
      0003B4 F7               [ 1]  931 	ld	(x), a
                                    932 ;	se8r01-receive-car.c: 341: temp[2]=0x50;
      0003B5 1E 06            [ 2]  933 	ldw	x, (0x06, sp)
      0003B7 A6 50            [ 1]  934 	ld	a, #0x50
      0003B9 F7               [ 1]  935 	ld	(x), a
                                    936 ;	se8r01-receive-car.c: 342: temp[3]=0x40;
      0003BA 1E 08            [ 2]  937 	ldw	x, (0x08, sp)
      0003BC A6 40            [ 1]  938 	ld	a, #0x40
      0003BE F7               [ 1]  939 	ld	(x), a
                                    940 ;	se8r01-receive-car.c: 343: temp[4]=0x50;
      0003BF 1E 0C            [ 2]  941 	ldw	x, (0x0c, sp)
      0003C1 A6 50            [ 1]  942 	ld	a, #0x50
      0003C3 E7 04            [ 1]  943 	ld	(0x0004, x), a
                                    944 ;	se8r01-receive-car.c: 344: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_CAL_CTL, temp, 5);
      0003C5 1E 0C            [ 2]  945 	ldw	x, (0x0c, sp)
      0003C7 4B 05            [ 1]  946 	push	#0x05
      0003C9 89               [ 2]  947 	pushw	x
      0003CA 4B 23            [ 1]  948 	push	#0x23
      0003CC CDr00rA8         [ 4]  949 	call	_write_spi_buf
      0003CF 5B 04            [ 2]  950 	addw	sp, #4
                                    951 ;	se8r01-receive-car.c: 346: temp[0]=0x00;
      0003D1 1E 0C            [ 2]  952 	ldw	x, (0x0c, sp)
      0003D3 7F               [ 1]  953 	clr	(x)
                                    954 ;	se8r01-receive-car.c: 347: temp[1]=0x00;
      0003D4 1E 0A            [ 2]  955 	ldw	x, (0x0a, sp)
      0003D6 7F               [ 1]  956 	clr	(x)
                                    957 ;	se8r01-receive-car.c: 348: if (SE8R01_DR_2M==1)
      0003D7 CEu00u00         [ 2]  958 	ldw	x, _SE8R01_DR_2M+0
      0003DA A3 00 01         [ 2]  959 	cpw	x, #0x0001
      0003DD 26 07            [ 1]  960 	jrne	00111$
                                    961 ;	se8r01-receive-car.c: 349: { temp[2]=0x1E;}
      0003DF 1E 06            [ 2]  962 	ldw	x, (0x06, sp)
      0003E1 A6 1E            [ 1]  963 	ld	a, #0x1e
      0003E3 F7               [ 1]  964 	ld	(x), a
      0003E4 20 05            [ 2]  965 	jra	00112$
      0003E6                        966 00111$:
                                    967 ;	se8r01-receive-car.c: 351: { temp[2]=0x1F;}
      0003E6 1E 06            [ 2]  968 	ldw	x, (0x06, sp)
      0003E8 A6 1F            [ 1]  969 	ld	a, #0x1f
      0003EA F7               [ 1]  970 	ld	(x), a
      0003EB                        971 00112$:
                                    972 ;	se8r01-receive-car.c: 353: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_IF_FREQ, temp, 3);
      0003EB 1E 0C            [ 2]  973 	ldw	x, (0x0c, sp)
      0003ED 4B 03            [ 1]  974 	push	#0x03
      0003EF 89               [ 2]  975 	pushw	x
      0003F0 4B 2A            [ 1]  976 	push	#0x2a
      0003F2 CDr00rA8         [ 4]  977 	call	_write_spi_buf
      0003F5 5B 04            [ 2]  978 	addw	sp, #4
                                    979 ;	se8r01-receive-car.c: 355: if (SE8R01_DR_2M==1)
      0003F7 CEu00u00         [ 2]  980 	ldw	x, _SE8R01_DR_2M+0
      0003FA A3 00 01         [ 2]  981 	cpw	x, #0x0001
      0003FD 26 07            [ 1]  982 	jrne	00114$
                                    983 ;	se8r01-receive-car.c: 356: { temp[0]=0x29;}
      0003FF 1E 0C            [ 2]  984 	ldw	x, (0x0c, sp)
      000401 A6 29            [ 1]  985 	ld	a, #0x29
      000403 F7               [ 1]  986 	ld	(x), a
      000404 20 05            [ 2]  987 	jra	00115$
      000406                        988 00114$:
                                    989 ;	se8r01-receive-car.c: 358: { temp[0]=0x14;}
      000406 1E 0C            [ 2]  990 	ldw	x, (0x0c, sp)
      000408 A6 14            [ 1]  991 	ld	a, #0x14
      00040A F7               [ 1]  992 	ld	(x), a
      00040B                        993 00115$:
                                    994 ;	se8r01-receive-car.c: 360: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_FDEV, temp, 1);
      00040B 1E 0C            [ 2]  995 	ldw	x, (0x0c, sp)
      00040D 4B 01            [ 1]  996 	push	#0x01
      00040F 89               [ 2]  997 	pushw	x
      000410 4B 2C            [ 1]  998 	push	#0x2c
      000412 CDr00rA8         [ 4]  999 	call	_write_spi_buf
      000415 5B 04            [ 2] 1000 	addw	sp, #4
                                   1001 ;	se8r01-receive-car.c: 362: temp[0]=0x00;
      000417 1E 0C            [ 2] 1002 	ldw	x, (0x0c, sp)
      000419 7F               [ 1] 1003 	clr	(x)
                                   1004 ;	se8r01-receive-car.c: 363: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_DAC_CAL_LOW,temp,1);
      00041A 1E 0C            [ 2] 1005 	ldw	x, (0x0c, sp)
      00041C 4B 01            [ 1] 1006 	push	#0x01
      00041E 89               [ 2] 1007 	pushw	x
      00041F 4B 37            [ 1] 1008 	push	#0x37
      000421 CDr00rA8         [ 4] 1009 	call	_write_spi_buf
      000424 5B 04            [ 2] 1010 	addw	sp, #4
                                   1011 ;	se8r01-receive-car.c: 365: temp[0]=0x7F;
      000426 1E 0C            [ 2] 1012 	ldw	x, (0x0c, sp)
      000428 A6 7F            [ 1] 1013 	ld	a, #0x7f
      00042A F7               [ 1] 1014 	ld	(x), a
                                   1015 ;	se8r01-receive-car.c: 366: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_DAC_CAL_HI,temp,1);
      00042B 1E 0C            [ 2] 1016 	ldw	x, (0x0c, sp)
      00042D 4B 01            [ 1] 1017 	push	#0x01
      00042F 89               [ 2] 1018 	pushw	x
      000430 4B 38            [ 1] 1019 	push	#0x38
      000432 CDr00rA8         [ 4] 1020 	call	_write_spi_buf
      000435 5B 04            [ 2] 1021 	addw	sp, #4
                                   1022 ;	se8r01-receive-car.c: 368: temp[0]=0x02;
      000437 1E 0C            [ 2] 1023 	ldw	x, (0x0c, sp)
      000439 A6 02            [ 1] 1024 	ld	a, #0x02
      00043B F7               [ 1] 1025 	ld	(x), a
                                   1026 ;	se8r01-receive-car.c: 369: temp[1]=0xC1;
      00043C 1E 0A            [ 2] 1027 	ldw	x, (0x0a, sp)
      00043E A6 C1            [ 1] 1028 	ld	a, #0xc1
      000440 F7               [ 1] 1029 	ld	(x), a
                                   1030 ;	se8r01-receive-car.c: 370: temp[2]=0xEB;            
      000441 1E 06            [ 2] 1031 	ldw	x, (0x06, sp)
      000443 A6 EB            [ 1] 1032 	ld	a, #0xeb
      000445 F7               [ 1] 1033 	ld	(x), a
                                   1034 ;	se8r01-receive-car.c: 371: temp[3]=0x1C;
      000446 1E 08            [ 2] 1035 	ldw	x, (0x08, sp)
      000448 A6 1C            [ 1] 1036 	ld	a, #0x1c
      00044A F7               [ 1] 1037 	ld	(x), a
                                   1038 ;	se8r01-receive-car.c: 372: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_AGC_GAIN, temp,4);
      00044B 1E 0C            [ 2] 1039 	ldw	x, (0x0c, sp)
      00044D 4B 04            [ 1] 1040 	push	#0x04
      00044F 89               [ 2] 1041 	pushw	x
      000450 4B 3D            [ 1] 1042 	push	#0x3d
      000452 CDr00rA8         [ 4] 1043 	call	_write_spi_buf
      000455 5B 04            [ 2] 1044 	addw	sp, #4
                                   1045 ;	se8r01-receive-car.c: 374: temp[0]=0x97;
      000457 1E 0C            [ 2] 1046 	ldw	x, (0x0c, sp)
      000459 A6 97            [ 1] 1047 	ld	a, #0x97
      00045B F7               [ 1] 1048 	ld	(x), a
                                   1049 ;	se8r01-receive-car.c: 375: temp[1]=0x64;
      00045C 1E 0A            [ 2] 1050 	ldw	x, (0x0a, sp)
      00045E A6 64            [ 1] 1051 	ld	a, #0x64
      000460 F7               [ 1] 1052 	ld	(x), a
                                   1053 ;	se8r01-receive-car.c: 376: temp[2]=0x00;
      000461 1E 06            [ 2] 1054 	ldw	x, (0x06, sp)
      000463 7F               [ 1] 1055 	clr	(x)
                                   1056 ;	se8r01-receive-car.c: 377: temp[3]=0x81;
      000464 1E 08            [ 2] 1057 	ldw	x, (0x08, sp)
      000466 A6 81            [ 1] 1058 	ld	a, #0x81
      000468 F7               [ 1] 1059 	ld	(x), a
                                   1060 ;	se8r01-receive-car.c: 378: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_RF_IVGEN, temp, 4);
      000469 1E 0C            [ 2] 1061 	ldw	x, (0x0c, sp)
      00046B 4B 04            [ 1] 1062 	push	#0x04
      00046D 89               [ 2] 1063 	pushw	x
      00046E 4B 3E            [ 1] 1064 	push	#0x3e
      000470 CDr00rA8         [ 4] 1065 	call	_write_spi_buf
      000473 5B 04            [ 2] 1066 	addw	sp, #4
                                   1067 ;	se8r01-receive-car.c: 379: rf_switch_bank(iBANK0);
      000475 4B 00            [ 1] 1068 	push	#0x00
      000477 CDr02rDB         [ 4] 1069 	call	_rf_switch_bank
      00047A 84               [ 1] 1070 	pop	a
                                   1071 ;	se8r01-receive-car.c: 384: delayTenMicro();
      00047B CDr00r00         [ 4] 1072 	call	_delayTenMicro
                                   1073 ;	se8r01-receive-car.c: 385: PC_ODR |= (1 << CE);
      00047E AE 50 0A         [ 2] 1074 	ldw	x, #0x500a
      000481 F6               [ 1] 1075 	ld	a, (x)
      000482 AA 10            [ 1] 1076 	or	a, #0x10
      000484 F7               [ 1] 1077 	ld	(x), a
                                   1078 ;	se8r01-receive-car.c: 386: delayTenMicro();
      000485 CDr00r00         [ 4] 1079 	call	_delayTenMicro
                                   1080 ;	se8r01-receive-car.c: 387: delayTenMicro();
      000488 CDr00r00         [ 4] 1081 	call	_delayTenMicro
                                   1082 ;	se8r01-receive-car.c: 388: delayTenMicro();
      00048B CDr00r00         [ 4] 1083 	call	_delayTenMicro
                                   1084 ;	se8r01-receive-car.c: 389: PC_ODR &= ~(1 << CE);
      00048E AE 50 0A         [ 2] 1085 	ldw	x, #0x500a
      000491 F6               [ 1] 1086 	ld	a, (x)
      000492 A4 EF            [ 1] 1087 	and	a, #0xef
      000494 F7               [ 1] 1088 	ld	(x), a
                                   1089 ;	se8r01-receive-car.c: 390: delay(50);                            // delay 50ms waitting for calibaration.
      000495 4B 32            [ 1] 1090 	push	#0x32
      000497 4B 00            [ 1] 1091 	push	#0x00
      000499 CDr01r8E         [ 4] 1092 	call	_delay
      00049C 5B 02            [ 2] 1093 	addw	sp, #2
                                   1094 ;	se8r01-receive-car.c: 395: delayTenMicro();
      00049E CDr00r00         [ 4] 1095 	call	_delayTenMicro
                                   1096 ;	se8r01-receive-car.c: 396: PC_ODR |= (1 << CE);
      0004A1 AE 50 0A         [ 2] 1097 	ldw	x, #0x500a
      0004A4 F6               [ 1] 1098 	ld	a, (x)
      0004A5 AA 10            [ 1] 1099 	or	a, #0x10
      0004A7 F7               [ 1] 1100 	ld	(x), a
                                   1101 ;	se8r01-receive-car.c: 397: delayTenMicro();
      0004A8 CDr00r00         [ 4] 1102 	call	_delayTenMicro
                                   1103 ;	se8r01-receive-car.c: 398: delayTenMicro();
      0004AB CDr00r00         [ 4] 1104 	call	_delayTenMicro
                                   1105 ;	se8r01-receive-car.c: 399: delayTenMicro();
      0004AE CDr00r00         [ 4] 1106 	call	_delayTenMicro
                                   1107 ;	se8r01-receive-car.c: 400: PC_ODR &= ~(1 << CE);
      0004B1 AE 50 0A         [ 2] 1108 	ldw	x, #0x500a
      0004B4 F6               [ 1] 1109 	ld	a, (x)
      0004B5 A4 EF            [ 1] 1110 	and	a, #0xef
      0004B7 F7               [ 1] 1111 	ld	(x), a
                                   1112 ;	se8r01-receive-car.c: 401: delay(50);                            // delay 50ms waitting for calibaration.
      0004B8 4B 32            [ 1] 1113 	push	#0x32
      0004BA 4B 00            [ 1] 1114 	push	#0x00
      0004BC CDr01r8E         [ 4] 1115 	call	_delay
      0004BF 5B 02            [ 2] 1116 	addw	sp, #2
      0004C1 5B 0D            [ 2] 1117 	addw	sp, #13
      0004C3 81               [ 4] 1118 	ret
                                   1119 ;	se8r01-receive-car.c: 405: void SE8R01_Analog_Init()           //SE8R01 初始化
                                   1120 ;	-----------------------------------------
                                   1121 ;	 function SE8R01_Analog_Init
                                   1122 ;	-----------------------------------------
      0004C4                       1123 _SE8R01_Analog_Init:
      0004C4 52 15            [ 2] 1124 	sub	sp, #21
                                   1125 ;	se8r01-receive-car.c: 410: gtemp[0]=0x28;
      0004C6 AEr00r00         [ 2] 1126 	ldw	x, #_gtemp+0
      0004C9 1F 14            [ 2] 1127 	ldw	(0x14, sp), x
      0004CB 1E 14            [ 2] 1128 	ldw	x, (0x14, sp)
      0004CD A6 28            [ 1] 1129 	ld	a, #0x28
      0004CF F7               [ 1] 1130 	ld	(x), a
                                   1131 ;	se8r01-receive-car.c: 411: gtemp[1]=0x32;
      0004D0 1E 14            [ 2] 1132 	ldw	x, (0x14, sp)
      0004D2 5C               [ 2] 1133 	incw	x
      0004D3 1F 12            [ 2] 1134 	ldw	(0x12, sp), x
      0004D5 1E 12            [ 2] 1135 	ldw	x, (0x12, sp)
      0004D7 A6 32            [ 1] 1136 	ld	a, #0x32
      0004D9 F7               [ 1] 1137 	ld	(x), a
                                   1138 ;	se8r01-receive-car.c: 412: gtemp[2]=0x80;
      0004DA 1E 14            [ 2] 1139 	ldw	x, (0x14, sp)
      0004DC 5C               [ 2] 1140 	incw	x
      0004DD 5C               [ 2] 1141 	incw	x
      0004DE 1F 10            [ 2] 1142 	ldw	(0x10, sp), x
      0004E0 1E 10            [ 2] 1143 	ldw	x, (0x10, sp)
      0004E2 A6 80            [ 1] 1144 	ld	a, #0x80
      0004E4 F7               [ 1] 1145 	ld	(x), a
                                   1146 ;	se8r01-receive-car.c: 413: gtemp[3]=0x90;
      0004E5 1E 14            [ 2] 1147 	ldw	x, (0x14, sp)
      0004E7 1C 00 03         [ 2] 1148 	addw	x, #0x0003
      0004EA 1F 0E            [ 2] 1149 	ldw	(0x0e, sp), x
      0004EC 1E 0E            [ 2] 1150 	ldw	x, (0x0e, sp)
      0004EE A6 90            [ 1] 1151 	ld	a, #0x90
      0004F0 F7               [ 1] 1152 	ld	(x), a
                                   1153 ;	se8r01-receive-car.c: 414: gtemp[4]=0x00;
      0004F1 1E 14            [ 2] 1154 	ldw	x, (0x14, sp)
      0004F3 1C 00 04         [ 2] 1155 	addw	x, #0x0004
      0004F6 7F               [ 1] 1156 	clr	(x)
                                   1157 ;	se8r01-receive-car.c: 415: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_SETUP_VALUE, gtemp, 5);
      0004F7 1E 14            [ 2] 1158 	ldw	x, (0x14, sp)
      0004F9 4B 05            [ 1] 1159 	push	#0x05
      0004FB 89               [ 2] 1160 	pushw	x
      0004FC 4B 3E            [ 1] 1161 	push	#0x3e
      0004FE CDr00rA8         [ 4] 1162 	call	_write_spi_buf
      000501 5B 04            [ 2] 1163 	addw	sp, #4
                                   1164 ;	se8r01-receive-car.c: 416: delay(2);
      000503 4B 02            [ 1] 1165 	push	#0x02
      000505 4B 00            [ 1] 1166 	push	#0x00
      000507 CDr01r8E         [ 4] 1167 	call	_delay
      00050A 5B 02            [ 2] 1168 	addw	sp, #2
                                   1169 ;	se8r01-receive-car.c: 419: rf_switch_bank(iBANK1);
      00050C 4B 80            [ 1] 1170 	push	#0x80
      00050E CDr02rDB         [ 4] 1171 	call	_rf_switch_bank
      000511 84               [ 1] 1172 	pop	a
                                   1173 ;	se8r01-receive-car.c: 421: temp[0]=0x40;
      000512 96               [ 1] 1174 	ldw	x, sp
      000513 5C               [ 2] 1175 	incw	x
      000514 1F 0C            [ 2] 1176 	ldw	(0x0c, sp), x
      000516 1E 0C            [ 2] 1177 	ldw	x, (0x0c, sp)
      000518 A6 40            [ 1] 1178 	ld	a, #0x40
      00051A F7               [ 1] 1179 	ld	(x), a
                                   1180 ;	se8r01-receive-car.c: 422: temp[1]=0x01;               
      00051B 1E 0C            [ 2] 1181 	ldw	x, (0x0c, sp)
      00051D 5C               [ 2] 1182 	incw	x
      00051E 1F 0A            [ 2] 1183 	ldw	(0x0a, sp), x
      000520 1E 0A            [ 2] 1184 	ldw	x, (0x0a, sp)
      000522 A6 01            [ 1] 1185 	ld	a, #0x01
      000524 F7               [ 1] 1186 	ld	(x), a
                                   1187 ;	se8r01-receive-car.c: 423: temp[2]=0x30;               
      000525 1E 0C            [ 2] 1188 	ldw	x, (0x0c, sp)
      000527 5C               [ 2] 1189 	incw	x
      000528 5C               [ 2] 1190 	incw	x
      000529 1F 08            [ 2] 1191 	ldw	(0x08, sp), x
      00052B 1E 08            [ 2] 1192 	ldw	x, (0x08, sp)
      00052D A6 30            [ 1] 1193 	ld	a, #0x30
      00052F F7               [ 1] 1194 	ld	(x), a
                                   1195 ;	se8r01-receive-car.c: 425: { temp[3]=0xE2; }              
      000530 1E 0C            [ 2] 1196 	ldw	x, (0x0c, sp)
      000532 1C 00 03         [ 2] 1197 	addw	x, #0x0003
      000535 1F 06            [ 2] 1198 	ldw	(0x06, sp), x
                                   1199 ;	se8r01-receive-car.c: 424: if (SE8R01_DR_2M==1)
      000537 CEu00u00         [ 2] 1200 	ldw	x, _SE8R01_DR_2M+0
      00053A A3 00 01         [ 2] 1201 	cpw	x, #0x0001
      00053D 26 07            [ 1] 1202 	jrne	00102$
                                   1203 ;	se8r01-receive-car.c: 425: { temp[3]=0xE2; }              
      00053F 1E 06            [ 2] 1204 	ldw	x, (0x06, sp)
      000541 A6 E2            [ 1] 1205 	ld	a, #0xe2
      000543 F7               [ 1] 1206 	ld	(x), a
      000544 20 05            [ 2] 1207 	jra	00103$
      000546                       1208 00102$:
                                   1209 ;	se8r01-receive-car.c: 427: { temp[3]=0xE0;}
      000546 1E 06            [ 2] 1210 	ldw	x, (0x06, sp)
      000548 A6 E0            [ 1] 1211 	ld	a, #0xe0
      00054A F7               [ 1] 1212 	ld	(x), a
      00054B                       1213 00103$:
                                   1214 ;	se8r01-receive-car.c: 429: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_PLL_CTL0, temp,4);
      00054B 1E 0C            [ 2] 1215 	ldw	x, (0x0c, sp)
      00054D 4B 04            [ 1] 1216 	push	#0x04
      00054F 89               [ 2] 1217 	pushw	x
      000550 4B 21            [ 1] 1218 	push	#0x21
      000552 CDr00rA8         [ 4] 1219 	call	_write_spi_buf
      000555 5B 04            [ 2] 1220 	addw	sp, #4
                                   1221 ;	se8r01-receive-car.c: 431: temp[0]=0x29;
      000557 1E 0C            [ 2] 1222 	ldw	x, (0x0c, sp)
      000559 A6 29            [ 1] 1223 	ld	a, #0x29
      00055B F7               [ 1] 1224 	ld	(x), a
                                   1225 ;	se8r01-receive-car.c: 432: temp[1]=0x89;
      00055C 1E 0A            [ 2] 1226 	ldw	x, (0x0a, sp)
      00055E A6 89            [ 1] 1227 	ld	a, #0x89
      000560 F7               [ 1] 1228 	ld	(x), a
                                   1229 ;	se8r01-receive-car.c: 433: temp[2]=0x55;                     
      000561 1E 08            [ 2] 1230 	ldw	x, (0x08, sp)
      000563 A6 55            [ 1] 1231 	ld	a, #0x55
      000565 F7               [ 1] 1232 	ld	(x), a
                                   1233 ;	se8r01-receive-car.c: 434: temp[3]=0x40;
      000566 1E 06            [ 2] 1234 	ldw	x, (0x06, sp)
      000568 A6 40            [ 1] 1235 	ld	a, #0x40
      00056A F7               [ 1] 1236 	ld	(x), a
                                   1237 ;	se8r01-receive-car.c: 435: temp[4]=0x50;
      00056B 1E 0C            [ 2] 1238 	ldw	x, (0x0c, sp)
      00056D A6 50            [ 1] 1239 	ld	a, #0x50
      00056F E7 04            [ 1] 1240 	ld	(0x0004, x), a
                                   1241 ;	se8r01-receive-car.c: 436: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_CAL_CTL, temp,5);
      000571 1E 0C            [ 2] 1242 	ldw	x, (0x0c, sp)
      000573 4B 05            [ 1] 1243 	push	#0x05
      000575 89               [ 2] 1244 	pushw	x
      000576 4B 23            [ 1] 1245 	push	#0x23
      000578 CDr00rA8         [ 4] 1246 	call	_write_spi_buf
      00057B 5B 04            [ 2] 1247 	addw	sp, #4
                                   1248 ;	se8r01-receive-car.c: 438: if (SE8R01_DR_2M==1)
      00057D CEu00u00         [ 2] 1249 	ldw	x, _SE8R01_DR_2M+0
      000580 A3 00 01         [ 2] 1250 	cpw	x, #0x0001
      000583 26 07            [ 1] 1251 	jrne	00105$
                                   1252 ;	se8r01-receive-car.c: 439: { temp[0]=0x29;}
      000585 1E 0C            [ 2] 1253 	ldw	x, (0x0c, sp)
      000587 A6 29            [ 1] 1254 	ld	a, #0x29
      000589 F7               [ 1] 1255 	ld	(x), a
      00058A 20 05            [ 2] 1256 	jra	00106$
      00058C                       1257 00105$:
                                   1258 ;	se8r01-receive-car.c: 441: { temp[0]=0x14;}
      00058C 1E 0C            [ 2] 1259 	ldw	x, (0x0c, sp)
      00058E A6 14            [ 1] 1260 	ld	a, #0x14
      000590 F7               [ 1] 1261 	ld	(x), a
      000591                       1262 00106$:
                                   1263 ;	se8r01-receive-car.c: 443: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_FDEV, temp,1);
      000591 1E 0C            [ 2] 1264 	ldw	x, (0x0c, sp)
      000593 4B 01            [ 1] 1265 	push	#0x01
      000595 89               [ 2] 1266 	pushw	x
      000596 4B 2C            [ 1] 1267 	push	#0x2c
      000598 CDr00rA8         [ 4] 1268 	call	_write_spi_buf
      00059B 5B 04            [ 2] 1269 	addw	sp, #4
                                   1270 ;	se8r01-receive-car.c: 445: temp[0]=0x55;
      00059D 1E 0C            [ 2] 1271 	ldw	x, (0x0c, sp)
      00059F A6 55            [ 1] 1272 	ld	a, #0x55
      0005A1 F7               [ 1] 1273 	ld	(x), a
                                   1274 ;	se8r01-receive-car.c: 446: temp[1]=0xC2;
      0005A2 1E 0A            [ 2] 1275 	ldw	x, (0x0a, sp)
      0005A4 A6 C2            [ 1] 1276 	ld	a, #0xc2
      0005A6 F7               [ 1] 1277 	ld	(x), a
                                   1278 ;	se8r01-receive-car.c: 447: temp[2]=0x09;
      0005A7 1E 08            [ 2] 1279 	ldw	x, (0x08, sp)
      0005A9 A6 09            [ 1] 1280 	ld	a, #0x09
      0005AB F7               [ 1] 1281 	ld	(x), a
                                   1282 ;	se8r01-receive-car.c: 448: temp[3]=0xAC;  
      0005AC 1E 06            [ 2] 1283 	ldw	x, (0x06, sp)
      0005AE A6 AC            [ 1] 1284 	ld	a, #0xac
      0005B0 F7               [ 1] 1285 	ld	(x), a
                                   1286 ;	se8r01-receive-car.c: 449: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_RX_CTRL,temp,4);
      0005B1 1E 0C            [ 2] 1287 	ldw	x, (0x0c, sp)
      0005B3 4B 04            [ 1] 1288 	push	#0x04
      0005B5 89               [ 2] 1289 	pushw	x
      0005B6 4B 31            [ 1] 1290 	push	#0x31
      0005B8 CDr00rA8         [ 4] 1291 	call	_write_spi_buf
      0005BB 5B 04            [ 2] 1292 	addw	sp, #4
                                   1293 ;	se8r01-receive-car.c: 451: temp[0]=0x00;
      0005BD 1E 0C            [ 2] 1294 	ldw	x, (0x0c, sp)
      0005BF 7F               [ 1] 1295 	clr	(x)
                                   1296 ;	se8r01-receive-car.c: 452: temp[1]=0x14;
      0005C0 1E 0A            [ 2] 1297 	ldw	x, (0x0a, sp)
      0005C2 A6 14            [ 1] 1298 	ld	a, #0x14
      0005C4 F7               [ 1] 1299 	ld	(x), a
                                   1300 ;	se8r01-receive-car.c: 453: temp[2]=0x08;   
      0005C5 1E 08            [ 2] 1301 	ldw	x, (0x08, sp)
      0005C7 A6 08            [ 1] 1302 	ld	a, #0x08
      0005C9 F7               [ 1] 1303 	ld	(x), a
                                   1304 ;	se8r01-receive-car.c: 454: temp[3]=0x29;
      0005CA 1E 06            [ 2] 1305 	ldw	x, (0x06, sp)
      0005CC A6 29            [ 1] 1306 	ld	a, #0x29
      0005CE F7               [ 1] 1307 	ld	(x), a
                                   1308 ;	se8r01-receive-car.c: 455: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_FAGC_CTRL_1, temp,4);
      0005CF 1E 0C            [ 2] 1309 	ldw	x, (0x0c, sp)
      0005D1 4B 04            [ 1] 1310 	push	#0x04
      0005D3 89               [ 2] 1311 	pushw	x
      0005D4 4B 33            [ 1] 1312 	push	#0x33
      0005D6 CDr00rA8         [ 4] 1313 	call	_write_spi_buf
      0005D9 5B 04            [ 2] 1314 	addw	sp, #4
                                   1315 ;	se8r01-receive-car.c: 457: temp[0]=0x02;
      0005DB 1E 0C            [ 2] 1316 	ldw	x, (0x0c, sp)
      0005DD A6 02            [ 1] 1317 	ld	a, #0x02
      0005DF F7               [ 1] 1318 	ld	(x), a
                                   1319 ;	se8r01-receive-car.c: 458: temp[1]=0xC1;
      0005E0 1E 0A            [ 2] 1320 	ldw	x, (0x0a, sp)
      0005E2 A6 C1            [ 1] 1321 	ld	a, #0xc1
      0005E4 F7               [ 1] 1322 	ld	(x), a
                                   1323 ;	se8r01-receive-car.c: 459: temp[2]=0xCB;  
      0005E5 1E 08            [ 2] 1324 	ldw	x, (0x08, sp)
      0005E7 A6 CB            [ 1] 1325 	ld	a, #0xcb
      0005E9 F7               [ 1] 1326 	ld	(x), a
                                   1327 ;	se8r01-receive-car.c: 460: temp[3]=0x1C;
      0005EA 1E 06            [ 2] 1328 	ldw	x, (0x06, sp)
      0005EC A6 1C            [ 1] 1329 	ld	a, #0x1c
      0005EE F7               [ 1] 1330 	ld	(x), a
                                   1331 ;	se8r01-receive-car.c: 461: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_AGC_GAIN, temp,4);
      0005EF 1E 0C            [ 2] 1332 	ldw	x, (0x0c, sp)
      0005F1 4B 04            [ 1] 1333 	push	#0x04
      0005F3 89               [ 2] 1334 	pushw	x
      0005F4 4B 3D            [ 1] 1335 	push	#0x3d
      0005F6 CDr00rA8         [ 4] 1336 	call	_write_spi_buf
      0005F9 5B 04            [ 2] 1337 	addw	sp, #4
                                   1338 ;	se8r01-receive-car.c: 463: temp[0]=0x97;
      0005FB 1E 0C            [ 2] 1339 	ldw	x, (0x0c, sp)
      0005FD A6 97            [ 1] 1340 	ld	a, #0x97
      0005FF F7               [ 1] 1341 	ld	(x), a
                                   1342 ;	se8r01-receive-car.c: 464: temp[1]=0x64;
      000600 1E 0A            [ 2] 1343 	ldw	x, (0x0a, sp)
      000602 A6 64            [ 1] 1344 	ld	a, #0x64
      000604 F7               [ 1] 1345 	ld	(x), a
                                   1346 ;	se8r01-receive-car.c: 465: temp[2]=0x00;
      000605 1E 08            [ 2] 1347 	ldw	x, (0x08, sp)
      000607 7F               [ 1] 1348 	clr	(x)
                                   1349 ;	se8r01-receive-car.c: 466: temp[3]=0x01;
      000608 1E 06            [ 2] 1350 	ldw	x, (0x06, sp)
      00060A A6 01            [ 1] 1351 	ld	a, #0x01
      00060C F7               [ 1] 1352 	ld	(x), a
                                   1353 ;	se8r01-receive-car.c: 467: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_RF_IVGEN, temp,4);
      00060D 1E 0C            [ 2] 1354 	ldw	x, (0x0c, sp)
      00060F 4B 04            [ 1] 1355 	push	#0x04
      000611 89               [ 2] 1356 	pushw	x
      000612 4B 3E            [ 1] 1357 	push	#0x3e
      000614 CDr00rA8         [ 4] 1358 	call	_write_spi_buf
      000617 5B 04            [ 2] 1359 	addw	sp, #4
                                   1360 ;	se8r01-receive-car.c: 469: gtemp[0]=0x2A;
      000619 1E 14            [ 2] 1361 	ldw	x, (0x14, sp)
      00061B A6 2A            [ 1] 1362 	ld	a, #0x2a
      00061D F7               [ 1] 1363 	ld	(x), a
                                   1364 ;	se8r01-receive-car.c: 470: gtemp[1]=0x04;
      00061E 1E 12            [ 2] 1365 	ldw	x, (0x12, sp)
      000620 A6 04            [ 1] 1366 	ld	a, #0x04
      000622 F7               [ 1] 1367 	ld	(x), a
                                   1368 ;	se8r01-receive-car.c: 471: gtemp[2]=0x00;
      000623 1E 10            [ 2] 1369 	ldw	x, (0x10, sp)
      000625 7F               [ 1] 1370 	clr	(x)
                                   1371 ;	se8r01-receive-car.c: 472: gtemp[3]=0x7D;
      000626 1E 0E            [ 2] 1372 	ldw	x, (0x0e, sp)
      000628 A6 7D            [ 1] 1373 	ld	a, #0x7d
      00062A F7               [ 1] 1374 	ld	(x), a
                                   1375 ;	se8r01-receive-car.c: 473: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_TEST_PKDET, gtemp, 4);
      00062B 1E 14            [ 2] 1376 	ldw	x, (0x14, sp)
      00062D 4B 04            [ 1] 1377 	push	#0x04
      00062F 89               [ 2] 1378 	pushw	x
      000630 4B 3F            [ 1] 1379 	push	#0x3f
      000632 CDr00rA8         [ 4] 1380 	call	_write_spi_buf
      000635 5B 04            [ 2] 1381 	addw	sp, #4
                                   1382 ;	se8r01-receive-car.c: 475: rf_switch_bank(iBANK0);
      000637 4B 00            [ 1] 1383 	push	#0x00
      000639 CDr02rDB         [ 4] 1384 	call	_rf_switch_bank
      00063C 84               [ 1] 1385 	pop	a
      00063D 5B 15            [ 2] 1386 	addw	sp, #21
      00063F 81               [ 4] 1387 	ret
                                   1388 ;	se8r01-receive-car.c: 478: void SE8R01_Init()  
                                   1389 ;	-----------------------------------------
                                   1390 ;	 function SE8R01_Init
                                   1391 ;	-----------------------------------------
      000640                       1392 _SE8R01_Init:
      000640 52 05            [ 2] 1393 	sub	sp, #5
                                   1394 ;	se8r01-receive-car.c: 481: SE8R01_Calibration();   
      000642 CDr02rF8         [ 4] 1395 	call	_SE8R01_Calibration
                                   1396 ;	se8r01-receive-car.c: 482: SE8R01_Analog_Init();   
      000645 CDr04rC4         [ 4] 1397 	call	_SE8R01_Analog_Init
                                   1398 ;	se8r01-receive-car.c: 486: if (SE8R01_DR_2M==1)
      000648 CEu00u00         [ 2] 1399 	ldw	x, _SE8R01_DR_2M+0
      00064B A3 00 01         [ 2] 1400 	cpw	x, #0x0001
      00064E 26 07            [ 1] 1401 	jrne	00105$
                                   1402 ;	se8r01-receive-car.c: 487: {  temp[0]=0b01001111; }     //2MHz,+5dbm
      000650 96               [ 1] 1403 	ldw	x, sp
      000651 5C               [ 2] 1404 	incw	x
      000652 A6 4F            [ 1] 1405 	ld	a, #0x4f
      000654 F7               [ 1] 1406 	ld	(x), a
      000655 20 14            [ 2] 1407 	jra	00106$
      000657                       1408 00105$:
                                   1409 ;	se8r01-receive-car.c: 488: else if  (SE8R01_DR_1M==1)
      000657 CEu00u02         [ 2] 1410 	ldw	x, _SE8R01_DR_1M+0
      00065A A3 00 01         [ 2] 1411 	cpw	x, #0x0001
      00065D 26 07            [ 1] 1412 	jrne	00102$
                                   1413 ;	se8r01-receive-car.c: 489: {  temp[0]=0b01000111;  }     //1MHz,+5dbm
      00065F 96               [ 1] 1414 	ldw	x, sp
      000660 5C               [ 2] 1415 	incw	x
      000661 A6 47            [ 1] 1416 	ld	a, #0x47
      000663 F7               [ 1] 1417 	ld	(x), a
      000664 20 05            [ 2] 1418 	jra	00106$
      000666                       1419 00102$:
                                   1420 ;	se8r01-receive-car.c: 491: {temp[0]=0b01101111;  }     //500K,+5dbm
      000666 96               [ 1] 1421 	ldw	x, sp
      000667 5C               [ 2] 1422 	incw	x
      000668 A6 6F            [ 1] 1423 	ld	a, #0x6f
      00066A F7               [ 1] 1424 	ld	(x), a
      00066B                       1425 00106$:
                                   1426 ;	se8r01-receive-car.c: 493: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_RF_SETUP,temp,1);
      00066B 96               [ 1] 1427 	ldw	x, sp
      00066C 5C               [ 2] 1428 	incw	x
      00066D 4B 01            [ 1] 1429 	push	#0x01
      00066F 89               [ 2] 1430 	pushw	x
      000670 4B 26            [ 1] 1431 	push	#0x26
      000672 CDr00rA8         [ 4] 1432 	call	_write_spi_buf
      000675 5B 04            [ 2] 1433 	addw	sp, #4
                                   1434 ;	se8r01-receive-car.c: 494: write_spi_reg(WRITE_REG|iRF_BANK0_EN_AA, 0b00111111);          //enable auto acc on pip 1
      000677 4B 3F            [ 1] 1435 	push	#0x3f
      000679 4B 21            [ 1] 1436 	push	#0x21
      00067B CDr00r2E         [ 4] 1437 	call	_write_spi_reg
      00067E 5B 02            [ 2] 1438 	addw	sp, #2
                                   1439 ;	se8r01-receive-car.c: 495: write_spi_reg(WRITE_REG|iRF_BANK0_EN_RXADDR, 0b00111111);      //enable pip 1
      000680 4B 3F            [ 1] 1440 	push	#0x3f
      000682 4B 22            [ 1] 1441 	push	#0x22
      000684 CDr00r2E         [ 4] 1442 	call	_write_spi_reg
      000687 5B 02            [ 2] 1443 	addw	sp, #2
                                   1444 ;	se8r01-receive-car.c: 496: write_spi_reg(WRITE_REG|iRF_BANK0_SETUP_AW, 0x02);  
      000689 4B 02            [ 1] 1445 	push	#0x02
      00068B 4B 23            [ 1] 1446 	push	#0x23
      00068D CDr00r2E         [ 4] 1447 	call	_write_spi_reg
      000690 5B 02            [ 2] 1448 	addw	sp, #2
                                   1449 ;	se8r01-receive-car.c: 497: write_spi_reg(WRITE_REG|iRF_BANK0_RF_CH, 40);
      000692 4B 28            [ 1] 1450 	push	#0x28
      000694 4B 25            [ 1] 1451 	push	#0x25
      000696 CDr00r2E         [ 4] 1452 	call	_write_spi_reg
      000699 5B 02            [ 2] 1453 	addw	sp, #2
                                   1454 ;	se8r01-receive-car.c: 499: write_spi_buf(WRITE_REG + TX_ADDR, ADDRESS0, ADR_WIDTH);    	
      00069B AEr00r1A         [ 2] 1455 	ldw	x, #_ADDRESS0+0
      00069E 90 93            [ 1] 1456 	ldw	y, x
      0006A0 89               [ 2] 1457 	pushw	x
      0006A1 4B 04            [ 1] 1458 	push	#0x04
      0006A3 90 89            [ 2] 1459 	pushw	y
      0006A5 4B 30            [ 1] 1460 	push	#0x30
      0006A7 CDr00rA8         [ 4] 1461 	call	_write_spi_buf
      0006AA 5B 04            [ 2] 1462 	addw	sp, #4
      0006AC 85               [ 2] 1463 	popw	x
                                   1464 ;	se8r01-receive-car.c: 500: write_spi_buf(WRITE_REG + RX_ADDR_P0, ADDRESS0, ADR_WIDTH); 
      0006AD 4B 04            [ 1] 1465 	push	#0x04
      0006AF 89               [ 2] 1466 	pushw	x
      0006B0 4B 2A            [ 1] 1467 	push	#0x2a
      0006B2 CDr00rA8         [ 4] 1468 	call	_write_spi_buf
      0006B5 5B 04            [ 2] 1469 	addw	sp, #4
                                   1470 ;	se8r01-receive-car.c: 501: write_spi_buf(WRITE_REG + RX_ADDR_P1, ADDRESS1, ADR_WIDTH); 
      0006B7 AEr00r16         [ 2] 1471 	ldw	x, #_ADDRESS1+0
      0006BA 4B 04            [ 1] 1472 	push	#0x04
      0006BC 89               [ 2] 1473 	pushw	x
      0006BD 4B 2B            [ 1] 1474 	push	#0x2b
      0006BF CDr00rA8         [ 4] 1475 	call	_write_spi_buf
      0006C2 5B 04            [ 2] 1476 	addw	sp, #4
                                   1477 ;	se8r01-receive-car.c: 502: write_spi_buf(WRITE_REG + RX_ADDR_P2, ADDRESS2, 1); 
      0006C4 AEr00r12         [ 2] 1478 	ldw	x, #_ADDRESS2+0
      0006C7 4B 01            [ 1] 1479 	push	#0x01
      0006C9 89               [ 2] 1480 	pushw	x
      0006CA 4B 2C            [ 1] 1481 	push	#0x2c
      0006CC CDr00rA8         [ 4] 1482 	call	_write_spi_buf
      0006CF 5B 04            [ 2] 1483 	addw	sp, #4
                                   1484 ;	se8r01-receive-car.c: 503: write_spi_buf(WRITE_REG + RX_ADDR_P3, ADDRESS3, 1); 
      0006D1 AEr00r13         [ 2] 1485 	ldw	x, #_ADDRESS3+0
      0006D4 4B 01            [ 1] 1486 	push	#0x01
      0006D6 89               [ 2] 1487 	pushw	x
      0006D7 4B 2D            [ 1] 1488 	push	#0x2d
      0006D9 CDr00rA8         [ 4] 1489 	call	_write_spi_buf
      0006DC 5B 04            [ 2] 1490 	addw	sp, #4
                                   1491 ;	se8r01-receive-car.c: 504: write_spi_buf(WRITE_REG + RX_ADDR_P4, ADDRESS4, 1); 
      0006DE AEr00r14         [ 2] 1492 	ldw	x, #_ADDRESS4+0
      0006E1 4B 01            [ 1] 1493 	push	#0x01
      0006E3 89               [ 2] 1494 	pushw	x
      0006E4 4B 2E            [ 1] 1495 	push	#0x2e
      0006E6 CDr00rA8         [ 4] 1496 	call	_write_spi_buf
      0006E9 5B 04            [ 2] 1497 	addw	sp, #4
                                   1498 ;	se8r01-receive-car.c: 505: write_spi_buf(WRITE_REG + RX_ADDR_P5, ADDRESS5, 1); 
      0006EB AEr00r15         [ 2] 1499 	ldw	x, #_ADDRESS5+0
      0006EE 4B 01            [ 1] 1500 	push	#0x01
      0006F0 89               [ 2] 1501 	pushw	x
      0006F1 4B 2F            [ 1] 1502 	push	#0x2f
      0006F3 CDr00rA8         [ 4] 1503 	call	_write_spi_buf
      0006F6 5B 04            [ 2] 1504 	addw	sp, #4
                                   1505 ;	se8r01-receive-car.c: 506: write_spi_reg(WRITE_REG + RX_PW_P0, PLOAD_WIDTH); 
      0006F8 4B 20            [ 1] 1506 	push	#0x20
      0006FA 4B 31            [ 1] 1507 	push	#0x31
      0006FC CDr00r2E         [ 4] 1508 	call	_write_spi_reg
      0006FF 5B 02            [ 2] 1509 	addw	sp, #2
                                   1510 ;	se8r01-receive-car.c: 507: write_spi_reg(WRITE_REG|iRF_BANK0_CONFIG, 0x3f); 
      000701 4B 3F            [ 1] 1511 	push	#0x3f
      000703 4B 20            [ 1] 1512 	push	#0x20
      000705 CDr00r2E         [ 4] 1513 	call	_write_spi_reg
      000708 5B 02            [ 2] 1514 	addw	sp, #2
                                   1515 ;	se8r01-receive-car.c: 508: write_spi_reg(WRITE_REG|iRF_BANK0_DYNPD, 0b00111111);          // enable dynamic payload length data
      00070A 4B 3F            [ 1] 1516 	push	#0x3f
      00070C 4B 3C            [ 1] 1517 	push	#0x3c
      00070E CDr00r2E         [ 4] 1518 	call	_write_spi_reg
      000711 5B 02            [ 2] 1519 	addw	sp, #2
                                   1520 ;	se8r01-receive-car.c: 509: write_spi_reg(WRITE_REG|iRF_BANK0_FEATURE, 0x07);        // enable dynamic paload lenght; enbale payload with ack enable w_tx_payload_noack
      000713 4B 07            [ 1] 1521 	push	#0x07
      000715 4B 3D            [ 1] 1522 	push	#0x3d
      000717 CDr00r2E         [ 4] 1523 	call	_write_spi_reg
      00071A 5B 02            [ 2] 1524 	addw	sp, #2
                                   1525 ;	se8r01-receive-car.c: 510: PC_ODR |= (1 << CE);
      00071C AE 50 0A         [ 2] 1526 	ldw	x, #0x500a
      00071F F6               [ 1] 1527 	ld	a, (x)
      000720 AA 10            [ 1] 1528 	or	a, #0x10
      000722 F7               [ 1] 1529 	ld	(x), a
      000723 5B 05            [ 2] 1530 	addw	sp, #5
      000725 81               [ 4] 1531 	ret
                                   1532 ;	se8r01-receive-car.c: 515: void Init_Tim2 ()
                                   1533 ;	-----------------------------------------
                                   1534 ;	 function Init_Tim2
                                   1535 ;	-----------------------------------------
      000726                       1536 _Init_Tim2:
                                   1537 ;	se8r01-receive-car.c: 551: TIM2_CCMR3 |=0X70;//Set the timer 2 / three channel three (PD2) output mode
      000726 AE 53 09         [ 2] 1538 	ldw	x, #0x5309
      000729 F6               [ 1] 1539 	ld	a, (x)
      00072A AA 70            [ 1] 1540 	or	a, #0x70
      00072C F7               [ 1] 1541 	ld	(x), a
                                   1542 ;	se8r01-receive-car.c: 552: TIM2_CCMR3 |=0X04;//Comparison of 3 pre load / / output enable
      00072D AE 53 09         [ 2] 1543 	ldw	x, #0x5309
      000730 F6               [ 1] 1544 	ld	a, (x)
      000731 AA 04            [ 1] 1545 	or	a, #0x04
      000733 F7               [ 1] 1546 	ld	(x), a
                                   1547 ;	se8r01-receive-car.c: 554: TIM2_CCER2 |=0x03;//  Channel 3 enable, active low output configuration
      000734 AE 53 0B         [ 2] 1548 	ldw	x, #0x530b
      000737 F6               [ 1] 1549 	ld	a, (x)
      000738 AA 03            [ 1] 1550 	or	a, #0x03
      00073A F7               [ 1] 1551 	ld	(x), a
                                   1552 ;	se8r01-receive-car.c: 556: TIM2_PSCR =0X04;// 16 Mhz/2^4 =  1Mhz  -- the prescaler is a 4 bit number!
      00073B AE 53 0E         [ 2] 1553 	ldw	x, #0x530e
      00073E A6 04            [ 1] 1554 	ld	a, #0x04
      000740 F7               [ 1] 1555 	ld	(x), a
                                   1556 ;	se8r01-receive-car.c: 560: TIM2_ARRH =20000/256; // auto reload register
      000741 AE 53 0F         [ 2] 1557 	ldw	x, #0x530f
      000744 A6 4E            [ 1] 1558 	ld	a, #0x4e
      000746 F7               [ 1] 1559 	ld	(x), a
                                   1560 ;	se8r01-receive-car.c: 561: TIM2_ARRL =20000%256; // 1000 Khz/20000 is 50 events per second 
      000747 AE 53 10         [ 2] 1561 	ldw	x, #0x5310
      00074A A6 20            [ 1] 1562 	ld	a, #0x20
      00074C F7               [ 1] 1563 	ld	(x), a
                                   1564 ;	se8r01-receive-car.c: 565: TIM2_CCR3H =1000/256; //compare capture register value
      00074D AE 53 15         [ 2] 1565 	ldw	x, #0x5315
      000750 A6 03            [ 1] 1566 	ld	a, #0x03
      000752 F7               [ 1] 1567 	ld	(x), a
                                   1568 ;	se8r01-receive-car.c: 566: TIM2_CCR3L =1000%256;
      000753 AE 53 16         [ 2] 1569 	ldw	x, #0x5316
      000756 A6 E8            [ 1] 1570 	ld	a, #0xe8
      000758 F7               [ 1] 1571 	ld	(x), a
                                   1572 ;	se8r01-receive-car.c: 567: UARTPrintF("timer init 1 = \n\r");
      000759 AEr09r82         [ 2] 1573 	ldw	x, #___str_0+0
      00075C 89               [ 2] 1574 	pushw	x
      00075D CDr01rD9         [ 4] 1575 	call	_UARTPrintF
      000760 5B 02            [ 2] 1576 	addw	sp, #2
                                   1577 ;	se8r01-receive-car.c: 576: TIM2_CCMR1 |=0X70;//Set the timer 2 / channel 1 output
      000762 AE 53 07         [ 2] 1578 	ldw	x, #0x5307
      000765 F6               [ 1] 1579 	ld	a, (x)
      000766 AA 70            [ 1] 1580 	or	a, #0x70
      000768 F7               [ 1] 1581 	ld	(x), a
                                   1582 ;	se8r01-receive-car.c: 577: TIM2_CCMR1 |=0X04;//Comparison of 3 pre load / / output enable
      000769 AE 53 07         [ 2] 1583 	ldw	x, #0x5307
      00076C F6               [ 1] 1584 	ld	a, (x)
      00076D AA 04            [ 1] 1585 	or	a, #0x04
      00076F F7               [ 1] 1586 	ld	(x), a
                                   1587 ;	se8r01-receive-car.c: 578: TIM2_CCER1 |=0x03;//  Channel 3 enable, active low output configuration
      000770 AE 53 0A         [ 2] 1588 	ldw	x, #0x530a
      000773 F6               [ 1] 1589 	ld	a, (x)
      000774 AA 03            [ 1] 1590 	or	a, #0x03
      000776 F7               [ 1] 1591 	ld	(x), a
                                   1592 ;	se8r01-receive-car.c: 582: TIM2_CCR3H =10000/256; //compare capture register value
      000777 AE 53 15         [ 2] 1593 	ldw	x, #0x5315
      00077A A6 27            [ 1] 1594 	ld	a, #0x27
      00077C F7               [ 1] 1595 	ld	(x), a
                                   1596 ;	se8r01-receive-car.c: 583: TIM2_CCR3L =10000%256;
      00077D AE 53 16         [ 2] 1597 	ldw	x, #0x5316
      000780 A6 10            [ 1] 1598 	ld	a, #0x10
      000782 F7               [ 1] 1599 	ld	(x), a
                                   1600 ;	se8r01-receive-car.c: 587: UARTPrintF("timer init 2 = \n\r");
      000783 AEr09r94         [ 2] 1601 	ldw	x, #___str_1+0
      000786 89               [ 2] 1602 	pushw	x
      000787 CDr01rD9         [ 4] 1603 	call	_UARTPrintF
      00078A 5B 02            [ 2] 1604 	addw	sp, #2
                                   1605 ;	se8r01-receive-car.c: 590: TIM2_CR1 |=0x81;
      00078C AE 53 00         [ 2] 1606 	ldw	x, #0x5300
      00078F F6               [ 1] 1607 	ld	a, (x)
      000790 AA 81            [ 1] 1608 	or	a, #0x81
      000792 F7               [ 1] 1609 	ld	(x), a
      000793 81               [ 4] 1610 	ret
                                   1611 ;	se8r01-receive-car.c: 596: int main () {
                                   1612 ;	-----------------------------------------
                                   1613 ;	 function main
                                   1614 ;	-----------------------------------------
      000794                       1615 _main:
      000794 52 33            [ 2] 1616 	sub	sp, #51
                                   1617 ;	se8r01-receive-car.c: 598: UCHAR rx_addr_p1[]  = { 0xd2, 0xf0, 0xf0, 0xf0, 0xf0 };
      000796 90 96            [ 1] 1618 	ldw	y, sp
      000798 72 A9 00 07      [ 2] 1619 	addw	y, #7
      00079C A6 D2            [ 1] 1620 	ld	a, #0xd2
      00079E 90 F7            [ 1] 1621 	ld	(y), a
      0007A0 93               [ 1] 1622 	ldw	x, y
      0007A1 5C               [ 2] 1623 	incw	x
      0007A2 A6 F0            [ 1] 1624 	ld	a, #0xf0
      0007A4 F7               [ 1] 1625 	ld	(x), a
      0007A5 93               [ 1] 1626 	ldw	x, y
      0007A6 5C               [ 2] 1627 	incw	x
      0007A7 5C               [ 2] 1628 	incw	x
      0007A8 A6 F0            [ 1] 1629 	ld	a, #0xf0
      0007AA F7               [ 1] 1630 	ld	(x), a
      0007AB 93               [ 1] 1631 	ldw	x, y
      0007AC A6 F0            [ 1] 1632 	ld	a, #0xf0
      0007AE E7 03            [ 1] 1633 	ld	(0x0003, x), a
      0007B0 93               [ 1] 1634 	ldw	x, y
      0007B1 A6 F0            [ 1] 1635 	ld	a, #0xf0
      0007B3 E7 04            [ 1] 1636 	ld	(0x0004, x), a
                                   1637 ;	se8r01-receive-car.c: 599: UCHAR tx_addr[]     = { 0xe1, 0xf0, 0xf0, 0xf0, 0xf0 };
      0007B5 90 96            [ 1] 1638 	ldw	y, sp
      0007B7 72 A9 00 2D      [ 2] 1639 	addw	y, #45
      0007BB A6 E1            [ 1] 1640 	ld	a, #0xe1
      0007BD 90 F7            [ 1] 1641 	ld	(y), a
      0007BF 93               [ 1] 1642 	ldw	x, y
      0007C0 5C               [ 2] 1643 	incw	x
      0007C1 A6 F0            [ 1] 1644 	ld	a, #0xf0
      0007C3 F7               [ 1] 1645 	ld	(x), a
      0007C4 93               [ 1] 1646 	ldw	x, y
      0007C5 5C               [ 2] 1647 	incw	x
      0007C6 5C               [ 2] 1648 	incw	x
      0007C7 A6 F0            [ 1] 1649 	ld	a, #0xf0
      0007C9 F7               [ 1] 1650 	ld	(x), a
      0007CA 93               [ 1] 1651 	ldw	x, y
      0007CB A6 F0            [ 1] 1652 	ld	a, #0xf0
      0007CD E7 03            [ 1] 1653 	ld	(0x0003, x), a
      0007CF 93               [ 1] 1654 	ldw	x, y
      0007D0 1C 00 04         [ 2] 1655 	addw	x, #0x0004
      0007D3 A6 F0            [ 1] 1656 	ld	a, #0xf0
      0007D5 F7               [ 1] 1657 	ld	(x), a
                                   1658 ;	se8r01-receive-car.c: 604: InitializeSystemClock();
      0007D6 CDr01r44         [ 4] 1659 	call	_InitializeSystemClock
                                   1660 ;	se8r01-receive-car.c: 605: InitializeUART();
      0007D9 CDr02r3E         [ 4] 1661 	call	_InitializeUART
                                   1662 ;	se8r01-receive-car.c: 607: InitializeSPI ();
      0007DC CDr01r1C         [ 4] 1663 	call	_InitializeSPI
                                   1664 ;	se8r01-receive-car.c: 609: UARTPrintF("start debug \n\r");
      0007DF AEr09rA6         [ 2] 1665 	ldw	x, #___str_2+0
      0007E2 89               [ 2] 1666 	pushw	x
      0007E3 CDr01rD9         [ 4] 1667 	call	_UARTPrintF
      0007E6 5B 02            [ 2] 1668 	addw	sp, #2
                                   1669 ;	se8r01-receive-car.c: 611: memset (tx_payload, 0, sizeof(tx_payload));
      0007E8 96               [ 1] 1670 	ldw	x, sp
      0007E9 1C 00 0C         [ 2] 1671 	addw	x, #12
      0007EC 4B 21            [ 1] 1672 	push	#0x21
      0007EE 4B 00            [ 1] 1673 	push	#0x00
      0007F0 4B 00            [ 1] 1674 	push	#0x00
      0007F2 4B 00            [ 1] 1675 	push	#0x00
      0007F4 89               [ 2] 1676 	pushw	x
      0007F5 CDr00r00         [ 4] 1677 	call	_memset
      0007F8 5B 06            [ 2] 1678 	addw	sp, #6
                                   1679 ;	se8r01-receive-car.c: 614: init_io();                        // Initialize IO port
      0007FA CDr02rB7         [ 4] 1680 	call	_init_io
                                   1681 ;	se8r01-receive-car.c: 615: write_spi_reg(FLUSH_RX,0); // receive data 
      0007FD 4B 00            [ 1] 1682 	push	#0x00
      0007FF 4B E2            [ 1] 1683 	push	#0xe2
      000801 CDr00r2E         [ 4] 1684 	call	_write_spi_reg
      000804 5B 02            [ 2] 1685 	addw	sp, #2
                                   1686 ;	se8r01-receive-car.c: 616: readstatus = read_spi_reg(CONFIG);
      000806 4B 00            [ 1] 1687 	push	#0x00
      000808 CDr00r6A         [ 4] 1688 	call	_read_spi_reg
      00080B 5B 01            [ 2] 1689 	addw	sp, #1
                                   1690 ;	se8r01-receive-car.c: 617: UARTPrintF("config = \n\r");
      00080D AEr09rB5         [ 2] 1691 	ldw	x, #___str_3+0
      000810 88               [ 1] 1692 	push	a
      000811 89               [ 2] 1693 	pushw	x
      000812 CDr01rD9         [ 4] 1694 	call	_UARTPrintF
      000815 5B 02            [ 2] 1695 	addw	sp, #2
      000817 84               [ 1] 1696 	pop	a
                                   1697 ;	se8r01-receive-car.c: 618: print_UCHAR_hex(readstatus);
      000818 88               [ 1] 1698 	push	a
      000819 CDr01rF0         [ 4] 1699 	call	_print_UCHAR_hex
      00081C 84               [ 1] 1700 	pop	a
                                   1701 ;	se8r01-receive-car.c: 619: readstatus = read_spi_reg(STATUS);
      00081D 4B 07            [ 1] 1702 	push	#0x07
      00081F CDr00r6A         [ 4] 1703 	call	_read_spi_reg
      000822 5B 01            [ 2] 1704 	addw	sp, #1
                                   1705 ;	se8r01-receive-car.c: 620: UARTPrintF("status = \n\r");
      000824 AEr09rC1         [ 2] 1706 	ldw	x, #___str_4+0
      000827 88               [ 1] 1707 	push	a
      000828 89               [ 2] 1708 	pushw	x
      000829 CDr01rD9         [ 4] 1709 	call	_UARTPrintF
      00082C 5B 02            [ 2] 1710 	addw	sp, #2
      00082E 84               [ 1] 1711 	pop	a
                                   1712 ;	se8r01-receive-car.c: 621: print_UCHAR_hex(readstatus);
      00082F 88               [ 1] 1713 	push	a
      000830 CDr01rF0         [ 4] 1714 	call	_print_UCHAR_hex
      000833 84               [ 1] 1715 	pop	a
                                   1716 ;	se8r01-receive-car.c: 625: Init_Tim2 (); //pwm for led on pd2
      000834 CDr07r26         [ 4] 1717 	call	_Init_Tim2
                                   1718 ;	se8r01-receive-car.c: 626: PA_DDR |= (1<<3);
      000837 AE 50 02         [ 2] 1719 	ldw	x, #0x5002
      00083A F6               [ 1] 1720 	ld	a, (x)
      00083B AA 08            [ 1] 1721 	or	a, #0x08
      00083D F7               [ 1] 1722 	ld	(x), a
                                   1723 ;	se8r01-receive-car.c: 627: PA_CR1 |= (1<<3);
      00083E AE 50 03         [ 2] 1724 	ldw	x, #0x5003
      000841 F6               [ 1] 1725 	ld	a, (x)
      000842 AA 08            [ 1] 1726 	or	a, #0x08
      000844 F7               [ 1] 1727 	ld	(x), a
                                   1728 ;	se8r01-receive-car.c: 628: PA_CR2 &= 0xFD;
      000845 AE 50 04         [ 2] 1729 	ldw	x, #0x5004
      000848 F6               [ 1] 1730 	ld	a, (x)
      000849 A4 FD            [ 1] 1731 	and	a, #0xfd
      00084B F7               [ 1] 1732 	ld	(x), a
                                   1733 ;	se8r01-receive-car.c: 630: UARTPrintF("timer initialised = \n\r");
      00084C AEr09rCD         [ 2] 1734 	ldw	x, #___str_5+0
      00084F 89               [ 2] 1735 	pushw	x
      000850 CDr01rD9         [ 4] 1736 	call	_UARTPrintF
      000853 5B 02            [ 2] 1737 	addw	sp, #2
                                   1738 ;	se8r01-receive-car.c: 638: PB_DDR = (1 << 4) | (1 << 5);  // output mode
      000855 AE 50 07         [ 2] 1739 	ldw	x, #0x5007
      000858 A6 30            [ 1] 1740 	ld	a, #0x30
      00085A F7               [ 1] 1741 	ld	(x), a
                                   1742 ;	se8r01-receive-car.c: 639: PB_CR1 = (1 << 4) | (1 << 5);  // push-pull
      00085B AE 50 08         [ 2] 1743 	ldw	x, #0x5008
      00085E A6 30            [ 1] 1744 	ld	a, #0x30
      000860 F7               [ 1] 1745 	ld	(x), a
                                   1746 ;	se8r01-receive-car.c: 640: PB_CR2 = (1 << 4) | (1 << 5);  // up to 10MHz speed
      000861 AE 50 09         [ 2] 1747 	ldw	x, #0x5009
      000864 A6 30            [ 1] 1748 	ld	a, #0x30
      000866 F7               [ 1] 1749 	ld	(x), a
                                   1750 ;	se8r01-receive-car.c: 646: PA_DDR = (1 << 1) | (1 << 2);  // output mode
      000867 AE 50 02         [ 2] 1751 	ldw	x, #0x5002
      00086A A6 06            [ 1] 1752 	ld	a, #0x06
      00086C F7               [ 1] 1753 	ld	(x), a
                                   1754 ;	se8r01-receive-car.c: 647: PA_CR1 = (1 << 1) | (1 << 2);  // push-pull
      00086D AE 50 03         [ 2] 1755 	ldw	x, #0x5003
      000870 A6 06            [ 1] 1756 	ld	a, #0x06
      000872 F7               [ 1] 1757 	ld	(x), a
                                   1758 ;	se8r01-receive-car.c: 648: PA_CR2 = (1 << 1) | (1 << 2);  // up to 10MHz speed
      000873 AE 50 04         [ 2] 1759 	ldw	x, #0x5004
      000876 A6 06            [ 1] 1760 	ld	a, #0x06
      000878 F7               [ 1] 1761 	ld	(x), a
                                   1762 ;	se8r01-receive-car.c: 653: PB_ODR |= 1 << 4;
      000879 AE 50 05         [ 2] 1763 	ldw	x, #0x5005
      00087C F6               [ 1] 1764 	ld	a, (x)
      00087D AA 10            [ 1] 1765 	or	a, #0x10
      00087F F7               [ 1] 1766 	ld	(x), a
                                   1767 ;	se8r01-receive-car.c: 657: PB_ODR |= 1 << 5;
      000880 AE 50 05         [ 2] 1768 	ldw	x, #0x5005
      000883 F6               [ 1] 1769 	ld	a, (x)
      000884 AA 20            [ 1] 1770 	or	a, #0x20
      000886 F7               [ 1] 1771 	ld	(x), a
                                   1772 ;	se8r01-receive-car.c: 662: PA_ODR |= 1 << 1;
      000887 AE 50 00         [ 2] 1773 	ldw	x, #0x5000
      00088A F6               [ 1] 1774 	ld	a, (x)
      00088B AA 02            [ 1] 1775 	or	a, #0x02
      00088D F7               [ 1] 1776 	ld	(x), a
                                   1777 ;	se8r01-receive-car.c: 668: while (1) {
      00088E                       1778 00110$:
                                   1779 ;	se8r01-receive-car.c: 670: TIM2_CCR3H =1000/256; //compare capture register value
      00088E AE 53 15         [ 2] 1780 	ldw	x, #0x5315
      000891 A6 03            [ 1] 1781 	ld	a, #0x03
      000893 F7               [ 1] 1782 	ld	(x), a
                                   1783 ;	se8r01-receive-car.c: 671: TIM2_CCR3L =1000%256;
      000894 AE 53 16         [ 2] 1784 	ldw	x, #0x5316
      000897 A6 E8            [ 1] 1785 	ld	a, #0xe8
      000899 F7               [ 1] 1786 	ld	(x), a
                                   1787 ;	se8r01-receive-car.c: 672: delay(1000);
      00089A 4B E8            [ 1] 1788 	push	#0xe8
      00089C 4B 03            [ 1] 1789 	push	#0x03
      00089E CDr01r8E         [ 4] 1790 	call	_delay
      0008A1 5B 02            [ 2] 1791 	addw	sp, #2
                                   1792 ;	se8r01-receive-car.c: 674: TIM2_CCR3H =2000/256; //compare capture register value
      0008A3 AE 53 15         [ 2] 1793 	ldw	x, #0x5315
      0008A6 A6 07            [ 1] 1794 	ld	a, #0x07
      0008A8 F7               [ 1] 1795 	ld	(x), a
                                   1796 ;	se8r01-receive-car.c: 675: TIM2_CCR3L =2000%256;
      0008A9 AE 53 16         [ 2] 1797 	ldw	x, #0x5316
      0008AC A6 D0            [ 1] 1798 	ld	a, #0xd0
      0008AE F7               [ 1] 1799 	ld	(x), a
                                   1800 ;	se8r01-receive-car.c: 676: delay(1000);
      0008AF 4B E8            [ 1] 1801 	push	#0xe8
      0008B1 4B 03            [ 1] 1802 	push	#0x03
      0008B3 CDr01r8E         [ 4] 1803 	call	_delay
      0008B6 5B 02            [ 2] 1804 	addw	sp, #2
                                   1805 ;	se8r01-receive-car.c: 679: if ((PD_IDR & (1 << 3))==0) //input low
      0008B8 AE 50 10         [ 2] 1806 	ldw	x, #0x5010
      0008BB F6               [ 1] 1807 	ld	a, (x)
      0008BC A5 08            [ 1] 1808 	bcp	a, #0x08
      0008BE 27 03            [ 1] 1809 	jreq	00170$
      0008C0 CCr09r48         [ 2] 1810 	jp	00105$
      0008C3                       1811 00170$:
                                   1812 ;	se8r01-receive-car.c: 683: delay(240);
      0008C3 4B F0            [ 1] 1813 	push	#0xf0
      0008C5 4B 00            [ 1] 1814 	push	#0x00
      0008C7 CDr01r8E         [ 4] 1815 	call	_delay
      0008CA 5B 02            [ 2] 1816 	addw	sp, #2
                                   1817 ;	se8r01-receive-car.c: 684: signal_lv=read_spi_reg(iRF_BANK0_RPD);
      0008CC 4B 09            [ 1] 1818 	push	#0x09
      0008CE CDr00r6A         [ 4] 1819 	call	_read_spi_reg
      0008D1 5B 01            [ 2] 1820 	addw	sp, #1
      0008D3 C7u00u0A         [ 1] 1821 	ld	_signal_lv+0, a
                                   1822 ;	se8r01-receive-car.c: 685: status = read_spi_reg(STATUS);
      0008D6 4B 07            [ 1] 1823 	push	#0x07
      0008D8 CDr00r6A         [ 4] 1824 	call	_read_spi_reg
      0008DB 5B 01            [ 2] 1825 	addw	sp, #1
      0008DD C7u00u0D         [ 1] 1826 	ld	_status+0, a
                                   1827 ;	se8r01-receive-car.c: 687: if(status&STA_MARK_RX)                                                 // if receive data ready (TX_DS) interrupt
      0008E0 72 06u00u0D 02   [ 2] 1828 	btjt	_status+0, #6, 00171$
      0008E5 20 57            [ 2] 1829 	jra	00103$
      0008E7                       1830 00171$:
                                   1831 ;	se8r01-receive-car.c: 690: pip= (status & 0b00001110)>>1;
      0008E7 C6u00u0D         [ 1] 1832 	ld	a, _status+0
      0008EA A4 0E            [ 1] 1833 	and	a, #0x0e
      0008EC 44               [ 1] 1834 	srl	a
      0008ED 5F               [ 1] 1835 	clrw	x
      0008EE 97               [ 1] 1836 	ld	xl, a
      0008EF CFu00u0B         [ 2] 1837 	ldw	_pip+0, x
                                   1838 ;	se8r01-receive-car.c: 691: pload_width_now=read_spi_reg(iRF_CMD_R_RX_PL_WID);
      0008F2 4B 60            [ 1] 1839 	push	#0x60
      0008F4 CDr00r6A         [ 4] 1840 	call	_read_spi_reg
      0008F7 5B 01            [ 2] 1841 	addw	sp, #1
      0008F9 5F               [ 1] 1842 	clrw	x
      0008FA 97               [ 1] 1843 	ld	xl, a
      0008FB CFu00u06         [ 2] 1844 	ldw	_pload_width_now+0, x
                                   1845 ;	se8r01-receive-car.c: 692: read_spi_buf(RD_RX_PLOAD, rx_buf,32);             // read playload to rx_buf
      0008FE AEr00r1E         [ 2] 1846 	ldw	x, #_rx_buf+0
      000901 1F 32            [ 2] 1847 	ldw	(0x32, sp), x
      000903 1E 32            [ 2] 1848 	ldw	x, (0x32, sp)
      000905 4B 20            [ 1] 1849 	push	#0x20
      000907 89               [ 2] 1850 	pushw	x
      000908 4B 61            [ 1] 1851 	push	#0x61
      00090A CDr00rE0         [ 4] 1852 	call	_read_spi_buf
      00090D 5B 04            [ 2] 1853 	addw	sp, #4
                                   1854 ;	se8r01-receive-car.c: 693: write_spi_reg(FLUSH_RX,0);
      00090F 4B 00            [ 1] 1855 	push	#0x00
      000911 4B E2            [ 1] 1856 	push	#0xe2
      000913 CDr00r2E         [ 4] 1857 	call	_write_spi_reg
      000916 5B 02            [ 2] 1858 	addw	sp, #2
                                   1859 ;	se8r01-receive-car.c: 695: newdata=1;
      000918 35 01u00u09      [ 1] 1860 	mov	_newdata+1, #0x01
      00091C 72 5Fu00u08      [ 1] 1861 	clr	_newdata+0
                                   1862 ;	se8r01-receive-car.c: 696: for (teller=0;teller<32;++teller)
      000920 5F               [ 1] 1863 	clrw	x
      000921                       1864 00112$:
                                   1865 ;	se8r01-receive-car.c: 697: print_UCHAR_hex (rx_buf[teller]);
      000921 90 93            [ 1] 1866 	ldw	y, x
      000923 72 F9 32         [ 2] 1867 	addw	y, (0x32, sp)
      000926 90 F6            [ 1] 1868 	ld	a, (y)
      000928 89               [ 2] 1869 	pushw	x
      000929 88               [ 1] 1870 	push	a
      00092A CDr01rF0         [ 4] 1871 	call	_print_UCHAR_hex
      00092D 84               [ 1] 1872 	pop	a
      00092E 85               [ 2] 1873 	popw	x
                                   1874 ;	se8r01-receive-car.c: 696: for (teller=0;teller<32;++teller)
      00092F 5C               [ 2] 1875 	incw	x
      000930 A3 00 20         [ 2] 1876 	cpw	x, #0x0020
      000933 2F EC            [ 1] 1877 	jrslt	00112$
                                   1878 ;	se8r01-receive-car.c: 698: UARTPrintF("\n\r");
      000935 AEr09rE4         [ 2] 1879 	ldw	x, #___str_6+0
      000938 89               [ 2] 1880 	pushw	x
      000939 CDr01rD9         [ 4] 1881 	call	_UARTPrintF
      00093C 5B 02            [ 2] 1882 	addw	sp, #2
      00093E                       1883 00103$:
                                   1884 ;	se8r01-receive-car.c: 701: write_spi_reg(WRITE_REG+STATUS,status);       // clear RX_DR or TX_DS or MAX_RT interrupt flag
      00093E 3Bu00u0D         [ 1] 1885 	push	_status+0
      000941 4B 27            [ 1] 1886 	push	#0x27
      000943 CDr00r2E         [ 4] 1887 	call	_write_spi_reg
      000946 5B 02            [ 2] 1888 	addw	sp, #2
      000948                       1889 00105$:
                                   1890 ;	se8r01-receive-car.c: 706: for (x1 = 0; x1 < 50; ++x1)
      000948 5F               [ 1] 1891 	clrw	x
      000949 1F 05            [ 2] 1892 	ldw	(0x05, sp), x
      00094B                       1893 00121$:
      00094B 1E 05            [ 2] 1894 	ldw	x, (0x05, sp)
      00094D A3 00 32         [ 2] 1895 	cpw	x, #0x0032
      000950 2F 03            [ 1] 1896 	jrslt	00173$
      000952 CCr08r8E         [ 2] 1897 	jp	00110$
      000955                       1898 00173$:
                                   1899 ;	se8r01-receive-car.c: 707: for (y1 = 0; y1 < 50; ++y1)
      000955 5F               [ 1] 1900 	clrw	x
      000956 1F 03            [ 2] 1901 	ldw	(0x03, sp), x
      000958                       1902 00118$:
      000958 1E 03            [ 2] 1903 	ldw	x, (0x03, sp)
      00095A A3 00 32         [ 2] 1904 	cpw	x, #0x0032
      00095D 2E 19            [ 1] 1905 	jrsge	00122$
                                   1906 ;	se8r01-receive-car.c: 708: for (z1 = 0; z1 < 50; ++z1)
      00095F 5F               [ 1] 1907 	clrw	x
      000960 1F 01            [ 2] 1908 	ldw	(0x01, sp), x
      000962                       1909 00115$:
      000962 1E 01            [ 2] 1910 	ldw	x, (0x01, sp)
      000964 A3 00 32         [ 2] 1911 	cpw	x, #0x0032
      000967 2E 08            [ 1] 1912 	jrsge	00119$
                                   1913 ;	se8r01-receive-car.c: 709: __asm__("nop");
      000969 9D               [ 1] 1914 	nop
                                   1915 ;	se8r01-receive-car.c: 708: for (z1 = 0; z1 < 50; ++z1)
      00096A 1E 01            [ 2] 1916 	ldw	x, (0x01, sp)
      00096C 5C               [ 2] 1917 	incw	x
      00096D 1F 01            [ 2] 1918 	ldw	(0x01, sp), x
      00096F 20 F1            [ 2] 1919 	jra	00115$
      000971                       1920 00119$:
                                   1921 ;	se8r01-receive-car.c: 707: for (y1 = 0; y1 < 50; ++y1)
      000971 1E 03            [ 2] 1922 	ldw	x, (0x03, sp)
      000973 5C               [ 2] 1923 	incw	x
      000974 1F 03            [ 2] 1924 	ldw	(0x03, sp), x
      000976 20 E0            [ 2] 1925 	jra	00118$
      000978                       1926 00122$:
                                   1927 ;	se8r01-receive-car.c: 706: for (x1 = 0; x1 < 50; ++x1)
      000978 1E 05            [ 2] 1928 	ldw	x, (0x05, sp)
      00097A 5C               [ 2] 1929 	incw	x
      00097B 1F 05            [ 2] 1930 	ldw	(0x05, sp), x
      00097D 20 CC            [ 2] 1931 	jra	00121$
      00097F 5B 33            [ 2] 1932 	addw	sp, #51
      000981 81               [ 4] 1933 	ret
                                   1934 	.area CODE
      000982                       1935 ___str_0:
      000982 74 69 6D 65 72 20 69  1936 	.ascii "timer init 1 = "
             6E 69 74 20 31 20 3D
             20
      000991 0A                    1937 	.db 0x0A
      000992 0D                    1938 	.db 0x0D
      000993 00                    1939 	.db 0x00
      000994                       1940 ___str_1:
      000994 74 69 6D 65 72 20 69  1941 	.ascii "timer init 2 = "
             6E 69 74 20 32 20 3D
             20
      0009A3 0A                    1942 	.db 0x0A
      0009A4 0D                    1943 	.db 0x0D
      0009A5 00                    1944 	.db 0x00
      0009A6                       1945 ___str_2:
      0009A6 73 74 61 72 74 20 64  1946 	.ascii "start debug "
             65 62 75 67 20
      0009B2 0A                    1947 	.db 0x0A
      0009B3 0D                    1948 	.db 0x0D
      0009B4 00                    1949 	.db 0x00
      0009B5                       1950 ___str_3:
      0009B5 63 6F 6E 66 69 67 20  1951 	.ascii "config = "
             3D 20
      0009BE 0A                    1952 	.db 0x0A
      0009BF 0D                    1953 	.db 0x0D
      0009C0 00                    1954 	.db 0x00
      0009C1                       1955 ___str_4:
      0009C1 73 74 61 74 75 73 20  1956 	.ascii "status = "
             3D 20
      0009CA 0A                    1957 	.db 0x0A
      0009CB 0D                    1958 	.db 0x0D
      0009CC 00                    1959 	.db 0x00
      0009CD                       1960 ___str_5:
      0009CD 74 69 6D 65 72 20 69  1961 	.ascii "timer initialised = "
             6E 69 74 69 61 6C 69
             73 65 64 20 3D 20
      0009E1 0A                    1962 	.db 0x0A
      0009E2 0D                    1963 	.db 0x0D
      0009E3 00                    1964 	.db 0x00
      0009E4                       1965 ___str_6:
      0009E4 0A                    1966 	.db 0x0A
      0009E5 0D                    1967 	.db 0x0D
      0009E6 00                    1968 	.db 0x00
                                   1969 	.area INITIALIZER
      000000                       1970 __xinit__SE8R01_DR_2M:
      000000 00 00                 1971 	.dw #0x0000
      000002                       1972 __xinit__SE8R01_DR_1M:
      000002 00 00                 1973 	.dw #0x0000
      000004                       1974 __xinit__SE8R01_DR_500K:
      000004 00 01                 1975 	.dw #0x0001
      000006                       1976 __xinit__pload_width_now:
      000006 00 00                 1977 	.dw #0x0000
      000008                       1978 __xinit__newdata:
      000008 00 00                 1979 	.dw #0x0000
      00000A                       1980 __xinit__signal_lv:
      00000A 00                    1981 	.db #0x00	;  0
      00000B                       1982 __xinit__pip:
      00000B 00 00                 1983 	.dw #0x0000
      00000D                       1984 __xinit__status:
      00000D 00                    1985 	.db #0x00	; 0
      00000E                       1986 __xinit__TX_ADDRESS:
      00000E B3                    1987 	.db #0xB3	; 179
      00000F 43                    1988 	.db #0x43	; 67	'C'
      000010 10                    1989 	.db #0x10	; 16
      000011 10                    1990 	.db #0x10	; 16
      000012                       1991 __xinit__ADDRESS2:
      000012 B1                    1992 	.db #0xB1	; 177
      000013                       1993 __xinit__ADDRESS3:
      000013 B2                    1994 	.db #0xB2	; 178
      000014                       1995 __xinit__ADDRESS4:
      000014 B3                    1996 	.db #0xB3	; 179
      000015                       1997 __xinit__ADDRESS5:
      000015 B4                    1998 	.db #0xB4	; 180
      000016                       1999 __xinit__ADDRESS1:
      000016 B0                    2000 	.db #0xB0	; 176
      000017 43                    2001 	.db #0x43	; 67	'C'
      000018 10                    2002 	.db #0x10	; 16
      000019 10                    2003 	.db #0x10	; 16
      00001A                       2004 __xinit__ADDRESS0:
      00001A 34                    2005 	.db #0x34	; 52	'4'
      00001B 43                    2006 	.db #0x43	; 67	'C'
      00001C 10                    2007 	.db #0x10	; 16
      00001D 10                    2008 	.db #0x10	; 16
      00001E                       2009 __xinit__rx_buf:
      00001E 00                    2010 	.db #0x00	; 0
      00001F 00                    2011 	.db 0x00
      000020 00                    2012 	.db 0x00
      000021 00                    2013 	.db 0x00
      000022 00                    2014 	.db 0x00
      000023 00                    2015 	.db 0x00
      000024 00                    2016 	.db 0x00
      000025 00                    2017 	.db 0x00
      000026 00                    2018 	.db 0x00
      000027 00                    2019 	.db 0x00
      000028 00                    2020 	.db 0x00
      000029 00                    2021 	.db 0x00
      00002A 00                    2022 	.db 0x00
      00002B 00                    2023 	.db 0x00
      00002C 00                    2024 	.db 0x00
      00002D 00                    2025 	.db 0x00
      00002E 00                    2026 	.db 0x00
      00002F 00                    2027 	.db 0x00
      000030 00                    2028 	.db 0x00
      000031 00                    2029 	.db 0x00
      000032 00                    2030 	.db 0x00
      000033 00                    2031 	.db 0x00
      000034 00                    2032 	.db 0x00
      000035 00                    2033 	.db 0x00
      000036 00                    2034 	.db 0x00
      000037 00                    2035 	.db 0x00
      000038 00                    2036 	.db 0x00
      000039 00                    2037 	.db 0x00
      00003A 00                    2038 	.db 0x00
      00003B 00                    2039 	.db 0x00
      00003C 00                    2040 	.db 0x00
      00003D 00                    2041 	.db 0x00
      00003E                       2042 __xinit__tx_buf:
      00003E 00                    2043 	.db #0x00	; 0
      00003F 00                    2044 	.db 0x00
      000040 00                    2045 	.db 0x00
      000041 00                    2046 	.db 0x00
      000042 00                    2047 	.db 0x00
      000043 00                    2048 	.db 0x00
      000044 00                    2049 	.db 0x00
      000045 00                    2050 	.db 0x00
      000046 00                    2051 	.db 0x00
      000047 00                    2052 	.db 0x00
      000048 00                    2053 	.db 0x00
      000049 00                    2054 	.db 0x00
      00004A 00                    2055 	.db 0x00
      00004B 00                    2056 	.db 0x00
      00004C 00                    2057 	.db 0x00
      00004D 00                    2058 	.db 0x00
      00004E 00                    2059 	.db 0x00
      00004F 00                    2060 	.db 0x00
      000050 00                    2061 	.db 0x00
      000051 00                    2062 	.db 0x00
      000052 00                    2063 	.db 0x00
      000053 00                    2064 	.db 0x00
      000054 00                    2065 	.db 0x00
      000055 00                    2066 	.db 0x00
      000056 00                    2067 	.db 0x00
      000057 00                    2068 	.db 0x00
      000058 00                    2069 	.db 0x00
      000059 00                    2070 	.db 0x00
      00005A 00                    2071 	.db 0x00
      00005B 00                    2072 	.db 0x00
      00005C 00                    2073 	.db 0x00
      00005D 00                    2074 	.db 0x00
                                   2075 	.area CABS (ABS)
